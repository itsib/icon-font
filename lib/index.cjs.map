{"version":3,"file":"index.cjs","sources":["../node_modules/commander/lib/error.js","../node_modules/commander/lib/argument.js","../node_modules/commander/lib/help.js","../node_modules/commander/lib/option.js","../node_modules/commander/lib/suggestSimilar.js","../node_modules/commander/lib/command.js","../node_modules/commander/index.js","../node_modules/commander/esm.mjs","../node_modules/resolve-from/index.js","../node_modules/callsites/index.js","../node_modules/parent-module/index.js","../node_modules/import-fresh/index.js","../node_modules/is-arrayish/index.js","../node_modules/error-ex/index.js","../node_modules/json-parse-even-better-errors/index.js","../node_modules/lines-and-columns/build/index.js","../node_modules/picocolors/picocolors.browser.js","../node_modules/js-tokens/index.js","../node_modules/@babel/helper-validator-identifier/lib/identifier.js","../node_modules/@babel/helper-validator-identifier/lib/keyword.js","../node_modules/@babel/helper-validator-identifier/lib/index.js","../node_modules/@babel/code-frame/lib/index.js","../node_modules/parse-json/index.js","../node_modules/js-yaml/lib/common.js","../node_modules/js-yaml/lib/exception.js","../node_modules/js-yaml/lib/snippet.js","../node_modules/js-yaml/lib/type.js","../node_modules/js-yaml/lib/schema.js","../node_modules/js-yaml/lib/type/str.js","../node_modules/js-yaml/lib/type/seq.js","../node_modules/js-yaml/lib/type/map.js","../node_modules/js-yaml/lib/schema/failsafe.js","../node_modules/js-yaml/lib/type/null.js","../node_modules/js-yaml/lib/type/bool.js","../node_modules/js-yaml/lib/type/int.js","../node_modules/js-yaml/lib/type/float.js","../node_modules/js-yaml/lib/schema/json.js","../node_modules/js-yaml/lib/schema/core.js","../node_modules/js-yaml/lib/type/timestamp.js","../node_modules/js-yaml/lib/type/merge.js","../node_modules/js-yaml/lib/type/binary.js","../node_modules/js-yaml/lib/type/omap.js","../node_modules/js-yaml/lib/type/pairs.js","../node_modules/js-yaml/lib/type/set.js","../node_modules/js-yaml/lib/schema/default.js","../node_modules/js-yaml/lib/loader.js","../node_modules/js-yaml/lib/dumper.js","../node_modules/js-yaml/index.js","../node_modules/cosmiconfig/dist/loaders.js","../node_modules/cosmiconfig/dist/defaults.js","../node_modules/env-paths/index.js","../node_modules/cosmiconfig/dist/util.js","../node_modules/cosmiconfig/dist/ExplorerBase.js","../node_modules/cosmiconfig/dist/merge.js","../node_modules/cosmiconfig/dist/Explorer.js","../node_modules/cosmiconfig/dist/ExplorerSync.js","../node_modules/cosmiconfig/dist/index.js","../src/utils/logger.ts","../src/utils/read-config.ts","../src/utils/populate-metadata.ts","../src/utils/constants.ts","../src/utils/read-files.ts","../src/streams/stream-read/stream-read.ts","../__vite-browser-external:stream","../__vite-browser-external:string_decoder","../node_modules/sax/lib/sax.js","../node_modules/svg-pathdata/dist/SVGPathDataEncoder.js","../node_modules/svg-pathdata/dist/mathUtils.js","../node_modules/svg-pathdata/dist/SVGPathDataTransformer.js","../node_modules/svg-pathdata/dist/TransformableSVG.js","../node_modules/svg-pathdata/dist/SVGPathDataParser.js","../node_modules/svg-pathdata/dist/SVGPathData.js","../src/svg-helpers/svg-rect-to-path.ts","../src/svg-helpers/svg-line-to-path.ts","../src/svg-helpers/svg-circle-to-path.ts","../src/streams/transform-prepare-icons/transform-prepare-icons.ts","../src/utils/slugify.ts","../src/utils/coders.ts","../src/streams/transform-to-svg-font/transform-to-svg-font.ts","../src/generators/font-svg/font-svg.ts","../src/entities/point.ts","../src/svg-helpers/svg-cubic-to-quad.ts","../src/utils/round.ts","../src/svg-helpers/svg-path-to-contour.ts","../src/entities/glyph.ts","../src/entities/font.ts","../src/entities/buffer-byte.ts","../src/streams/transform-to-ttf-font/tables/post.ts","../src/utils/string-to-bytes.ts","../src/streams/transform-to-ttf-font/tables/name.ts","../src/streams/transform-to-ttf-font/tables/glyf.ts","../src/streams/transform-to-ttf-font/tables/loca.ts","../src/streams/transform-to-ttf-font/tables/cmap.ts","../src/streams/transform-to-ttf-font/tables/hmtx.ts","../src/streams/transform-to-ttf-font/tables/gsub.ts","../src/streams/transform-to-ttf-font/tables/os2.ts","../src/streams/transform-to-ttf-font/tables/maxp.ts","../src/streams/transform-to-ttf-font/tables/head.ts","../src/streams/transform-to-ttf-font/tables/hhea.ts","../src/utils/compute-checksum.ts","../src/streams/transform-to-ttf-font/transform-to-ttf-font.ts","../src/generators/font-ttf/font-ttf.ts","../node_modules/ttf2eot/index.js","../src/generators/font-eot/font-eot.ts","../node_modules/pako/lib/utils/common.js","../node_modules/pako/lib/zlib/trees.js","../node_modules/pako/lib/zlib/adler32.js","../node_modules/pako/lib/zlib/crc32.js","../node_modules/pako/lib/zlib/messages.js","../node_modules/pako/lib/zlib/deflate.js","../node_modules/pako/lib/utils/strings.js","../node_modules/pako/lib/zlib/zstream.js","../node_modules/pako/lib/deflate.js","../node_modules/ttf2woff/index.js","../src/generators/font-woff/font-woff.ts","../node_modules/wawoff2/build/compress_binding.js","../node_modules/wawoff2/compress.js","../node_modules/wawoff2/build/decompress_binding.js","../node_modules/wawoff2/decompress.js","../node_modules/wawoff2/index.js","../src/generators/font-woff2/font-woff2.ts","../src/generators/style-css/style-css.ts","../src/default-config.ts","../src/cli/generate.ts","../src/generators/index-html/index-html.ts","../src/generators/logo-svg/logo-svg.ts","../src/server/router.ts","../src/server/watcher.ts","../src/server/server.ts","../src/server/scan-available-port.ts","../src/cli/demo.ts","../src/index.ts"],"sourcesContent":["/**\n * CommanderError class\n */\nclass CommanderError extends Error {\n  /**\n   * Constructs the CommanderError class\n   * @param {number} exitCode suggested exit code which could be used with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   */\n  constructor(exitCode, code, message) {\n    super(message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.code = code;\n    this.exitCode = exitCode;\n    this.nestedError = undefined;\n  }\n}\n\n/**\n * InvalidArgumentError class\n */\nclass InvalidArgumentError extends CommanderError {\n  /**\n   * Constructs the InvalidArgumentError class\n   * @param {string} [message] explanation of why argument is invalid\n   */\n  constructor(message) {\n    super(1, 'commander.invalidArgument', message);\n    // properly capture stack trace in Node.js\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n  }\n}\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Argument {\n  /**\n   * Initialize a new command argument with the given name and description.\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   */\n\n  constructor(name, description) {\n    this.description = description || '';\n    this.variadic = false;\n    this.parseArg = undefined;\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.argChoices = undefined;\n\n    switch (name[0]) {\n      case '<': // e.g. <required>\n        this.required = true;\n        this._name = name.slice(1, -1);\n        break;\n      case '[': // e.g. [optional]\n        this.required = false;\n        this._name = name.slice(1, -1);\n        break;\n      default:\n        this.required = true;\n        this._name = name;\n        break;\n    }\n\n    if (this._name.length > 3 && this._name.slice(-3) === '...') {\n      this.variadic = true;\n      this._name = this._name.slice(0, -3);\n    }\n  }\n\n  /**\n   * Return argument name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    return this._name;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Argument}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI command arguments into argument values.\n   *\n   * @param {Function} [fn]\n   * @return {Argument}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Only allow argument value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Argument}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Make argument required.\n   *\n   * @returns {Argument}\n   */\n  argRequired() {\n    this.required = true;\n    return this;\n  }\n\n  /**\n   * Make argument optional.\n   *\n   * @returns {Argument}\n   */\n  argOptional() {\n    this.required = false;\n    return this;\n  }\n}\n\n/**\n * Takes an argument and returns its human readable equivalent for help usage.\n *\n * @param {Argument} arg\n * @return {string}\n * @private\n */\n\nfunction humanReadableArgName(arg) {\n  const nameOutput = arg.name() + (arg.variadic === true ? '...' : '');\n\n  return arg.required ? '<' + nameOutput + '>' : '[' + nameOutput + ']';\n}\n\nexports.Argument = Argument;\nexports.humanReadableArgName = humanReadableArgName;\n","const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter((cmd) => !cmd._hidden);\n    const helpCommand = cmd._getHelpCommand();\n    if (helpCommand && !helpCommand._hidden) {\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: because overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns {number}\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short\n        ? option.short.replace(/^-/, '')\n        : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Built-in help option.\n    const helpOption = cmd._getHelpOption();\n    if (helpOption && !helpOption.hidden) {\n      // Automatically hide conflicting flags. Bit dubious but a historical behaviour that is convenient for single-command programs.\n      const removeShort = helpOption.short && cmd._findOption(helpOption.short);\n      const removeLong = helpOption.long && cmd._findOption(helpOption.long);\n      if (!removeShort && !removeLong) {\n        visibleOptions.push(helpOption); // no changes needed\n      } else if (helpOption.long && !removeLong) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.long, helpOption.description),\n        );\n      } else if (helpOption.short && !removeShort) {\n        visibleOptions.push(\n          cmd.createOption(helpOption.short, helpOption.description),\n        );\n      }\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      const visibleOptions = ancestorCmd.options.filter(\n        (option) => !option.hidden,\n      );\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd.registeredArguments.forEach((argument) => {\n        argument.description =\n          argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd.registeredArguments.find((argument) => argument.description)) {\n      return cmd.registeredArguments;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd.registeredArguments\n      .map((arg) => humanReadableArgName(arg))\n      .join(' ');\n    return (\n      cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '')\n    );\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let ancestorCmdNames = '';\n    for (\n      let ancestorCmd = cmd.parent;\n      ancestorCmd;\n      ancestorCmd = ancestorCmd.parent\n    ) {\n      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;\n    }\n    return ancestorCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: because overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault =\n        option.required ||\n        option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(\n          `default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`,\n        );\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`,\n      );\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(\n        `default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`,\n      );\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(\n          fullText,\n          helpWidth - itemIndentWidth,\n          termWidth + itemSeparatorWidth,\n        );\n      }\n      return term;\n    }\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([\n        helper.wrap(commandDescription, helpWidth, 0),\n        '',\n      ]);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(\n        helper.argumentTerm(argument),\n        helper.argumentDescription(argument),\n      );\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(\n        helper.optionTerm(option),\n        helper.optionDescription(option),\n      );\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    if (this.showGlobalOptions) {\n      const globalOptionList = helper\n        .visibleGlobalOptions(cmd)\n        .map((option) => {\n          return formatItem(\n            helper.optionTerm(option),\n            helper.optionDescription(option),\n          );\n        });\n      if (globalOptionList.length > 0) {\n        output = output.concat([\n          'Global Options:',\n          formatList(globalOptionList),\n          '',\n        ]);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(\n        helper.subcommandTerm(cmd),\n        helper.subcommandDescription(cmd),\n      );\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper),\n    );\n  }\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Full \\s characters, minus the linefeeds.\n    const indents =\n      ' \\\\f\\\\t\\\\v\\u00a0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff';\n    // Detect manually wrapped and indented strings by searching for line break followed by spaces.\n    const manualIndent = new RegExp(`[\\\\n][${indents}]+`);\n    if (str.match(manualIndent)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.slice(0, indent);\n    const columnText = str.slice(indent).replace('\\r\\n', '\\n');\n    const indentString = ' '.repeat(indent);\n    const zeroWidthSpace = '\\u200B';\n    const breaks = `\\\\s${zeroWidthSpace}`;\n    // Match line end (so empty lines don't collapse),\n    // or as much text as will fit in column, or excess text up to first break.\n    const regex = new RegExp(\n      `\\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`,\n      'g',\n    );\n    const lines = columnText.match(regex) || [];\n    return (\n      leadingStr +\n      lines\n        .map((line, i) => {\n          if (line === '\\n') return ''; // preserve empty lines\n          return (i > 0 ? indentString : '') + line.trimEnd();\n        })\n        .join('\\n')\n    );\n  }\n}\n\nexports.Help = Help;\n","const { InvalidArgumentError } = require('./error.js');\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {*} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {*} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {(string | string[])} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    let newImplied = impliedOptionValues;\n    if (typeof impliedOptionValues === 'string') {\n      // string is not documented, but easy mistake and we can do what user probably intended.\n      newImplied = { [impliedOptionValues]: true };\n    }\n    this.implied = Object.assign(this.implied || {}, newImplied);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @package\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(\n          `Allowed choices are ${this.argChoices.join(', ')}.`,\n        );\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @package\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @package\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach((option) => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {*} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = preset !== undefined ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1]))\n    shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.DualOptions = DualOptions;\n","const maxDistance = 3;\n\nfunction editDistance(a, b) {\n  // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance\n  // Calculating optimal string alignment distance, no substring is edited more than once.\n  // (Simple implementation.)\n\n  // Quick early exit, return worst case.\n  if (Math.abs(a.length - b.length) > maxDistance)\n    return Math.max(a.length, b.length);\n\n  // distance between prefix substrings of a and b\n  const d = [];\n\n  // pure deletions turn a into empty string\n  for (let i = 0; i <= a.length; i++) {\n    d[i] = [i];\n  }\n  // pure insertions turn empty string into b\n  for (let j = 0; j <= b.length; j++) {\n    d[0][j] = j;\n  }\n\n  // fill matrix\n  for (let j = 1; j <= b.length; j++) {\n    for (let i = 1; i <= a.length; i++) {\n      let cost = 1;\n      if (a[i - 1] === b[j - 1]) {\n        cost = 0;\n      } else {\n        cost = 1;\n      }\n      d[i][j] = Math.min(\n        d[i - 1][j] + 1, // deletion\n        d[i][j - 1] + 1, // insertion\n        d[i - 1][j - 1] + cost, // substitution\n      );\n      // transposition\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);\n      }\n    }\n  }\n\n  return d[a.length][b.length];\n}\n\n/**\n * Find close matches, restricted to same number of edits.\n *\n * @param {string} word\n * @param {string[]} candidates\n * @returns {string}\n */\n\nfunction suggestSimilar(word, candidates) {\n  if (!candidates || candidates.length === 0) return '';\n  // remove possible duplicates\n  candidates = Array.from(new Set(candidates));\n\n  const searchingOptions = word.startsWith('--');\n  if (searchingOptions) {\n    word = word.slice(2);\n    candidates = candidates.map((candidate) => candidate.slice(2));\n  }\n\n  let similar = [];\n  let bestDistance = maxDistance;\n  const minSimilarity = 0.4;\n  candidates.forEach((candidate) => {\n    if (candidate.length <= 1) return; // no one character guesses\n\n    const distance = editDistance(word, candidate);\n    const length = Math.max(word.length, candidate.length);\n    const similarity = (length - distance) / length;\n    if (similarity > minSimilarity) {\n      if (distance < bestDistance) {\n        // better edit distance, throw away previous worse matches\n        bestDistance = distance;\n        similar = [candidate];\n      } else if (distance === bestDistance) {\n        similar.push(candidate);\n      }\n    }\n  });\n\n  similar.sort((a, b) => a.localeCompare(b));\n  if (searchingOptions) {\n    similar = similar.map((candidate) => `--${candidate}`);\n  }\n\n  if (similar.length > 1) {\n    return `\\n(Did you mean one of ${similar.join(', ')}?)`;\n  }\n  if (similar.length === 1) {\n    return `\\n(Did you mean ${similar[0]}?)`;\n  }\n  return '';\n}\n\nexports.suggestSimilar = suggestSimilar;\n","const EventEmitter = require('node:events').EventEmitter;\nconst childProcess = require('node:child_process');\nconst path = require('node:path');\nconst fs = require('node:fs');\nconst process = require('node:process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this.registeredArguments = [];\n    this._args = this.registeredArguments; // deprecated old name\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {(boolean | string)} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () =>\n        process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () =>\n        process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str),\n    };\n\n    this._hidden = false;\n    /** @type {(Option | null | undefined)} */\n    this._helpOption = undefined; // Lazy created on demand. May be null if help option is disabled.\n    this._addImplicitHelpCommand = undefined; // undecided whether true or false yet, not inherited\n    /** @type {Command} */\n    this._helpCommand = undefined; // lazy initialised, inherited\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._helpOption = sourceCommand._helpOption;\n    this._helpCommand = sourceCommand._helpCommand;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue =\n      sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * @returns {Command[]}\n   * @private\n   */\n\n  _getCommandAndAncestors() {\n    const result = [];\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    for (let command = this; command; command = command.parent) {\n      result.push(command);\n    }\n    return result;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {(object | string)} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {object} [configuration] - configuration options\n   * @return {(Command | object)} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {(boolean|string)} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this._registerCommand(cmd);\n    cmd.parent = this;\n    cmd._checkForBrokenPassThrough();\n\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {(Function|*)} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names\n      .trim()\n      .split(/ +/)\n      .forEach((detail) => {\n        this.argument(detail);\n      });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this.registeredArguments.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(\n        `only the last argument can be variadic '${previousArgument.name()}'`,\n      );\n    }\n    if (\n      argument.required &&\n      argument.defaultValue !== undefined &&\n      argument.parseArg === undefined\n    ) {\n      throw new Error(\n        `a default value for a required argument is never used: '${argument.name()}'`,\n      );\n    }\n    this.registeredArguments.push(argument);\n    return this;\n  }\n\n  /**\n   * Customise or override default help command. By default a help command is automatically added if your command has subcommands.\n   *\n   * @example\n   *    program.helpCommand('help [cmd]');\n   *    program.helpCommand('help [cmd]', 'show help');\n   *    program.helpCommand(false); // suppress default help command\n   *    program.helpCommand(true); // add help command even if no subcommands\n   *\n   * @param {string|boolean} enableOrNameAndArgs - enable with custom name and/or arguments, or boolean to override whether added\n   * @param {string} [description] - custom description\n   * @return {Command} `this` command for chaining\n   */\n\n  helpCommand(enableOrNameAndArgs, description) {\n    if (typeof enableOrNameAndArgs === 'boolean') {\n      this._addImplicitHelpCommand = enableOrNameAndArgs;\n      return this;\n    }\n\n    enableOrNameAndArgs = enableOrNameAndArgs ?? 'help [command]';\n    const [, helpName, helpArgs] = enableOrNameAndArgs.match(/([^ ]+) *(.*)/);\n    const helpDescription = description ?? 'display help for command';\n\n    const helpCommand = this.createCommand(helpName);\n    helpCommand.helpOption(false);\n    if (helpArgs) helpCommand.arguments(helpArgs);\n    if (helpDescription) helpCommand.description(helpDescription);\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n\n    return this;\n  }\n\n  /**\n   * Add prepared custom help command.\n   *\n   * @param {(Command|string|boolean)} helpCommand - custom help command, or deprecated enableOrNameAndArgs as for `.helpCommand()`\n   * @param {string} [deprecatedDescription] - deprecated custom description used with custom name only\n   * @return {Command} `this` command for chaining\n   */\n  addHelpCommand(helpCommand, deprecatedDescription) {\n    // If not passed an object, call through to helpCommand for backwards compatibility,\n    // as addHelpCommand was originally used like helpCommand is now.\n    if (typeof helpCommand !== 'object') {\n      this.helpCommand(helpCommand, deprecatedDescription);\n      return this;\n    }\n\n    this._addImplicitHelpCommand = true;\n    this._helpCommand = helpCommand;\n    return this;\n  }\n\n  /**\n   * Lazy create help command.\n   *\n   * @return {(Command|null)}\n   * @package\n   */\n  _getHelpCommand() {\n    const hasImplicitHelpCommand =\n      this._addImplicitHelpCommand ??\n      (this.commands.length &&\n        !this._actionHandler &&\n        !this._findCommand('help'));\n\n    if (hasImplicitHelpCommand) {\n      if (this._helpCommand === undefined) {\n        this.helpCommand(undefined, undefined); // use default name and description\n      }\n      return this._helpCommand;\n    }\n    return null;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this.registeredArguments.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Wrap parseArgs to catch 'commander.invalidArgument'.\n   *\n   * @param {(Option | Argument)} target\n   * @param {string} value\n   * @param {*} previous\n   * @param {string} invalidArgumentMessage\n   * @private\n   */\n\n  _callParseArg(target, value, previous, invalidArgumentMessage) {\n    try {\n      return target.parseArg(value, previous);\n    } catch (err) {\n      if (err.code === 'commander.invalidArgument') {\n        const message = `${invalidArgumentMessage} ${err.message}`;\n        this.error(message, { exitCode: err.exitCode, code: err.code });\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Check for option flag conflicts.\n   * Register option if no conflicts found, or throw on conflict.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  _registerOption(option) {\n    const matchingOption =\n      (option.short && this._findOption(option.short)) ||\n      (option.long && this._findOption(option.long));\n    if (matchingOption) {\n      const matchingFlag =\n        option.long && this._findOption(option.long)\n          ? option.long\n          : option.short;\n      throw new Error(`Cannot add option '${option.flags}'${this._name && ` to command '${this._name}'`} due to conflicting flag '${matchingFlag}'\n-  already used by option '${matchingOption.flags}'`);\n    }\n\n    this.options.push(option);\n  }\n\n  /**\n   * Check for command name and alias conflicts with existing commands.\n   * Register command if no conflicts found, or throw on conflict.\n   *\n   * @param {Command} command\n   * @private\n   */\n\n  _registerCommand(command) {\n    const knownBy = (cmd) => {\n      return [cmd.name()].concat(cmd.aliases());\n    };\n\n    const alreadyUsed = knownBy(command).find((name) =>\n      this._findCommand(name),\n    );\n    if (alreadyUsed) {\n      const existingCmd = knownBy(this._findCommand(alreadyUsed)).join('|');\n      const newCmd = knownBy(command).join('|');\n      throw new Error(\n        `cannot add command '${newCmd}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    this.commands.push(command);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    this._registerOption(option);\n\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(\n          name,\n          option.defaultValue === undefined ? true : option.defaultValue,\n          'default',\n        );\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        val = this._callParseArg(option, val, oldValue, invalidValueMessage);\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @return {Command} `this` command for chaining\n   * @private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error(\n        'To add an Option object use addOption() instead of option() or requiredOption()',\n      );\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description`, and optional argument parsing function or `defaultValue` or both.\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space. A required\n   * option-argument is indicated by `<>` and an optional option-argument by `[]`.\n   *\n   * See the README for more details, and see also addOption() and requiredOption().\n   *\n   * @example\n   * program\n   *     .option('-p, --pepper', 'add pepper')\n   *     .option('-p, --pizza-type <TYPE>', 'type of pizza') // required option-argument\n   *     .option('-c, --cheese [CHEESE]', 'add extra cheese', 'mozzarella') // optional option-argument with default\n   *     .option('-t, --tip <VALUE>', 'add tip to purchase cost', parseFloat) // custom parse function\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, parseArg, defaultValue) {\n    return this._optionEx({}, flags, description, parseArg, defaultValue);\n  }\n\n  /**\n   * Add a required option which must have a value after parsing. This usually means\n   * the option must be specified on the command line. (Otherwise the same as .option().)\n   *\n   * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {(Function|*)} [parseArg] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  requiredOption(flags, description, parseArg, defaultValue) {\n    return this._optionEx(\n      { mandatory: true },\n      flags,\n      description,\n      parseArg,\n      defaultValue,\n    );\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {boolean} [combine] - if `true` or omitted, an optional value can be specified directly after the flag.\n   * @return {Command} `this` command for chaining\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {boolean} [allowUnknown] - if `true` or omitted, no error will be thrown for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {boolean} [allowExcess] - if `true` or omitted, no error will be thrown for excess arguments.\n   * @return {Command} `this` command for chaining\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {boolean} [positional]\n   * @return {Command} `this` command for chaining\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {boolean} [passThrough] for unknown options.\n   * @return {Command} `this` command for chaining\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    this._checkForBrokenPassThrough();\n    return this;\n  }\n\n  /**\n   * @private\n   */\n\n  _checkForBrokenPassThrough() {\n    if (\n      this.parent &&\n      this._passThroughOptions &&\n      !this.parent._enablePositionalOptions\n    ) {\n      throw new Error(\n        `passThroughOptions cannot be used for '${this._name}' without turning on enablePositionalOptions for parent command(s)`,\n      );\n    }\n  }\n\n  /**\n   * Whether to store option values as properties on command object,\n   * or store separately (specify false). In both cases the option values can be accessed using .opts().\n   *\n   * @param {boolean} [storeAsProperties=true]\n   * @return {Command} `this` command for chaining\n   */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    if (Object.keys(this._optionValues).length) {\n      throw new Error(\n        'call .storeOptionsAsProperties() before setting option values',\n      );\n    }\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n   * Store option value and where the value came from.\n   *\n   * @param {string} key\n   * @param {object} value\n   * @param {string} source - expected values are default/config/env/cli/implied\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n   * Get source of option value.\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n   * Get source of option value. See also .optsWithGlobals().\n   * Expected values are default | config | env | cli | implied\n   *\n   * @param {string} key\n   * @return {string}\n   */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    this._getCommandAndAncestors().forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // auto-detect argument conventions if nothing supplied\n    if (argv === undefined && parseOptions.from === undefined) {\n      if (process.versions?.electron) {\n        parseOptions.from = 'electron';\n      }\n      // check node specific options for scenarios where user CLI args follow executable without scriptname\n      const execArgv = process.execArgv ?? [];\n      if (\n        execArgv.includes('-e') ||\n        execArgv.includes('--eval') ||\n        execArgv.includes('-p') ||\n        execArgv.includes('--print')\n      ) {\n        parseOptions.from = 'eval'; // internal usage, not documented\n      }\n    }\n\n    // default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n    }\n    this.rawArgs = argv.slice();\n\n    // extract the user args and scriptPath\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: because defaultApp is an unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      case 'eval':\n        userArgs = argv.slice(1);\n        break;\n      default:\n        throw new Error(\n          `unexpected parse option { from: '${parseOptions.from}' }`,\n        );\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath)\n      this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * program.parse(); // parse process.argv and auto-detect electron and special node flags\n   * program.parse(process.argv); // assume argv[0] is app and argv[1] is script\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Call with no parameters to parse `process.argv`. Detects Electron and special node options like `node --eval`. Easy mode!\n   *\n   * Or call with an array of strings to parse, and optionally where the user arguments start by specifying where the arguments are `from`:\n   * - `'node'`: default, `argv[0]` is the application and `argv[1]` is the script being run, with user arguments after that\n   * - `'electron'`: `argv[0]` is the application and `argv[1]` varies depending on whether the electron application is packaged\n   * - `'user'`: just user arguments\n   *\n   * @example\n   * await program.parseAsync(); // parse process.argv and auto-detect electron and special node flags\n   * await program.parseAsync(process.argv); // assume argv[0] is app and argv[1] is script\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find((ext) =>\n        fs.existsSync(`${localBin}${ext}`),\n      );\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile =\n      subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(\n        path.dirname(resolvedScriptPath),\n        executableDir,\n      );\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(\n          this._scriptPath,\n          path.extname(this._scriptPath),\n        );\n        if (legacyName !== this._name) {\n          localFile = findFile(\n            executableDir,\n            `${legacyName}-${subcommand._name}`,\n          );\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) {\n      // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            // @ts-ignore because signals not typed to known strings\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    const exitCallback = this._exitCallback;\n    proc.on('close', (code) => {\n      code = code ?? 1; // code is null if spawned process terminated due to a signal\n      if (!exitCallback) {\n        process.exit(code);\n      } else {\n        exitCallback(\n          new CommanderError(\n            code,\n            'commander.executeSubCommandAsync',\n            '(close)',\n          ),\n        );\n      }\n    });\n    proc.on('error', (err) => {\n      // @ts-ignore: because err.code is an unknown property\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n        // @ts-ignore: because err.code is an unknown property\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(\n          1,\n          'commander.executeSubCommandAsync',\n          '(error)',\n        );\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let promiseChain;\n    promiseChain = this._chainOrCallSubCommandHook(\n      promiseChain,\n      subCommand,\n      'preSubcommand',\n    );\n    promiseChain = this._chainOrCall(promiseChain, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return promiseChain;\n  }\n\n  /**\n   * Invoke help directly if possible, or dispatch if necessary.\n   * e.g. help foo\n   *\n   * @private\n   */\n\n  _dispatchHelpCommand(subcommandName) {\n    if (!subcommandName) {\n      this.help();\n    }\n    const subCommand = this._findCommand(subcommandName);\n    if (subCommand && !subCommand._executableHandler) {\n      subCommand.help();\n    }\n\n    // Fallback to parsing the help flag to invoke the help.\n    return this._dispatchSubcommand(\n      subcommandName,\n      [],\n      [this._getHelpOption()?.long ?? this._getHelpOption()?.short ?? '--help'],\n    );\n  }\n\n  /**\n   * Check this.args against expected this.registeredArguments.\n   *\n   * @private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this.registeredArguments.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (\n      this.registeredArguments.length > 0 &&\n      this.registeredArguments[this.registeredArguments.length - 1].variadic\n    ) {\n      return;\n    }\n    if (this.args.length > this.registeredArguments.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this.registeredArguments and save as this.processedArgs!\n   *\n   * @private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        const invalidValueMessage = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'.`;\n        parsedValue = this._callParseArg(\n          argument,\n          value,\n          previous,\n          invalidValueMessage,\n        );\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this.registeredArguments.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Function} fn\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    this._getCommandAndAncestors()\n      .reverse()\n      .filter((cmd) => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach((hookedCommand) => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {(Promise|undefined)} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {(Promise|undefined)}\n   * @private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (\n      this._getHelpCommand() &&\n      operands[0] === this._getHelpCommand().name()\n    ) {\n      return this._dispatchHelpCommand(operands[1]);\n    }\n    if (this._defaultCommandName) {\n      this._outputHelpIfRequested(unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(\n        this._defaultCommandName,\n        operands,\n        unknown,\n      );\n    }\n    if (\n      this.commands.length &&\n      this.args.length === 0 &&\n      !this._actionHandler &&\n      !this._defaultCommandName\n    ) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    this._outputHelpIfRequested(parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let promiseChain;\n      promiseChain = this._chainOrCallHooks(promiseChain, 'preAction');\n      promiseChain = this._chainOrCall(promiseChain, () =>\n        this._actionHandler(this.processedArgs),\n      );\n      if (this.parent) {\n        promiseChain = this._chainOrCall(promiseChain, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      promiseChain = this._chainOrCallHooks(promiseChain, 'postAction');\n      return promiseChain;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) {\n        // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @private\n   * @return {Command | undefined}\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(\n      (cmd) => cmd._name === name || cmd._aliases.includes(name),\n    );\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @package\n   */\n\n  _findOption(arg) {\n    return this.options.find((option) => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd.options.forEach((anOption) => {\n        if (\n          anOption.mandatory &&\n          cmd.getOptionValue(anOption.attributeName()) === undefined\n        ) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter((option) => {\n      const optionKey = option.attributeName();\n      if (this.getOptionValue(optionKey) === undefined) {\n        return false;\n      }\n      return this.getOptionValueSource(optionKey) !== 'default';\n    });\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0,\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName()),\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    this._getCommandAndAncestors().forEach((cmd) => {\n      cmd._checkForConflictingLocalOptions();\n    });\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {string[]} argv\n   * @return {{operands: string[], unknown: string[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else {\n            // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (\n            option.required ||\n            (option.optional && this._combineFlagAndOptionalValue)\n          ) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if (\n        (this._enablePositionalOptions || this._passThroughOptions) &&\n        operands.length === 0 &&\n        unknown.length === 0\n      ) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (\n          this._getHelpCommand() &&\n          arg === this._getHelpCommand().name()\n        ) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] =\n          key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return this._getCommandAndAncestors().reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {},\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(\n      `${message}\\n`,\n      this._outputConfiguration.writeErr,\n    );\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (\n          this.getOptionValue(optionKey) === undefined ||\n          ['default', 'config', 'env'].includes(\n            this.getOptionValueSource(optionKey),\n          )\n        ) {\n          if (option.required || option.optional) {\n            // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else {\n            // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return (\n        this.getOptionValue(optionKey) !== undefined &&\n        !['default', 'implied'].includes(this.getOptionValueSource(optionKey))\n      );\n    };\n    this.options\n      .filter(\n        (option) =>\n          option.implied !== undefined &&\n          hasCustomOptionValue(option.attributeName()) &&\n          dualHelper.valueFromOption(\n            this.getOptionValue(option.attributeName()),\n            option,\n          ),\n      )\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter((impliedKey) => !hasCustomOptionValue(impliedKey))\n          .forEach((impliedKey) => {\n            this.setOptionValueWithSource(\n              impliedKey,\n              option.implied[impliedKey],\n              'implied',\n            );\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(\n        (target) => target.negate && optionKey === target.attributeName(),\n      );\n      const positiveOption = this.options.find(\n        (target) => !target.negate && optionKey === target.attributeName(),\n      );\n      if (\n        negativeOption &&\n        ((negativeOption.presetArg === undefined && optionValue === false) ||\n          (negativeOption.presetArg !== undefined &&\n            optionValue === negativeOption.presetArg))\n      ) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      let command = this;\n      do {\n        const moreFlags = command\n          .createHelp()\n          .visibleOptions(command)\n          .filter((option) => option.long)\n          .map((option) => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this.registeredArguments.length;\n    const s = expected === 1 ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp()\n        .visibleCommands(this)\n        .forEach((command) => {\n          candidateNames.push(command.name());\n          // just visible alias\n          if (command.alias()) candidateNames.push(command.alias());\n        });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Get or set the program version.\n   *\n   * This method auto-registers the \"-V, --version\" option which will print the version number.\n   *\n   * You can optionally supply the flags and description to override the defaults.\n   *\n   * @param {string} [str]\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {(this | string | undefined)} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this._registerOption(versionOption);\n\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {object} [argsDescription]\n   * @return {(string|Command)}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined)\n      return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {(string|Command)}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let command = this;\n    if (\n      this.commands.length !== 0 &&\n      this.commands[this.commands.length - 1]._executableHandler\n    ) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name)\n      throw new Error(\"Command alias can't be the same as its name\");\n    const matchingCommand = this.parent?._findCommand(alias);\n    if (matchingCommand) {\n      // c.f. _registerCommand\n      const existingCmd = [matchingCommand.name()]\n        .concat(matchingCommand.aliases())\n        .join('|');\n      throw new Error(\n        `cannot add alias '${alias}' to command '${this.name()}' as already have command '${existingCmd}'`,\n      );\n    }\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {(string[]|Command)}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this.registeredArguments.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return []\n        .concat(\n          this.options.length || this._helpOption !== null ? '[options]' : [],\n          this.commands.length ? '[command]' : [],\n          this.registeredArguments.length ? args : [],\n        )\n        .join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {(string|Command)}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {(string|null|Command)}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth =\n        contextOptions && contextOptions.error\n          ? this._outputConfiguration.getErrHelpWidth()\n          : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    this._getCommandAndAncestors()\n      .reverse()\n      .forEach((command) => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (\n        typeof helpInformation !== 'string' &&\n        !Buffer.isBuffer(helpInformation)\n      ) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    if (this._getHelpOption()?.long) {\n      this.emit(this._getHelpOption().long); // deprecated\n    }\n    this.emit('afterHelp', context);\n    this._getCommandAndAncestors().forEach((command) =>\n      command.emit('afterAllHelp', context),\n    );\n  }\n\n  /**\n   * You can pass in flags and a description to customise the built-in help option.\n   * Pass in false to disable the built-in help option.\n   *\n   * @example\n   * program.helpOption('-?, --help' 'show help'); // customise\n   * program.helpOption(false); // disable\n   *\n   * @param {(string | boolean)} flags\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    // Support disabling built-in help option.\n    if (typeof flags === 'boolean') {\n      if (flags) {\n        this._helpOption = this._helpOption ?? undefined; // preserve existing option\n      } else {\n        this._helpOption = null; // disable\n      }\n      return this;\n    }\n\n    // Customise flags and description.\n    flags = flags ?? '-h, --help';\n    description = description ?? 'display help for command';\n    this._helpOption = this.createOption(flags, description);\n\n    return this;\n  }\n\n  /**\n   * Lazy create help option.\n   * Returns null if has been disabled with .helpOption(false).\n   *\n   * @returns {(Option | null)} the help option\n   * @package\n   */\n  _getHelpOption() {\n    // Lazy create help option on demand.\n    if (this._helpOption === undefined) {\n      this.helpOption(undefined, undefined);\n    }\n    return this._helpOption;\n  }\n\n  /**\n   * Supply your own option to use for the built-in help option.\n   * This is an alternative to using helpOption() to customise the flags and description etc.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addHelpOption(option) {\n    this._helpOption = option;\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (\n      exitCode === 0 &&\n      contextOptions &&\n      typeof contextOptions !== 'function' &&\n      contextOptions.error\n    ) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {(string | Function)} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Output help information if help flags specified\n   *\n   * @param {Array} args - array of options to search for help flags\n   * @private\n   */\n\n  _outputHelpIfRequested(args) {\n    const helpOption = this._getHelpOption();\n    const helpRequested = helpOption && args.find((arg) => helpOption.is(arg));\n    if (helpRequested) {\n      this.outputHelp();\n      // (Do not have all displayed text available so only passing placeholder.)\n      this._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n    }\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null\n    ) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if (\n      (match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null\n    ) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\nexports.Command = Command;\n","const { Argument } = require('./lib/argument.js');\nconst { Command } = require('./lib/command.js');\nconst { CommanderError, InvalidArgumentError } = require('./lib/error.js');\nconst { Help } = require('./lib/help.js');\nconst { Option } = require('./lib/option.js');\n\nexports.program = new Command();\n\nexports.createCommand = (name) => new Command(name);\nexports.createOption = (flags, description) => new Option(flags, description);\nexports.createArgument = (name, description) => new Argument(name, description);\n\n/**\n * Expose classes\n */\n\nexports.Command = Command;\nexports.Option = Option;\nexports.Argument = Argument;\nexports.Help = Help;\n\nexports.CommanderError = CommanderError;\nexports.InvalidArgumentError = InvalidArgumentError;\nexports.InvalidOptionArgumentError = InvalidArgumentError; // Deprecated\n","import commander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help,\n} = commander;\n","'use strict';\nconst path = require('path');\nconst Module = require('module');\nconst fs = require('fs');\n\nconst resolveFrom = (fromDir, moduleId, silent) => {\n\tif (typeof fromDir !== 'string') {\n\t\tthrow new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDir}\\``);\n\t}\n\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n\t}\n\n\ttry {\n\t\tfromDir = fs.realpathSync(fromDir);\n\t} catch (err) {\n\t\tif (err.code === 'ENOENT') {\n\t\t\tfromDir = path.resolve(fromDir);\n\t\t} else if (silent) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tconst fromFile = path.join(fromDir, 'noop.js');\n\n\tconst resolveFileName = () => Module._resolveFilename(moduleId, {\n\t\tid: fromFile,\n\t\tfilename: fromFile,\n\t\tpaths: Module._nodeModulePaths(fromDir)\n\t});\n\n\tif (silent) {\n\t\ttry {\n\t\t\treturn resolveFileName();\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn resolveFileName();\n};\n\nmodule.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId);\nmodule.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true);\n","'use strict';\n\nconst callsites = () => {\n\tconst _prepareStackTrace = Error.prepareStackTrace;\n\tError.prepareStackTrace = (_, stack) => stack;\n\tconst stack = new Error().stack.slice(1);\n\tError.prepareStackTrace = _prepareStackTrace;\n\treturn stack;\n};\n\nmodule.exports = callsites;\n// TODO: Remove this for the next major release\nmodule.exports.default = callsites;\n","'use strict';\nconst callsites = require('callsites');\n\nmodule.exports = filepath => {\n\tconst stacks = callsites();\n\n\tif (!filepath) {\n\t\treturn stacks[2].getFileName();\n\t}\n\n\tlet seenVal = false;\n\n\t// Skip the first stack as it's this function\n\tstacks.shift();\n\n\tfor (const stack of stacks) {\n\t\tconst parentFilepath = stack.getFileName();\n\n\t\tif (typeof parentFilepath !== 'string') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parentFilepath === filepath) {\n\t\t\tseenVal = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Skip native modules\n\t\tif (parentFilepath === 'module.js') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (seenVal && parentFilepath !== filepath) {\n\t\t\treturn parentFilepath;\n\t\t}\n\t}\n};\n","'use strict';\nconst path = require('path');\nconst resolveFrom = require('resolve-from');\nconst parentModule = require('parent-module');\n\nmodule.exports = moduleId => {\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tconst parentPath = parentModule(__filename);\n\n\tconst cwd = parentPath ? path.dirname(parentPath) : __dirname;\n\tconst filePath = resolveFrom(cwd, moduleId);\n\n\tconst oldModule = require.cache[filePath];\n\t// Delete itself from module parent\n\tif (oldModule && oldModule.parent) {\n\t\tlet i = oldModule.parent.children.length;\n\n\t\twhile (i--) {\n\t\t\tif (oldModule.parent.children[i].id === filePath) {\n\t\t\t\toldModule.parent.children.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete require.cache[filePath]; // Delete module from cache\n\n\tconst parent = require.cache[parentPath]; // If `filePath` and `parentPath` are the same, cache will already be deleted so we won't get a memory leak in next step\n\n\treturn parent === undefined ? require(filePath) : parent.require(filePath); // In case cache doesn't have parent, fall back to normal require\n};\n","'use strict';\n\nmodule.exports = function isArrayish(obj) {\n\tif (!obj) {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && obj.splice instanceof Function);\n};\n","'use strict';\n\nvar util = require('util');\nvar isArrayish = require('is-arrayish');\n\nvar errorEx = function errorEx(name, properties) {\n\tif (!name || name.constructor !== String) {\n\t\tproperties = name || {};\n\t\tname = Error.name;\n\t}\n\n\tvar errorExError = function ErrorEXError(message) {\n\t\tif (!this) {\n\t\t\treturn new ErrorEXError(message);\n\t\t}\n\n\t\tmessage = message instanceof Error\n\t\t\t? message.message\n\t\t\t: (message || this.message);\n\n\t\tError.call(this, message);\n\t\tError.captureStackTrace(this, errorExError);\n\n\t\tthis.name = name;\n\n\t\tObject.defineProperty(this, 'message', {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tget: function () {\n\t\t\t\tvar newMessage = message.split(/\\r?\\n/g);\n\n\t\t\t\tfor (var key in properties) {\n\t\t\t\t\tif (!properties.hasOwnProperty(key)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar modifier = properties[key];\n\n\t\t\t\t\tif ('message' in modifier) {\n\t\t\t\t\t\tnewMessage = modifier.message(this[key], newMessage) || newMessage;\n\t\t\t\t\t\tif (!isArrayish(newMessage)) {\n\t\t\t\t\t\t\tnewMessage = [newMessage];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn newMessage.join('\\n');\n\t\t\t},\n\t\t\tset: function (v) {\n\t\t\t\tmessage = v;\n\t\t\t}\n\t\t});\n\n\t\tvar overwrittenStack = null;\n\n\t\tvar stackDescriptor = Object.getOwnPropertyDescriptor(this, 'stack');\n\t\tvar stackGetter = stackDescriptor.get;\n\t\tvar stackValue = stackDescriptor.value;\n\t\tdelete stackDescriptor.value;\n\t\tdelete stackDescriptor.writable;\n\n\t\tstackDescriptor.set = function (newstack) {\n\t\t\toverwrittenStack = newstack;\n\t\t};\n\n\t\tstackDescriptor.get = function () {\n\t\t\tvar stack = (overwrittenStack || ((stackGetter)\n\t\t\t\t? stackGetter.call(this)\n\t\t\t\t: stackValue)).split(/\\r?\\n+/g);\n\n\t\t\t// starting in Node 7, the stack builder caches the message.\n\t\t\t// just replace it.\n\t\t\tif (!overwrittenStack) {\n\t\t\t\tstack[0] = this.name + ': ' + this.message;\n\t\t\t}\n\n\t\t\tvar lineCount = 1;\n\t\t\tfor (var key in properties) {\n\t\t\t\tif (!properties.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar modifier = properties[key];\n\n\t\t\t\tif ('line' in modifier) {\n\t\t\t\t\tvar line = modifier.line(this[key]);\n\t\t\t\t\tif (line) {\n\t\t\t\t\t\tstack.splice(lineCount++, 0, '    ' + line);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ('stack' in modifier) {\n\t\t\t\t\tmodifier.stack(this[key], stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn stack.join('\\n');\n\t\t};\n\n\t\tObject.defineProperty(this, 'stack', stackDescriptor);\n\t};\n\n\tif (Object.setPrototypeOf) {\n\t\tObject.setPrototypeOf(errorExError.prototype, Error.prototype);\n\t\tObject.setPrototypeOf(errorExError, Error);\n\t} else {\n\t\tutil.inherits(errorExError, Error);\n\t}\n\n\treturn errorExError;\n};\n\nerrorEx.append = function (str, def) {\n\treturn {\n\t\tmessage: function (v, message) {\n\t\t\tv = v || def;\n\n\t\t\tif (v) {\n\t\t\t\tmessage[0] += ' ' + str.replace('%s', v.toString());\n\t\t\t}\n\n\t\t\treturn message;\n\t\t}\n\t};\n};\n\nerrorEx.line = function (str, def) {\n\treturn {\n\t\tline: function (v) {\n\t\t\tv = v || def;\n\n\t\t\tif (v) {\n\t\t\t\treturn str.replace('%s', v.toString());\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t};\n};\n\nmodule.exports = errorEx;\n","'use strict'\n\nconst hexify = char => {\n  const h = char.charCodeAt(0).toString(16).toUpperCase()\n  return '0x' + (h.length % 2 ? '0' : '') + h\n}\n\nconst parseError = (e, txt, context) => {\n  if (!txt) {\n    return {\n      message: e.message + ' while parsing empty string',\n      position: 0,\n    }\n  }\n  const badToken = e.message.match(/^Unexpected token (.) .*position\\s+(\\d+)/i)\n  const errIdx = badToken ? +badToken[2]\n    : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1\n    : null\n\n  const msg = badToken ? e.message.replace(/^Unexpected token ./, `Unexpected token ${\n      JSON.stringify(badToken[1])\n    } (${hexify(badToken[1])})`)\n    : e.message\n\n  if (errIdx !== null && errIdx !== undefined) {\n    const start = errIdx <= context ? 0\n      : errIdx - context\n\n    const end = errIdx + context >= txt.length ? txt.length\n      : errIdx + context\n\n    const slice = (start === 0 ? '' : '...') +\n      txt.slice(start, end) +\n      (end === txt.length ? '' : '...')\n\n    const near = txt === slice ? '' : 'near '\n\n    return {\n      message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,\n      position: errIdx,\n    }\n  } else {\n    return {\n      message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,\n      position: 0,\n    }\n  }\n}\n\nclass JSONParseError extends SyntaxError {\n  constructor (er, txt, context, caller) {\n    context = context || 20\n    const metadata = parseError(er, txt, context)\n    super(metadata.message)\n    Object.assign(this, metadata)\n    this.code = 'EJSONPARSE'\n    this.systemError = er\n    Error.captureStackTrace(this, caller || this.constructor)\n  }\n  get name () { return this.constructor.name }\n  set name (n) {}\n  get [Symbol.toStringTag] () { return this.constructor.name }\n}\n\nconst kIndent = Symbol.for('indent')\nconst kNewline = Symbol.for('newline')\n// only respect indentation if we got a line break, otherwise squash it\n// things other than objects and arrays aren't indented, so ignore those\n// Important: in both of these regexps, the $1 capture group is the newline\n// or undefined, and the $2 capture group is the indent, or undefined.\nconst formatRE = /^\\s*[{\\[]((?:\\r?\\n)+)([\\s\\t]*)/\nconst emptyRE = /^(?:\\{\\}|\\[\\])((?:\\r?\\n)+)?$/\n\nconst parseJson = (txt, reviver, context) => {\n  const parseText = stripBOM(txt)\n  context = context || 20\n  try {\n    // get the indentation so that we can save it back nicely\n    // if the file starts with {\" then we have an indent of '', ie, none\n    // otherwise, pick the indentation of the next line after the first \\n\n    // If the pattern doesn't match, then it means no indentation.\n    // JSON.stringify ignores symbols, so this is reasonably safe.\n    // if the string is '{}' or '[]', then use the default 2-space indent.\n    const [, newline = '\\n', indent = '  '] = parseText.match(emptyRE) ||\n      parseText.match(formatRE) ||\n      [, '', '']\n\n    const result = JSON.parse(parseText, reviver)\n    if (result && typeof result === 'object') {\n      result[kNewline] = newline\n      result[kIndent] = indent\n    }\n    return result\n  } catch (e) {\n    if (typeof txt !== 'string' && !Buffer.isBuffer(txt)) {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0\n      throw Object.assign(new TypeError(\n        `Cannot parse ${isEmptyArray ? 'an empty array' : String(txt)}`\n      ), {\n        code: 'EJSONPARSE',\n        systemError: e,\n      })\n    }\n\n    throw new JSONParseError(e, parseText, context, parseJson)\n  }\n}\n\n// Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n// because the buffer-to-string conversion in `fs.readFileSync()`\n// translates it to FEFF, the UTF-16 BOM.\nconst stripBOM = txt => String(txt).replace(/^\\uFEFF/, '')\n\nmodule.exports = parseJson\nparseJson.JSONParseError = JSONParseError\n\nparseJson.noExceptions = (txt, reviver) => {\n  try {\n    return JSON.parse(stripBOM(txt), reviver)\n  } catch (e) {}\n}\n","\"use strict\";\nexports.__esModule = true;\nexports.LinesAndColumns = void 0;\nvar LF = '\\n';\nvar CR = '\\r';\nvar LinesAndColumns = /** @class */ (function () {\n    function LinesAndColumns(string) {\n        this.string = string;\n        var offsets = [0];\n        for (var offset = 0; offset < string.length;) {\n            switch (string[offset]) {\n                case LF:\n                    offset += LF.length;\n                    offsets.push(offset);\n                    break;\n                case CR:\n                    offset += CR.length;\n                    if (string[offset] === LF) {\n                        offset += LF.length;\n                    }\n                    offsets.push(offset);\n                    break;\n                default:\n                    offset++;\n                    break;\n            }\n        }\n        this.offsets = offsets;\n    }\n    LinesAndColumns.prototype.locationForIndex = function (index) {\n        if (index < 0 || index > this.string.length) {\n            return null;\n        }\n        var line = 0;\n        var offsets = this.offsets;\n        while (offsets[line + 1] <= index) {\n            line++;\n        }\n        var column = index - offsets[line];\n        return { line: line, column: column };\n    };\n    LinesAndColumns.prototype.indexForLocation = function (location) {\n        var line = location.line, column = location.column;\n        if (line < 0 || line >= this.offsets.length) {\n            return null;\n        }\n        if (column < 0 || column > this.lengthOfLine(line)) {\n            return null;\n        }\n        return this.offsets[line] + column;\n    };\n    LinesAndColumns.prototype.lengthOfLine = function (line) {\n        var offset = this.offsets[line];\n        var nextOffset = line === this.offsets.length - 1\n            ? this.string.length\n            : this.offsets[line + 1];\n        return nextOffset - offset;\n    };\n    return LinesAndColumns;\n}());\nexports.LinesAndColumns = LinesAndColumns;\nexports[\"default\"] = LinesAndColumns;\n","var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x,blackBright:x,redBright:x,greenBright:x,yellowBright:x,blueBright:x,magentaBright:x,cyanBright:x,whiteBright:x,bgBlackBright:x,bgRedBright:x,bgGreenBright:x,bgYellowBright:x,bgBlueBright:x,bgMagentaBright:x,bgCyanBright:x,bgWhiteBright:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n","// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell\n// License: MIT. (See LICENSE.)\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n})\n\n// This regex comes from regex.coffee, and is inserted here by generate-index.js\n// (run `npm run build`).\nexports.default = /((['\"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\'\"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g\n\nexports.matchToToken = function(match) {\n  var token = {type: \"invalid\", value: match[0], closed: undefined}\n       if (match[ 1]) token.type = \"string\" , token.closed = !!(match[3] || match[4])\n  else if (match[ 5]) token.type = \"comment\"\n  else if (match[ 6]) token.type = \"comment\", token.closed = !!match[7]\n  else if (match[ 8]) token.type = \"regex\"\n  else if (match[ 9]) token.type = \"number\"\n  else if (match[10]) token.type = \"name\"\n  else if (match[11]) token.type = \"punctuator\"\n  else if (match[12]) token.type = \"whitespace\"\n  return token\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isIdentifierChar = isIdentifierChar;\nexports.isIdentifierName = isIdentifierName;\nexports.isIdentifierStart = isIdentifierStart;\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c8a\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7cd\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7dc\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0897-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\u30fb\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\\uff65\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 4, 51, 13, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 39, 27, 10, 22, 251, 41, 7, 1, 17, 2, 60, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 31, 9, 2, 0, 3, 0, 2, 37, 2, 0, 26, 0, 2, 0, 45, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 200, 32, 32, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 26, 3994, 6, 582, 6842, 29, 1763, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 433, 44, 212, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 42, 9, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 229, 29, 3, 0, 496, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 7, 9, 32, 4, 318, 1, 80, 3, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 68, 8, 2, 0, 3, 0, 2, 3, 2, 4, 2, 0, 15, 1, 83, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 7, 19, 58, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 343, 9, 54, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 10, 5350, 0, 7, 14, 11465, 27, 2343, 9, 87, 9, 39, 4, 60, 6, 26, 9, 535, 9, 470, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4178, 9, 519, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 245, 1, 2, 9, 726, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nfunction isIdentifierName(name) {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n\n//# sourceMappingURL=identifier.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isKeyword = isKeyword;\nexports.isReservedWord = isReservedWord;\nexports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;\nexports.isStrictBindReservedWord = isStrictBindReservedWord;\nexports.isStrictReservedWord = isStrictReservedWord;\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\n//# sourceMappingURL=keyword.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"isIdentifierChar\", {\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierChar;\n  }\n});\nObject.defineProperty(exports, \"isIdentifierName\", {\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierName;\n  }\n});\nObject.defineProperty(exports, \"isIdentifierStart\", {\n  enumerable: true,\n  get: function () {\n    return _identifier.isIdentifierStart;\n  }\n});\nObject.defineProperty(exports, \"isKeyword\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isKeyword;\n  }\n});\nObject.defineProperty(exports, \"isReservedWord\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isReservedWord;\n  }\n});\nObject.defineProperty(exports, \"isStrictBindOnlyReservedWord\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictBindOnlyReservedWord;\n  }\n});\nObject.defineProperty(exports, \"isStrictBindReservedWord\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictBindReservedWord;\n  }\n});\nObject.defineProperty(exports, \"isStrictReservedWord\", {\n  enumerable: true,\n  get: function () {\n    return _keyword.isStrictReservedWord;\n  }\n});\nvar _identifier = require(\"./identifier.js\");\nvar _keyword = require(\"./keyword.js\");\n\n//# sourceMappingURL=index.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar picocolors = require('picocolors');\nvar jsTokens = require('js-tokens');\nvar helperValidatorIdentifier = require('@babel/helper-validator-identifier');\n\nfunction isColorSupported() {\n  return (typeof process === \"object\" && (process.env.FORCE_COLOR === \"0\" || process.env.FORCE_COLOR === \"false\") ? false : picocolors.isColorSupported\n  );\n}\nconst compose = (f, g) => v => f(g(v));\nfunction buildDefs(colors) {\n  return {\n    keyword: colors.cyan,\n    capitalized: colors.yellow,\n    jsxIdentifier: colors.yellow,\n    punctuator: colors.yellow,\n    number: colors.magenta,\n    string: colors.green,\n    regex: colors.magenta,\n    comment: colors.gray,\n    invalid: compose(compose(colors.white, colors.bgRed), colors.bold),\n    gutter: colors.gray,\n    marker: compose(colors.red, colors.bold),\n    message: compose(colors.red, colors.bold),\n    reset: colors.reset\n  };\n}\nconst defsOn = buildDefs(picocolors.createColors(true));\nconst defsOff = buildDefs(picocolors.createColors(false));\nfunction getDefs(enabled) {\n  return enabled ? defsOn : defsOff;\n}\n\nconst sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\nconst NEWLINE$1 = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nconst BRACKET = /^[()[\\]{}]$/;\nlet tokenize;\n{\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n  const getTokenType = function (token, offset, text) {\n    if (token.type === \"name\") {\n      if (helperValidatorIdentifier.isKeyword(token.value) || helperValidatorIdentifier.isStrictReservedWord(token.value, true) || sometimesKeywords.has(token.value)) {\n        return \"keyword\";\n      }\n      if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.slice(offset - 2, offset) === \"</\")) {\n        return \"jsxIdentifier\";\n      }\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n    if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\n      return \"punctuator\";\n    }\n    return token.type;\n  };\n  tokenize = function* (text) {\n    let match;\n    while (match = jsTokens.default.exec(text)) {\n      const token = jsTokens.matchToToken(match);\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value\n      };\n    }\n  };\n}\nfunction highlight(text) {\n  if (text === \"\") return \"\";\n  const defs = getDefs(true);\n  let highlighted = \"\";\n  for (const {\n    type,\n    value\n  } of tokenize(text)) {\n    if (type in defs) {\n      highlighted += value.split(NEWLINE$1).map(str => defs[type](str)).join(\"\\n\");\n    } else {\n      highlighted += value;\n    }\n  }\n  return highlighted;\n}\n\nlet deprecationWarningShown = false;\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nfunction getMarkerLines(loc, source, opts) {\n  const startLoc = Object.assign({\n    column: 0,\n    line: -1\n  }, loc.start);\n  const endLoc = Object.assign({}, startLoc, loc.end);\n  const {\n    linesAbove = 2,\n    linesBelow = 3\n  } = opts || {};\n  const startLine = startLoc.line;\n  const startColumn = startLoc.column;\n  const endLine = endLoc.line;\n  const endColumn = endLoc.column;\n  let start = Math.max(startLine - (linesAbove + 1), 0);\n  let end = Math.min(source.length, endLine + linesBelow);\n  if (startLine === -1) {\n    start = 0;\n  }\n  if (endLine === -1) {\n    end = source.length;\n  }\n  const lineDiff = endLine - startLine;\n  const markerLines = {};\n  if (lineDiff) {\n    for (let i = 0; i <= lineDiff; i++) {\n      const lineNumber = i + startLine;\n      if (!startColumn) {\n        markerLines[lineNumber] = true;\n      } else if (i === 0) {\n        const sourceLength = source[lineNumber - 1].length;\n        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\n      } else if (i === lineDiff) {\n        markerLines[lineNumber] = [0, endColumn];\n      } else {\n        const sourceLength = source[lineNumber - i].length;\n        markerLines[lineNumber] = [0, sourceLength];\n      }\n    }\n  } else {\n    if (startColumn === endColumn) {\n      if (startColumn) {\n        markerLines[startLine] = [startColumn, 0];\n      } else {\n        markerLines[startLine] = true;\n      }\n    } else {\n      markerLines[startLine] = [startColumn, endColumn - startColumn];\n    }\n  }\n  return {\n    start,\n    end,\n    markerLines\n  };\n}\nfunction codeFrameColumns(rawLines, loc, opts = {}) {\n  const shouldHighlight = opts.forceColor || isColorSupported() && opts.highlightCode;\n  const defs = getDefs(shouldHighlight);\n  const lines = rawLines.split(NEWLINE);\n  const {\n    start,\n    end,\n    markerLines\n  } = getMarkerLines(loc, lines, opts);\n  const hasColumns = loc.start && typeof loc.start.column === \"number\";\n  const numberMaxWidth = String(end).length;\n  const highlightedLines = shouldHighlight ? highlight(rawLines) : rawLines;\n  let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {\n    const number = start + 1 + index;\n    const paddedNumber = ` ${number}`.slice(-numberMaxWidth);\n    const gutter = ` ${paddedNumber} |`;\n    const hasMarker = markerLines[number];\n    const lastMarkerLine = !markerLines[number + 1];\n    if (hasMarker) {\n      let markerLine = \"\";\n      if (Array.isArray(hasMarker)) {\n        const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\\t]/g, \" \");\n        const numberOfMarkers = hasMarker[1] || 1;\n        markerLine = [\"\\n \", defs.gutter(gutter.replace(/\\d/g, \" \")), \" \", markerSpacing, defs.marker(\"^\").repeat(numberOfMarkers)].join(\"\");\n        if (lastMarkerLine && opts.message) {\n          markerLine += \" \" + defs.message(opts.message);\n        }\n      }\n      return [defs.marker(\">\"), defs.gutter(gutter), line.length > 0 ? ` ${line}` : \"\", markerLine].join(\"\");\n    } else {\n      return ` ${defs.gutter(gutter)}${line.length > 0 ? ` ${line}` : \"\"}`;\n    }\n  }).join(\"\\n\");\n  if (opts.message && !hasColumns) {\n    frame = `${\" \".repeat(numberMaxWidth + 1)}${opts.message}\\n${frame}`;\n  }\n  if (shouldHighlight) {\n    return defs.reset(frame);\n  } else {\n    return frame;\n  }\n}\nfunction index (rawLines, lineNumber, colNumber, opts = {}) {\n  if (!deprecationWarningShown) {\n    deprecationWarningShown = true;\n    const message = \"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.\";\n    if (process.emitWarning) {\n      process.emitWarning(message, \"DeprecationWarning\");\n    } else {\n      const deprecationError = new Error(message);\n      deprecationError.name = \"DeprecationWarning\";\n      console.warn(new Error(message));\n    }\n  }\n  colNumber = Math.max(colNumber, 0);\n  const location = {\n    start: {\n      column: colNumber,\n      line: lineNumber\n    }\n  };\n  return codeFrameColumns(rawLines, location, opts);\n}\n\nexports.codeFrameColumns = codeFrameColumns;\nexports.default = index;\nexports.highlight = highlight;\n//# sourceMappingURL=index.js.map\n","'use strict';\nconst errorEx = require('error-ex');\nconst fallback = require('json-parse-even-better-errors');\nconst {default: LinesAndColumns} = require('lines-and-columns');\nconst {codeFrameColumns} = require('@babel/code-frame');\n\nconst JSONError = errorEx('JSONError', {\n\tfileName: errorEx.append('in %s'),\n\tcodeFrame: errorEx.append('\\n\\n%s\\n')\n});\n\nconst parseJson = (string, reviver, filename) => {\n\tif (typeof reviver === 'string') {\n\t\tfilename = reviver;\n\t\treviver = null;\n\t}\n\n\ttry {\n\t\ttry {\n\t\t\treturn JSON.parse(string, reviver);\n\t\t} catch (error) {\n\t\t\tfallback(string, reviver);\n\t\t\tthrow error;\n\t\t}\n\t} catch (error) {\n\t\terror.message = error.message.replace(/\\n/g, '');\n\t\tconst indexMatch = error.message.match(/in JSON at position (\\d+) while parsing/);\n\n\t\tconst jsonError = new JSONError(error);\n\t\tif (filename) {\n\t\t\tjsonError.fileName = filename;\n\t\t}\n\n\t\tif (indexMatch && indexMatch.length > 0) {\n\t\t\tconst lines = new LinesAndColumns(string);\n\t\t\tconst index = Number(indexMatch[1]);\n\t\t\tconst location = lines.locationForIndex(index);\n\n\t\t\tconst codeFrame = codeFrameColumns(\n\t\t\t\tstring,\n\t\t\t\t{start: {line: location.line + 1, column: location.column + 1}},\n\t\t\t\t{highlightCode: true}\n\t\t\t);\n\n\t\t\tjsonError.codeFrame = codeFrame;\n\t\t}\n\n\t\tthrow jsonError;\n\t}\n};\n\nparseJson.JSONError = JSONError;\n\nmodule.exports = parseJson;\n","'use strict';\n\n\nfunction isNothing(subject) {\n  return (typeof subject === 'undefined') || (subject === null);\n}\n\n\nfunction isObject(subject) {\n  return (typeof subject === 'object') && (subject !== null);\n}\n\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;\n  else if (isNothing(sequence)) return [];\n\n  return [ sequence ];\n}\n\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\n\nfunction repeat(string, count) {\n  var result = '', cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\n\nfunction isNegativeZero(number) {\n  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);\n}\n\n\nmodule.exports.isNothing      = isNothing;\nmodule.exports.isObject       = isObject;\nmodule.exports.toArray        = toArray;\nmodule.exports.repeat         = repeat;\nmodule.exports.isNegativeZero = isNegativeZero;\nmodule.exports.extend         = extend;\n","// YAML error class. http://stackoverflow.com/questions/8458984\n//\n'use strict';\n\n\nfunction formatError(exception, compact) {\n  var where = '', message = exception.reason || '(unknown reason)';\n\n  if (!exception.mark) return message;\n\n  if (exception.mark.name) {\n    where += 'in \"' + exception.mark.name + '\" ';\n  }\n\n  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n\n  if (!compact && exception.mark.snippet) {\n    where += '\\n\\n' + exception.mark.snippet;\n  }\n\n  return message + ' ' + where;\n}\n\n\nfunction YAMLException(reason, mark) {\n  // Super constructor\n  Error.call(this);\n\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = formatError(this, false);\n\n  // Include stack trace in error object\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = (new Error()).stack || '';\n  }\n}\n\n\n// Inherit from Error\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\n\n\nYAMLException.prototype.toString = function toString(compact) {\n  return this.name + ': ' + formatError(this, compact);\n};\n\n\nmodule.exports = YAMLException;\n","'use strict';\n\n\nvar common = require('./common');\n\n\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '→') + tail,\n    pos: position - lineStart + head.length // relative position\n  };\n}\n\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n\n  if (!mark.buffer) return null;\n\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent      !== 'number') options.indent      = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [ 0 ];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while ((match = re.exec(mark.buffer))) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n  var result = '', i, line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo - i],\n      lineEnds[foundLineNo - i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\n      maxLineLength\n    );\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\n    ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo + i],\n      lineEnds[foundLineNo + i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\n      maxLineLength\n    );\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\n\nmodule.exports = makeSnippet;\n","'use strict';\n\nvar YAMLException = require('./exception');\n\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n  'kind',\n  'multi',\n  'resolve',\n  'construct',\n  'instanceOf',\n  'predicate',\n  'represent',\n  'representName',\n  'defaultStyle',\n  'styleAliases'\n];\n\nvar YAML_NODE_KINDS = [\n  'scalar',\n  'sequence',\n  'mapping'\n];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  });\n\n  // TODO: Add tag format check.\n  this.options       = options; // keep original options in case user wants to extend this type later\n  this.tag           = tag;\n  this.kind          = options['kind']          || null;\n  this.resolve       = options['resolve']       || function () { return true; };\n  this.construct     = options['construct']     || function (data) { return data; };\n  this.instanceOf    = options['instanceOf']    || null;\n  this.predicate     = options['predicate']     || null;\n  this.represent     = options['represent']     || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle  = options['defaultStyle']  || null;\n  this.multi         = options['multi']         || false;\n  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nmodule.exports = Type;\n","'use strict';\n\n/*eslint-disable max-len*/\n\nvar YAMLException = require('./exception');\nvar Type          = require('./type');\n\n\nfunction compileList(schema, name) {\n  var result = [];\n\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag &&\n          previousType.kind === currentType.kind &&\n          previousType.multi === currentType.multi) {\n\n        newIndex = previousIndex;\n      }\n    });\n\n    result[newIndex] = currentType;\n  });\n\n  return result;\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {},\n        multi: {\n          scalar: [],\n          sequence: [],\n          mapping: [],\n          fallback: []\n        }\n      }, index, length;\n\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema(definition) {\n  return this.extend(definition);\n}\n\n\nSchema.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n\n  if (definition instanceof Type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1, type2, ... ])\n    explicit = explicit.concat(definition);\n\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n\n  } else {\n    throw new YAMLException('Schema.extend argument should be a Type, [ Type ], ' +\n      'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n\n  implicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n\n    if (type.multi) {\n      throw new YAMLException('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n\n  explicit.forEach(function (type) {\n    if (!(type instanceof Type)) {\n      throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n\n  var result = Object.create(Schema.prototype);\n\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);\n\n  return result;\n};\n\n\nmodule.exports = Schema;\n","'use strict';\n\nvar Type = require('../type');\n\nmodule.exports = new Type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function (data) { return data !== null ? data : ''; }\n});\n","'use strict';\n\nvar Type = require('../type');\n\nmodule.exports = new Type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function (data) { return data !== null ? data : []; }\n});\n","'use strict';\n\nvar Type = require('../type');\n\nmodule.exports = new Type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function (data) { return data !== null ? data : {}; }\n});\n","// Standard YAML's Failsafe schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2802346\n\n\n'use strict';\n\n\nvar Schema = require('../schema');\n\n\nmodule.exports = new Schema({\n  explicit: [\n    require('../type/str'),\n    require('../type/seq'),\n    require('../type/map')\n  ]\n});\n","'use strict';\n\nvar Type = require('../type');\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n\n  var max = data.length;\n\n  return (max === 1 && data === '~') ||\n         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function () { return '~';    },\n    lowercase: function () { return 'null'; },\n    uppercase: function () { return 'NULL'; },\n    camelcase: function () { return 'Null'; },\n    empty:     function () { return '';     }\n  },\n  defaultStyle: 'lowercase'\n});\n","'use strict';\n\nvar Type = require('../type');\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n\n  var max = data.length;\n\n  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||\n         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' ||\n         data === 'True' ||\n         data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function (object) { return object ? 'true' : 'false'; },\n    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },\n    camelcase: function (object) { return object ? 'True' : 'False'; }\n  },\n  defaultStyle: 'lowercase'\n});\n","'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nfunction isHexCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n         ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n}\n\nfunction isOctCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n}\n\nfunction isDecCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n\n  if (!max) return false;\n\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'o') {\n      // base 8\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isOctCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n  }\n\n  // base 10 (except 0)\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  return true;\n}\n\nfunction constructYamlInteger(data) {\n  var value = data, sign = 1, ch;\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);\n    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return (Object.prototype.toString.call(object)) === '[object Number]' &&\n         (object % 1 === 0 && !common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },\n    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },\n    decimal:     function (obj) { return obj.toString(10); },\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary:      [ 2,  'bin' ],\n    octal:       [ 8,  'oct' ],\n    decimal:     [ 10, 'dec' ],\n    hexadecimal: [ 16, 'hex' ]\n  }\n});\n","'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nvar YAML_FLOAT_PATTERN = new RegExp(\n  // 2.5e4, 2.5 and integers\n  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n  // .2e4, .2\n  // special case, seems not from spec\n  '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n  // .inf\n  '|[-+]?\\\\.(?:inf|Inf|INF)' +\n  // .nan\n  '|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n      // Quick hack to not allow integers end with `_`\n      // Probably should update regexp & check speed\n      data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n\n  value  = data.replace(/_/g, '').toLowerCase();\n  sign   = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n  } else if (value === '.nan') {\n    return NaN;\n  }\n  return sign * parseFloat(value, 10);\n}\n\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase': return '.nan';\n      case 'uppercase': return '.NAN';\n      case 'camelcase': return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '.inf';\n      case 'uppercase': return '.INF';\n      case 'camelcase': return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '-.inf';\n      case 'uppercase': return '-.INF';\n      case 'camelcase': return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\n         (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n","// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\n\n'use strict';\n\n\nmodule.exports = require('./failsafe').extend({\n  implicit: [\n    require('../type/null'),\n    require('../type/bool'),\n    require('../type/int'),\n    require('../type/float')\n  ]\n});\n","// Standard YAML's Core schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2804923\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, Core schema has no distinctions from JSON schema is JS-YAML.\n\n\n'use strict';\n\n\nmodule.exports = require('./json');\n","'use strict';\n\nvar Type = require('../type');\n\nvar YAML_DATE_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9])'                    + // [2] month\n  '-([0-9][0-9])$');                   // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9]?)'                   + // [2] month\n  '-([0-9][0-9]?)'                   + // [3] day\n  '(?:[Tt]|[ \\\\t]+)'                 + // ...\n  '([0-9][0-9]?)'                    + // [4] hour\n  ':([0-9][0-9])'                    + // [5] minute\n  ':([0-9][0-9])'                    + // [6] second\n  '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n  '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match, year, month, day, hour, minute, second, fraction = 0,\n      delta = null, tz_hour, tz_minute, date;\n\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +(match[1]);\n  month = +(match[2]) - 1; // JS month starts with 0\n  day = +(match[3]);\n\n  if (!match[4]) { // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +(match[4]);\n  minute = +(match[5]);\n  second = +(match[6]);\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) { // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +(match[10]);\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n\n  if (delta) date.setTime(date.getTime() - delta);\n\n  return date;\n}\n\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\n","'use strict';\n\nvar Type = require('../type');\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\n","'use strict';\n\n/*eslint-disable no-bitwise*/\n\n\nvar Type = require('../type');\n\n\n// [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n\n  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n\n  // Convert one by one.\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n\n    // Skip CR/LF\n    if (code > 64) continue;\n\n    // Fail on illegal characters\n    if (code < 0) return false;\n\n    bitlen += 6;\n  }\n\n  // If there are any bits left, source was corrupted\n  return (bitlen % 8) === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx, tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\n      max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = [];\n\n  // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 4 === 0) && idx) {\n      result.push((bits >> 16) & 0xFF);\n      result.push((bits >> 8) & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = (bits << 6) | map.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  tailbits = (max % 4) * 6;\n\n  if (tailbits === 0) {\n    result.push((bits >> 16) & 0xFF);\n    result.push((bits >> 8) & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push((bits >> 10) & 0xFF);\n    result.push((bits >> 2) & 0xFF);\n  } else if (tailbits === 12) {\n    result.push((bits >> 4) & 0xFF);\n  }\n\n  return new Uint8Array(result);\n}\n\nfunction representYamlBinary(object /*, style*/) {\n  var result = '', bits = 0, idx, tail,\n      max = object.length,\n      map = BASE64_MAP;\n\n  // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 3 === 0) && idx) {\n      result += map[(bits >> 18) & 0x3F];\n      result += map[(bits >> 12) & 0x3F];\n      result += map[(bits >> 6) & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  }\n\n  // Dump tail\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[(bits >> 18) & 0x3F];\n    result += map[(bits >> 12) & 0x3F];\n    result += map[(bits >> 6) & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[(bits >> 10) & 0x3F];\n    result += map[(bits >> 4) & 0x3F];\n    result += map[(bits << 2) & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[(bits >> 2) & 0x3F];\n    result += map[(bits << 4) & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(obj) {\n  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\n","'use strict';\n\nvar Type = require('../type');\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString       = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n\n  var objectKeys = [], index, length, pair, pairKey, pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;\n        else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n    else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});\n","'use strict';\n\nvar Type = require('../type');\n\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n\n  var index, length, pair, keys, result,\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    keys = Object.keys(pair);\n\n    if (keys.length !== 1) return false;\n\n    result[index] = [ keys[0], pair[keys[0]] ];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n\n  var index, length, pair, keys, result,\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    keys = Object.keys(pair);\n\n    result[index] = [ keys[0], pair[keys[0]] ];\n  }\n\n  return result;\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});\n","'use strict';\n\nvar Type = require('../type');\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n\n  var key, object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});\n","// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\n'use strict';\n\n\nmodule.exports = require('./core').extend({\n  implicit: [\n    require('../type/timestamp'),\n    require('../type/merge')\n  ],\n  explicit: [\n    require('../type/binary'),\n    require('../type/omap'),\n    require('../type/pairs'),\n    require('../type/set')\n  ]\n});\n","'use strict';\n\n/*eslint-disable max-len,no-use-before-define*/\n\nvar common              = require('./common');\nvar YAMLException       = require('./exception');\nvar makeSnippet         = require('./snippet');\nvar DEFAULT_SCHEMA      = require('./schema/default');\n\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\nvar CONTEXT_FLOW_IN   = 1;\nvar CONTEXT_FLOW_OUT  = 2;\nvar CONTEXT_BLOCK_IN  = 3;\nvar CONTEXT_BLOCK_OUT = 4;\n\n\nvar CHOMPING_CLIP  = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP  = 3;\n\n\nvar PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS       = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI               = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction is_EOL(c) {\n  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);\n}\n\nfunction is_WHITE_SPACE(c) {\n  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);\n}\n\nfunction is_WS_OR_EOL(c) {\n  return (c === 0x09/* Tab */) ||\n         (c === 0x20/* Space */) ||\n         (c === 0x0A/* LF */) ||\n         (c === 0x0D/* CR */);\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C/* , */ ||\n         c === 0x5B/* [ */ ||\n         c === 0x5D/* ] */ ||\n         c === 0x7B/* { */ ||\n         c === 0x7D/* } */;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n\n  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78/* x */) { return 2; }\n  if (c === 0x75/* u */) { return 4; }\n  if (c === 0x55/* U */) { return 8; }\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return (c === 0x30/* 0 */) ? '\\x00' :\n        (c === 0x61/* a */) ? '\\x07' :\n        (c === 0x62/* b */) ? '\\x08' :\n        (c === 0x74/* t */) ? '\\x09' :\n        (c === 0x09/* Tab */) ? '\\x09' :\n        (c === 0x6E/* n */) ? '\\x0A' :\n        (c === 0x76/* v */) ? '\\x0B' :\n        (c === 0x66/* f */) ? '\\x0C' :\n        (c === 0x72/* r */) ? '\\x0D' :\n        (c === 0x65/* e */) ? '\\x1B' :\n        (c === 0x20/* Space */) ? ' ' :\n        (c === 0x22/* \" */) ? '\\x22' :\n        (c === 0x2F/* / */) ? '/' :\n        (c === 0x5C/* \\ */) ? '\\x5C' :\n        (c === 0x4E/* N */) ? '\\x85' :\n        (c === 0x5F/* _ */) ? '\\xA0' :\n        (c === 0x4C/* L */) ? '\\u2028' :\n        (c === 0x50/* P */) ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode(\n    ((c - 0x010000) >> 10) + 0xD800,\n    ((c - 0x010000) & 0x03FF) + 0xDC00\n  );\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\n\nfunction State(input, options) {\n  this.input = input;\n\n  this.filename  = options['filename']  || null;\n  this.schema    = options['schema']    || DEFAULT_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n  // if such documents have no explicit %YAML directive\n  this.legacy    = options['legacy']    || false;\n\n  this.json      = options['json']      || false;\n  this.listener  = options['listener']  || null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap       = this.schema.compiledTypeMap;\n\n  this.length     = input.length;\n  this.position   = 0;\n  this.line       = 0;\n  this.lineStart  = 0;\n  this.lineIndent = 0;\n\n  // position of first leading tab in the current line,\n  // used to make sure there are no tabs in the indentation\n  this.firstTabInLine = -1;\n\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n\n}\n\n\nfunction generateError(state, message) {\n  var mark = {\n    name:     state.filename,\n    buffer:   state.input.slice(0, -1), // omit trailing \\0\n    position: state.position,\n    line:     state.line,\n    column:   state.position - state.lineStart\n  };\n\n  mark.snippet = makeSnippet(mark);\n\n  return new YAMLException(message, mark);\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\n\nvar directiveHandlers = {\n\n  YAML: function handleYamlDirective(state, name, args) {\n\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = (minor < 2);\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n\n  TAG: function handleTagDirective(state, name, args) {\n\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    try {\n      prefix = decodeURIComponent(prefix);\n    } catch (err) {\n      throwError(state, 'tag prefix is malformed: ' + prefix);\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(_character === 0x09 ||\n              (0x20 <= _character && _character <= 0x10FFFF))) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,\n  startLine, startLineStart, startPos) {\n\n  var index, quantity;\n\n  // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  }\n\n  // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json &&\n        !_hasOwnProperty.call(overridableKeys, keyNode) &&\n        _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.lineStart = startLineStart || state.lineStart;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n\n    // used for this specific key only because Object.defineProperty is slow\n    if (keyNode === '__proto__') {\n      Object.defineProperty(_result, keyNode, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: valueNode\n      });\n    } else {\n      _result[keyNode] = valueNode;\n    }\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A/* LF */) {\n    state.position++;\n  } else if (ch === 0x0D/* CR */) {\n    state.position++;\n    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n  state.firstTabInLine = -1;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {\n        state.firstTabInLine = state.position;\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23/* # */) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20/* Space */) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&\n      ch === state.input.charCodeAt(_position + 1) &&\n      ch === state.input.charCodeAt(_position + 2)) {\n\n    _position += 3;\n\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch)      ||\n      is_FLOW_INDICATOR(ch) ||\n      ch === 0x23/* # */    ||\n      ch === 0x26/* & */    ||\n      ch === 0x2A/* * */    ||\n      ch === 0x21/* ! */    ||\n      ch === 0x7C/* | */    ||\n      ch === 0x3E/* > */    ||\n      ch === 0x27/* ' */    ||\n      ch === 0x22/* \" */    ||\n      ch === 0x25/* % */    ||\n      ch === 0x40/* @ */    ||\n      ch === 0x60/* ` */) {\n    return false;\n  }\n\n  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) ||\n        withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A/* : */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) ||\n          withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n\n    } else if (ch === 0x23/* # */) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n\n    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n               withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch,\n      captureStart, captureEnd;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27/* ' */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27/* ' */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27/* ' */) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart,\n      captureEnd,\n      hexLength,\n      hexResult,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22/* \" */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22/* \" */) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n\n    } else if (ch === 0x5C/* \\ */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n\n        state.position++;\n\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _lineStart,\n      _pos,\n      _tag     = state.tag,\n      _result,\n      _anchor  = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = Object.create(null),\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B/* [ */) {\n    terminator = 0x5D;/* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B/* { */) {\n    terminator = 0x7D;/* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    } else if (ch === 0x2C/* , */) {\n      // \"flow collection entries can never be completely empty\", as per YAML 1.2, section 7.4\n      throwError(state, \"expected the node content, but found ','\");\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F/* ? */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line; // Save the current line.\n    _lineStart = state.lineStart;\n    _pos = state.position;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C/* , */) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping       = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent     = nodeIndent,\n      emptyLines     = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C/* | */) {\n    folding = false;\n  } else if (ch === 0x3E/* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23/* # */) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (!is_EOL(ch) && (ch !== 0));\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) &&\n           (ch === 0x20/* Space */)) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) { // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        // except for the first content line (cf. Example 8.1)\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n\n      // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n      // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) { // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n      // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n\n    // Literal style: just add exact number of line breaks between content lines.\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && (ch !== 0)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag      = state.tag,\n      _anchor   = state.anchor,\n      _result   = [],\n      following,\n      detected  = false,\n      ch;\n\n  // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    if (ch !== 0x2D/* - */) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _keyLine,\n      _keyLineStart,\n      _keyPos,\n      _tag          = state.tag,\n      _anchor       = state.anchor,\n      _result       = {},\n      overridableKeys = Object.create(null),\n      keyTag        = null,\n      keyNode       = null,\n      valueNode     = null,\n      atExplicitKey = false,\n      detected      = false,\n      ch;\n\n  // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (!atExplicitKey && state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {\n\n      if (ch === 0x3F/* ? */) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following;\n\n    //\n    // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n    //\n    } else {\n      _keyLine = state.line;\n      _keyLineStart = state.lineStart;\n      _keyPos = state.position;\n\n      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n        // Neither implicit nor explicit notation.\n        // Reading is done. Go to the epilogue.\n        break;\n      }\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A/* : */) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (atExplicitKey) {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n      }\n\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed    = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x21/* ! */) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C/* < */) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n\n  } else if (ch === 0x21/* ! */) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (ch !== 0 && ch !== 0x3E/* > */);\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n\n      if (ch === 0x21/* ! */) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  try {\n    tagName = decodeURIComponent(tagName);\n  } catch (err) {\n    throwError(state, 'tag name is malformed: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x26/* & */) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x2A/* * */) return false;\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent\n      atNewLine  = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      typeList,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag    = null;\n  state.anchor = null;\n  state.kind   = null;\n  state.result = null;\n\n  allowBlockStyles = allowBlockScalars = allowBlockCollections =\n    CONTEXT_BLOCK_OUT === nodeContext ||\n    CONTEXT_BLOCK_IN  === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections &&\n          (readBlockSequence(state, blockIndent) ||\n           readBlockMapping(state, blockIndent, flowIndent)) ||\n          readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||\n            readSingleQuotedScalar(state, flowIndent) ||\n            readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag === null) {\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = state.result;\n    }\n\n  } else if (state.tag === '?') {\n    // Implicit resolving is not allowed for non-scalar types, and '?'\n    // non-specific tag is only automatically assigned to plain scalars.\n    //\n    // We only need to check kind conformity in case user explicitly assigns '?'\n    // tag, for example like this: \"!<?> [0]\"\n    //\n    if (state.result !== null && state.kind !== 'scalar') {\n      throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n    }\n\n    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n      type = state.implicitTypes[typeIndex];\n\n      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched\n        state.result = type.construct(state.result);\n        state.tag = type.tag;\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n        break;\n      }\n    }\n  } else if (state.tag !== '!') {\n    if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n    } else {\n      // looking for multi type\n      type = null;\n      typeList = state.typeMap.multi[state.kind || 'fallback'];\n\n      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n          type = typeList[typeIndex];\n          break;\n        }\n      }\n    }\n\n    if (!type) {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n\n    if (state.result !== null && type.kind !== state.kind) {\n      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n    }\n\n    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched\n      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n    } else {\n      state.result = type.construct(state.result, state.tag);\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n  return state.tag !== null ||  state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = Object.create(null);\n  state.anchorMap = Object.create(null);\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25/* % */) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23/* # */) {\n        do { ch = state.input.charCodeAt(++state.position); }\n        while (ch !== 0 && !is_EOL(ch));\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 &&\n      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks &&\n      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n\n    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n\n  if (state.position < (state.length - 1)) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&\n        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  }\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < (state.length - 1)) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\n\nfunction loadAll(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\n\n\nmodule.exports.loadAll = loadAll;\nmodule.exports.load    = load;\n","'use strict';\n\n/*eslint-disable no-use-before-define*/\n\nvar common              = require('./common');\nvar YAMLException       = require('./exception');\nvar DEFAULT_SCHEMA      = require('./schema/default');\n\nvar _toString       = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar CHAR_BOM                  = 0xFEFF;\nvar CHAR_TAB                  = 0x09; /* Tab */\nvar CHAR_LINE_FEED            = 0x0A; /* LF */\nvar CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */\nvar CHAR_SPACE                = 0x20; /* Space */\nvar CHAR_EXCLAMATION          = 0x21; /* ! */\nvar CHAR_DOUBLE_QUOTE         = 0x22; /* \" */\nvar CHAR_SHARP                = 0x23; /* # */\nvar CHAR_PERCENT              = 0x25; /* % */\nvar CHAR_AMPERSAND            = 0x26; /* & */\nvar CHAR_SINGLE_QUOTE         = 0x27; /* ' */\nvar CHAR_ASTERISK             = 0x2A; /* * */\nvar CHAR_COMMA                = 0x2C; /* , */\nvar CHAR_MINUS                = 0x2D; /* - */\nvar CHAR_COLON                = 0x3A; /* : */\nvar CHAR_EQUALS               = 0x3D; /* = */\nvar CHAR_GREATER_THAN         = 0x3E; /* > */\nvar CHAR_QUESTION             = 0x3F; /* ? */\nvar CHAR_COMMERCIAL_AT        = 0x40; /* @ */\nvar CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */\nvar CHAR_GRAVE_ACCENT         = 0x60; /* ` */\nvar CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */\nvar CHAR_VERTICAL_LINE        = 0x7C; /* | */\nvar CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */\n\nvar ESCAPE_SEQUENCES = {};\n\nESCAPE_SEQUENCES[0x00]   = '\\\\0';\nESCAPE_SEQUENCES[0x07]   = '\\\\a';\nESCAPE_SEQUENCES[0x08]   = '\\\\b';\nESCAPE_SEQUENCES[0x09]   = '\\\\t';\nESCAPE_SEQUENCES[0x0A]   = '\\\\n';\nESCAPE_SEQUENCES[0x0B]   = '\\\\v';\nESCAPE_SEQUENCES[0x0C]   = '\\\\f';\nESCAPE_SEQUENCES[0x0D]   = '\\\\r';\nESCAPE_SEQUENCES[0x1B]   = '\\\\e';\nESCAPE_SEQUENCES[0x22]   = '\\\\\"';\nESCAPE_SEQUENCES[0x5C]   = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85]   = '\\\\N';\nESCAPE_SEQUENCES[0xA0]   = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\n\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',\n  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'\n];\n\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n\n  if (map === null) return {};\n\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\n\nvar QUOTING_TYPE_SINGLE = 1,\n    QUOTING_TYPE_DOUBLE = 2;\n\nfunction State(options) {\n  this.schema        = options['schema'] || DEFAULT_SCHEMA;\n  this.indent        = Math.max(1, (options['indent'] || 2));\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid   = options['skipInvalid'] || false;\n  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);\n  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys      = options['sortKeys'] || false;\n  this.lineWidth     = options['lineWidth'] || 80;\n  this.noRefs        = options['noRefs'] || false;\n  this.noCompatMode  = options['noCompatMode'] || false;\n  this.condenseFlow  = options['condenseFlow'] || false;\n  this.quotingType   = options['quotingType'] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n  this.forceQuotes   = options['forceQuotes'] || false;\n  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n\n  this.tag = null;\n  this.result = '';\n\n  this.duplicates = [];\n  this.usedDuplicates = null;\n}\n\n// Indents every line in a string. Empty lines (\\n only) are not indented.\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// [33] s-white ::= s-space | s-tab\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n}\n\n// Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\nfunction isPrintable(c) {\n  return  (0x00020 <= c && c <= 0x00007E)\n      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)\n      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)\n      ||  (0x10000 <= c && c <= 0x10FFFF);\n}\n\n// [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// Including s-white (for some reason, examples doesn't match specs in this aspect)\n// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\nfunction isNsCharOrWhitespace(c) {\n  return isPrintable(c)\n    && c !== CHAR_BOM\n    // - b-char\n    && c !== CHAR_CARRIAGE_RETURN\n    && c !== CHAR_LINE_FEED;\n}\n\n// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out\n//                             c = flow-in   ⇒ ns-plain-safe-in\n//                             c = block-key ⇒ ns-plain-safe-out\n//                             c = flow-key  ⇒ ns-plain-safe-in\n// [128] ns-plain-safe-out ::= ns-char\n// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )\n//                            | ( /* An ns-char preceding */ “#” )\n//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )\nfunction isPlainSafe(c, prev, inblock) {\n  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n  return (\n    // ns-plain-safe\n    inblock ? // c = flow-in\n      cIsNsCharOrWhitespace\n      : cIsNsCharOrWhitespace\n        // - c-flow-indicator\n        && c !== CHAR_COMMA\n        && c !== CHAR_LEFT_SQUARE_BRACKET\n        && c !== CHAR_RIGHT_SQUARE_BRACKET\n        && c !== CHAR_LEFT_CURLY_BRACKET\n        && c !== CHAR_RIGHT_CURLY_BRACKET\n  )\n    // ns-plain-char\n    && c !== CHAR_SHARP // false on '#'\n    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '\n    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'\n    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'\n}\n\n// Simplified test for values allowed as the first character in plain style.\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part\n  return isPrintable(c) && c !== CHAR_BOM\n    && !isWhitespace(c) // - s-white\n    // - (c-indicator ::=\n    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n    && c !== CHAR_MINUS\n    && c !== CHAR_QUESTION\n    && c !== CHAR_COLON\n    && c !== CHAR_COMMA\n    && c !== CHAR_LEFT_SQUARE_BRACKET\n    && c !== CHAR_RIGHT_SQUARE_BRACKET\n    && c !== CHAR_LEFT_CURLY_BRACKET\n    && c !== CHAR_RIGHT_CURLY_BRACKET\n    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n    && c !== CHAR_SHARP\n    && c !== CHAR_AMPERSAND\n    && c !== CHAR_ASTERISK\n    && c !== CHAR_EXCLAMATION\n    && c !== CHAR_VERTICAL_LINE\n    && c !== CHAR_EQUALS\n    && c !== CHAR_GREATER_THAN\n    && c !== CHAR_SINGLE_QUOTE\n    && c !== CHAR_DOUBLE_QUOTE\n    // | “%” | “@” | “`”)\n    && c !== CHAR_PERCENT\n    && c !== CHAR_COMMERCIAL_AT\n    && c !== CHAR_GRAVE_ACCENT;\n}\n\n// Simplified test for values allowed as the last character in plain style.\nfunction isPlainSafeLast(c) {\n  // just not whitespace or colon, it will be checked to be plain character later\n  return !isWhitespace(c) && c !== CHAR_COLON;\n}\n\n// Same as 'string'.codePointAt(pos), but works in older browsers.\nfunction codePointAt(string, pos) {\n  var first = string.charCodeAt(pos), second;\n  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n    second = string.charCodeAt(pos + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n  return first;\n}\n\n// Determines whether block indentation indicator is required.\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN   = 1,\n    STYLE_SINGLE  = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED  = 4,\n    STYLE_DOUBLE  = 5;\n\n// Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,\n  testAmbiguousType, quotingType, forceQuotes, inblock) {\n\n  var i;\n  var char = 0;\n  var prevChar = null;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n  var plain = isPlainSafeFirst(codePointAt(string, 0))\n          && isPlainSafeLast(codePointAt(string, string.length - 1));\n\n  if (singleLineOnly || forceQuotes) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true;\n        // Check if any line can be folded.\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine ||\n            // Foldable line = too long, and not more-indented.\n            (i - previousLineBreak - 1 > lineWidth &&\n             string[previousLineBreak + 1] !== ' ');\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n    // in case the end is missing a \\n\n    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&\n      (i - previousLineBreak - 1 > lineWidth &&\n       string[previousLineBreak + 1] !== ' '));\n  }\n  // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    if (plain && !forceQuotes && !testAmbiguousType(string)) {\n      return STYLE_PLAIN;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  }\n  // Edge case: block indentation indicator can only have one digit.\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  }\n  // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n  if (!forceQuotes) {\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n  }\n  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n}\n\n// Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\nfunction writeScalar(state, string, level, iskey, inblock) {\n  state.dump = (function () {\n    if (string.length === 0) {\n      return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n    }\n    if (!state.noCompatMode) {\n      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('\"' + string + '\"') : (\"'\" + string + \"'\");\n      }\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n    var lineWidth = state.lineWidth === -1\n      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n\n    // Without knowing if keys are implicit/explicit, assume implicit for safety.\n    var singleLineOnly = iskey\n      // No block styles in flow mode.\n      || (state.flowLevel > -1 && level >= state.flowLevel);\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,\n      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {\n\n      case STYLE_PLAIN:\n        return string;\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent)\n          + dropEndingNewline(indentString(string, indent));\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent)\n          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string, lineWidth) + '\"';\n      default:\n        throw new YAMLException('impossible error: invalid scalar style');\n    }\n  }());\n}\n\n// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';\n\n  // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n  var clip =          string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : (clip ? '' : '-');\n\n  return indentIndicator + chomp + '\\n';\n}\n\n// (See the note for writeScalar.)\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n}\n\n// Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g;\n\n  // first line (possibly an empty line)\n  var result = (function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }());\n  // If we haven't reached the first content line yet, don't add an extra \\n.\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented;\n\n  // rest of the lines\n  var match;\n  while ((match = lineRe.exec(string))) {\n    var prefix = match[1], line = match[2];\n    moreIndented = (line[0] === ' ');\n    result += prefix\n      + (!prevMoreIndented && !moreIndented && line !== ''\n        ? '\\n' : '')\n      + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n}\n\n// Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line;\n\n  // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n  var match;\n  // start is an inclusive index. end, curr, and next are exclusive.\n  var start = 0, end, curr = 0, next = 0;\n  var result = '';\n\n  // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n  while ((match = breakRe.exec(line))) {\n    next = match.index;\n    // maintain invariant: curr - start <= width\n    if (next - start > width) {\n      end = (curr > start) ? curr : next; // derive end <= length-2\n      result += '\\n' + line.slice(start, end);\n      // skip the space that was output as \\n\n      start = end + 1;                    // derive start <= length-1\n    }\n    curr = next;\n  }\n\n  // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n  result += '\\n';\n  // Insert a break if the remainder is too long and there is a break available.\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n}\n\n// Escapes a double-quoted string.\nfunction escapeString(string) {\n  var result = '';\n  var char = 0;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n    char = codePointAt(string, i);\n    escapeSeq = ESCAPE_SEQUENCES[char];\n\n    if (!escapeSeq && isPrintable(char)) {\n      result += string[i];\n      if (char >= 0x10000) result += string[i + 1];\n    } else {\n      result += escapeSeq || encodeHex(char);\n    }\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag    = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n\n    // Write only valid elements, put null instead of invalid elements.\n    if (writeNode(state, level, value, false, false) ||\n        (typeof value === 'undefined' &&\n         writeNode(state, level, null, false, false))) {\n\n      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag    = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n\n    // Write only valid elements, put null instead of invalid elements.\n    if (writeNode(state, level + 1, value, true, true, false, true) ||\n        (typeof value === 'undefined' &&\n         writeNode(state, level + 1, null, true, true, false, true))) {\n\n      if (!compact || _result !== '') {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result       = '',\n      _tag          = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n\n    pairBuffer = '';\n    if (_result !== '') pairBuffer += ', ';\n\n    if (state.condenseFlow) pairBuffer += '\"';\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result       = '',\n      _tag          = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer;\n\n  // Allow sorting keys so that the output file is deterministic\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new YAMLException('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || _result !== '') {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = (state.tag !== null && state.tag !== '?') ||\n                   (state.dump && state.dump.length > 1024);\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf  || type.predicate) &&\n        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&\n        (!type.predicate  || type.predicate(object))) {\n\n      if (explicit) {\n        if (type.multi && type.representName) {\n          state.tag = type.representName(object);\n        } else {\n          state.tag = type.tag;\n        }\n      } else {\n        state.tag = '?';\n      }\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString.call(state.dump);\n  var inblock = block;\n  var tagStr;\n\n  if (block) {\n    block = (state.flowLevel < 0 || state.flowLevel > level);\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n    if (type === '[object Object]') {\n      if (block && (Object.keys(state.dump).length !== 0)) {\n        writeBlockMapping(state, level, state.dump, compact);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      if (block && (state.dump.length !== 0)) {\n        if (state.noArrayIndent && !isblockseq && level > 0) {\n          writeBlockSequence(state, level - 1, state.dump, compact);\n        } else {\n          writeBlockSequence(state, level, state.dump, compact);\n        }\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey, inblock);\n      }\n    } else if (type === '[object Undefined]') {\n      return false;\n    } else {\n      if (state.skipInvalid) return false;\n      throw new YAMLException('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      // Need to encode all characters except those allowed by the spec:\n      //\n      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n      // [36] ns-hex-digit    ::=  ns-dec-digit\n      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”\n      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”\n      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”\n      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”\n      //\n      // Also need to encode '!' because it has special meaning (end of tag prefix).\n      //\n      tagStr = encodeURI(\n        state.tag[0] === '!' ? state.tag.slice(1) : state.tag\n      ).replace(/!/g, '%21');\n\n      if (state.tag[0] === '!') {\n        tagStr = '!' + tagStr;\n      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {\n        tagStr = '!!' + tagStr.slice(18);\n      } else {\n        tagStr = '!<' + tagStr + '>';\n      }\n\n      state.dump = tagStr + ' ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList,\n      index,\n      length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump(input, options) {\n  options = options || {};\n\n  var state = new State(options);\n\n  if (!state.noRefs) getDuplicateReferences(input, state);\n\n  var value = input;\n\n  if (state.replacer) {\n    value = state.replacer.call({ '': value }, '', value);\n  }\n\n  if (writeNode(state, 0, value, true, true)) return state.dump + '\\n';\n\n  return '';\n}\n\nmodule.exports.dump = dump;\n","'use strict';\n\n\nvar loader = require('./lib/loader');\nvar dumper = require('./lib/dumper');\n\n\nfunction renamed(from, to) {\n  return function () {\n    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +\n      'Use yaml.' + to + ' instead, which is now safe by default.');\n  };\n}\n\n\nmodule.exports.Type                = require('./lib/type');\nmodule.exports.Schema              = require('./lib/schema');\nmodule.exports.FAILSAFE_SCHEMA     = require('./lib/schema/failsafe');\nmodule.exports.JSON_SCHEMA         = require('./lib/schema/json');\nmodule.exports.CORE_SCHEMA         = require('./lib/schema/core');\nmodule.exports.DEFAULT_SCHEMA      = require('./lib/schema/default');\nmodule.exports.load                = loader.load;\nmodule.exports.loadAll             = loader.loadAll;\nmodule.exports.dump                = dumper.dump;\nmodule.exports.YAMLException       = require('./lib/exception');\n\n// Re-export all types in case user wants to create custom schema\nmodule.exports.types = {\n  binary:    require('./lib/type/binary'),\n  float:     require('./lib/type/float'),\n  map:       require('./lib/type/map'),\n  null:      require('./lib/type/null'),\n  pairs:     require('./lib/type/pairs'),\n  set:       require('./lib/type/set'),\n  timestamp: require('./lib/type/timestamp'),\n  bool:      require('./lib/type/bool'),\n  int:       require('./lib/type/int'),\n  merge:     require('./lib/type/merge'),\n  omap:      require('./lib/type/omap'),\n  seq:       require('./lib/type/seq'),\n  str:       require('./lib/type/str')\n};\n\n// Removed functions from JS-YAML 3.0.x\nmodule.exports.safeLoad            = renamed('safeLoad', 'load');\nmodule.exports.safeLoadAll         = renamed('safeLoadAll', 'loadAll');\nmodule.exports.safeDump            = renamed('safeDump', 'dump');\n","\"use strict\";\n/* eslint-disable @typescript-eslint/no-require-imports */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadTs = exports.loadTsSync = exports.loadYaml = exports.loadJson = exports.loadJs = exports.loadJsSync = void 0;\nconst fs_1 = require(\"fs\");\nconst promises_1 = require(\"fs/promises\");\nconst path_1 = __importDefault(require(\"path\"));\nconst url_1 = require(\"url\");\nlet importFresh;\nconst loadJsSync = function loadJsSync(filepath) {\n    if (importFresh === undefined) {\n        importFresh = require('import-fresh');\n    }\n    return importFresh(filepath);\n};\nexports.loadJsSync = loadJsSync;\nconst loadJs = async function loadJs(filepath) {\n    try {\n        const { href } = (0, url_1.pathToFileURL)(filepath);\n        return (await import(href)).default;\n    }\n    catch (error) {\n        try {\n            return (0, exports.loadJsSync)(filepath, '');\n        }\n        catch (requireError) {\n            if (requireError.code === 'ERR_REQUIRE_ESM' ||\n                (requireError instanceof SyntaxError &&\n                    requireError\n                        .toString()\n                        .includes('Cannot use import statement outside a module'))) {\n                throw error;\n            }\n            throw requireError;\n        }\n    }\n};\nexports.loadJs = loadJs;\nlet parseJson;\nconst loadJson = function loadJson(filepath, content) {\n    if (parseJson === undefined) {\n        parseJson = require('parse-json');\n    }\n    try {\n        return parseJson(content);\n    }\n    catch (error) {\n        error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n        throw error;\n    }\n};\nexports.loadJson = loadJson;\nlet yaml;\nconst loadYaml = function loadYaml(filepath, content) {\n    if (yaml === undefined) {\n        yaml = require('js-yaml');\n    }\n    try {\n        return yaml.load(content);\n    }\n    catch (error) {\n        error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n        throw error;\n    }\n};\nexports.loadYaml = loadYaml;\nlet typescript;\nconst loadTsSync = function loadTsSync(filepath, content) {\n    /* istanbul ignore next -- @preserve */\n    if (typescript === undefined) {\n        typescript = require('typescript');\n    }\n    const compiledFilepath = `${filepath.slice(0, -2)}cjs`;\n    try {\n        const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};\n        config.compilerOptions = {\n            ...config.compilerOptions,\n            module: typescript.ModuleKind.NodeNext,\n            moduleResolution: typescript.ModuleResolutionKind.NodeNext,\n            target: typescript.ScriptTarget.ES2022,\n            noEmit: false,\n        };\n        content = typescript.transpileModule(content, config).outputText;\n        (0, fs_1.writeFileSync)(compiledFilepath, content);\n        return (0, exports.loadJsSync)(compiledFilepath, content).default;\n    }\n    catch (error) {\n        error.message = `TypeScript Error in ${filepath}:\\n${error.message}`;\n        throw error;\n    }\n    finally {\n        if ((0, fs_1.existsSync)(compiledFilepath)) {\n            (0, fs_1.rmSync)(compiledFilepath);\n        }\n    }\n};\nexports.loadTsSync = loadTsSync;\nconst loadTs = async function loadTs(filepath, content) {\n    if (typescript === undefined) {\n        typescript = (await import('typescript')).default;\n    }\n    const compiledFilepath = `${filepath.slice(0, -2)}mjs`;\n    let transpiledContent;\n    try {\n        try {\n            const config = resolveTsConfig(path_1.default.dirname(filepath)) ?? {};\n            config.compilerOptions = {\n                ...config.compilerOptions,\n                module: typescript.ModuleKind.ES2022,\n                moduleResolution: typescript.ModuleResolutionKind.Bundler,\n                target: typescript.ScriptTarget.ES2022,\n                noEmit: false,\n            };\n            transpiledContent = typescript.transpileModule(content, config).outputText;\n            await (0, promises_1.writeFile)(compiledFilepath, transpiledContent);\n        }\n        catch (error) {\n            error.message = `TypeScript Error in ${filepath}:\\n${error.message}`;\n            throw error;\n        }\n        // eslint-disable-next-line @typescript-eslint/return-await\n        return await (0, exports.loadJs)(compiledFilepath, transpiledContent);\n    }\n    finally {\n        if ((0, fs_1.existsSync)(compiledFilepath)) {\n            await (0, promises_1.rm)(compiledFilepath);\n        }\n    }\n};\nexports.loadTs = loadTs;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction resolveTsConfig(directory) {\n    const filePath = typescript.findConfigFile(directory, (fileName) => {\n        return typescript.sys.fileExists(fileName);\n    });\n    if (filePath !== undefined) {\n        const { config, error } = typescript.readConfigFile(filePath, (path) => typescript.sys.readFile(path));\n        if (error) {\n            throw new Error(`Error in ${filePath}: ${error.messageText.toString()}`);\n        }\n        return config;\n    }\n    return;\n}\n//# sourceMappingURL=loaders.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultLoadersSync = exports.defaultLoaders = exports.metaSearchPlaces = exports.globalConfigSearchPlacesSync = exports.globalConfigSearchPlaces = exports.getDefaultSearchPlacesSync = exports.getDefaultSearchPlaces = void 0;\nconst loaders_1 = require(\"./loaders\");\nfunction getDefaultSearchPlaces(moduleName) {\n    return [\n        'package.json',\n        `.${moduleName}rc`,\n        `.${moduleName}rc.json`,\n        `.${moduleName}rc.yaml`,\n        `.${moduleName}rc.yml`,\n        `.${moduleName}rc.js`,\n        `.${moduleName}rc.ts`,\n        `.${moduleName}rc.cjs`,\n        `.${moduleName}rc.mjs`,\n        `.config/${moduleName}rc`,\n        `.config/${moduleName}rc.json`,\n        `.config/${moduleName}rc.yaml`,\n        `.config/${moduleName}rc.yml`,\n        `.config/${moduleName}rc.js`,\n        `.config/${moduleName}rc.ts`,\n        `.config/${moduleName}rc.cjs`,\n        `.config/${moduleName}rc.mjs`,\n        `${moduleName}.config.js`,\n        `${moduleName}.config.ts`,\n        `${moduleName}.config.cjs`,\n        `${moduleName}.config.mjs`,\n    ];\n}\nexports.getDefaultSearchPlaces = getDefaultSearchPlaces;\nfunction getDefaultSearchPlacesSync(moduleName) {\n    return [\n        'package.json',\n        `.${moduleName}rc`,\n        `.${moduleName}rc.json`,\n        `.${moduleName}rc.yaml`,\n        `.${moduleName}rc.yml`,\n        `.${moduleName}rc.js`,\n        `.${moduleName}rc.ts`,\n        `.${moduleName}rc.cjs`,\n        `.config/${moduleName}rc`,\n        `.config/${moduleName}rc.json`,\n        `.config/${moduleName}rc.yaml`,\n        `.config/${moduleName}rc.yml`,\n        `.config/${moduleName}rc.js`,\n        `.config/${moduleName}rc.ts`,\n        `.config/${moduleName}rc.cjs`,\n        `${moduleName}.config.js`,\n        `${moduleName}.config.ts`,\n        `${moduleName}.config.cjs`,\n    ];\n}\nexports.getDefaultSearchPlacesSync = getDefaultSearchPlacesSync;\nexports.globalConfigSearchPlaces = [\n    'config',\n    'config.json',\n    'config.yaml',\n    'config.yml',\n    'config.js',\n    'config.ts',\n    'config.cjs',\n    'config.mjs',\n];\nexports.globalConfigSearchPlacesSync = [\n    'config',\n    'config.json',\n    'config.yaml',\n    'config.yml',\n    'config.js',\n    'config.ts',\n    'config.cjs',\n];\n// this needs to be hardcoded, as this is intended for end users, who can't supply options at this point\nexports.metaSearchPlaces = [\n    'package.json',\n    'package.yaml',\n    '.config/config.json',\n    '.config/config.yaml',\n    '.config/config.yml',\n    '.config/config.js',\n    '.config/config.ts',\n    '.config/config.cjs',\n    '.config/config.mjs',\n];\n// do not allow mutation of default loaders. Make sure it is set inside options\nexports.defaultLoaders = Object.freeze({\n    '.mjs': loaders_1.loadJs,\n    '.cjs': loaders_1.loadJs,\n    '.js': loaders_1.loadJs,\n    '.ts': loaders_1.loadTs,\n    '.json': loaders_1.loadJson,\n    '.yaml': loaders_1.loadYaml,\n    '.yml': loaders_1.loadYaml,\n    noExt: loaders_1.loadYaml,\n});\nexports.defaultLoadersSync = Object.freeze({\n    '.cjs': loaders_1.loadJsSync,\n    '.js': loaders_1.loadJsSync,\n    '.ts': loaders_1.loadTsSync,\n    '.json': loaders_1.loadJson,\n    '.yaml': loaders_1.loadYaml,\n    '.yml': loaders_1.loadYaml,\n    noExt: loaders_1.loadYaml,\n});\n//# sourceMappingURL=defaults.js.map","'use strict';\nconst path = require('path');\nconst os = require('os');\n\nconst homedir = os.homedir();\nconst tmpdir = os.tmpdir();\nconst {env} = process;\n\nconst macos = name => {\n\tconst library = path.join(homedir, 'Library');\n\n\treturn {\n\t\tdata: path.join(library, 'Application Support', name),\n\t\tconfig: path.join(library, 'Preferences', name),\n\t\tcache: path.join(library, 'Caches', name),\n\t\tlog: path.join(library, 'Logs', name),\n\t\ttemp: path.join(tmpdir, name)\n\t};\n};\n\nconst windows = name => {\n\tconst appData = env.APPDATA || path.join(homedir, 'AppData', 'Roaming');\n\tconst localAppData = env.LOCALAPPDATA || path.join(homedir, 'AppData', 'Local');\n\n\treturn {\n\t\t// Data/config/cache/log are invented by me as Windows isn't opinionated about this\n\t\tdata: path.join(localAppData, name, 'Data'),\n\t\tconfig: path.join(appData, name, 'Config'),\n\t\tcache: path.join(localAppData, name, 'Cache'),\n\t\tlog: path.join(localAppData, name, 'Log'),\n\t\ttemp: path.join(tmpdir, name)\n\t};\n};\n\n// https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\nconst linux = name => {\n\tconst username = path.basename(homedir);\n\n\treturn {\n\t\tdata: path.join(env.XDG_DATA_HOME || path.join(homedir, '.local', 'share'), name),\n\t\tconfig: path.join(env.XDG_CONFIG_HOME || path.join(homedir, '.config'), name),\n\t\tcache: path.join(env.XDG_CACHE_HOME || path.join(homedir, '.cache'), name),\n\t\t// https://wiki.debian.org/XDGBaseDirectorySpecification#state\n\t\tlog: path.join(env.XDG_STATE_HOME || path.join(homedir, '.local', 'state'), name),\n\t\ttemp: path.join(tmpdir, username, name)\n\t};\n};\n\nconst envPaths = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError(`Expected string, got ${typeof name}`);\n\t}\n\n\toptions = Object.assign({suffix: 'nodejs'}, options);\n\n\tif (options.suffix) {\n\t\t// Add suffix to prevent possible conflict with native apps\n\t\tname += `-${options.suffix}`;\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\treturn macos(name);\n\t}\n\n\tif (process.platform === 'win32') {\n\t\treturn windows(name);\n\t}\n\n\treturn linux(name);\n};\n\nmodule.exports = envPaths;\n// TODO: Remove this for the next major release\nmodule.exports.default = envPaths;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDirectorySync = exports.isDirectory = exports.removeUndefinedValuesFromObject = exports.getPropertyByPath = exports.emplace = void 0;\nconst fs_1 = __importStar(require(\"fs\"));\n/**\n * @internal\n */\nfunction emplace(map, key, fn) {\n    const cached = map.get(key);\n    if (cached !== undefined) {\n        return cached;\n    }\n    const result = fn();\n    map.set(key, result);\n    return result;\n}\nexports.emplace = emplace;\n// Resolves property names or property paths defined with period-delimited\n// strings or arrays of strings. Property names that are found on the source\n// object are used directly (even if they include a period).\n// Nested property names that include periods, within a path, are only\n// understood in array paths.\n/**\n * @internal\n */\nfunction getPropertyByPath(source, path) {\n    if (typeof path === 'string' &&\n        Object.prototype.hasOwnProperty.call(source, path)) {\n        return source[path];\n    }\n    const parsedPath = typeof path === 'string' ? path.split('.') : path;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return parsedPath.reduce((previous, key) => {\n        if (previous === undefined) {\n            return previous;\n        }\n        return previous[key];\n    }, source);\n}\nexports.getPropertyByPath = getPropertyByPath;\n/** @internal */\nfunction removeUndefinedValuesFromObject(options) {\n    return Object.fromEntries(Object.entries(options).filter(([, value]) => value !== undefined));\n}\nexports.removeUndefinedValuesFromObject = removeUndefinedValuesFromObject;\n/** @internal */\n/* istanbul ignore next -- @preserve */\nasync function isDirectory(path) {\n    try {\n        const stat = await fs_1.promises.stat(path);\n        return stat.isDirectory();\n    }\n    catch (e) {\n        if (e.code === 'ENOENT') {\n            return false;\n        }\n        throw e;\n    }\n}\nexports.isDirectory = isDirectory;\n/** @internal */\n/* istanbul ignore next -- @preserve */\nfunction isDirectorySync(path) {\n    try {\n        const stat = fs_1.default.statSync(path);\n        return stat.isDirectory();\n    }\n    catch (e) {\n        if (e.code === 'ENOENT') {\n            return false;\n        }\n        throw e;\n    }\n}\nexports.isDirectorySync = isDirectorySync;\n//# sourceMappingURL=util.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getExtensionDescription = exports.ExplorerBase = void 0;\nconst env_paths_1 = __importDefault(require(\"env-paths\"));\nconst os_1 = __importDefault(require(\"os\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass ExplorerBase {\n    #loadingMetaConfig = false;\n    config;\n    loadCache;\n    searchCache;\n    constructor(options) {\n        this.config = options;\n        if (options.cache) {\n            this.loadCache = new Map();\n            this.searchCache = new Map();\n        }\n        this.#validateConfig();\n    }\n    set loadingMetaConfig(value) {\n        this.#loadingMetaConfig = value;\n    }\n    #validateConfig() {\n        const config = this.config;\n        for (const place of config.searchPlaces) {\n            const extension = path_1.default.extname(place);\n            const loader = this.config.loaders[extension || 'noExt'] ??\n                this.config.loaders['default'];\n            if (loader === undefined) {\n                throw new Error(`Missing loader for ${getExtensionDescription(place)}.`);\n            }\n            if (typeof loader !== 'function') {\n                throw new Error(`Loader for ${getExtensionDescription(place)} is not a function: Received ${typeof loader}.`);\n            }\n        }\n    }\n    clearLoadCache() {\n        if (this.loadCache) {\n            this.loadCache.clear();\n        }\n    }\n    clearSearchCache() {\n        if (this.searchCache) {\n            this.searchCache.clear();\n        }\n    }\n    clearCaches() {\n        this.clearLoadCache();\n        this.clearSearchCache();\n    }\n    toCosmiconfigResult(filepath, config) {\n        if (config === null) {\n            return null;\n        }\n        if (config === undefined) {\n            return { filepath, config: undefined, isEmpty: true };\n        }\n        if (this.config.applyPackagePropertyPathToConfiguration ||\n            this.#loadingMetaConfig) {\n            const packageProp = this.config.packageProp ?? this.config.moduleName;\n            config = (0, util_js_1.getPropertyByPath)(config, packageProp);\n        }\n        if (config === undefined) {\n            return { filepath, config: undefined, isEmpty: true };\n        }\n        return { config, filepath };\n    }\n    validateImports(containingFilePath, imports, importStack) {\n        const fileDirectory = path_1.default.dirname(containingFilePath);\n        for (const importPath of imports) {\n            if (typeof importPath !== 'string') {\n                throw new Error(`${containingFilePath}: Key $import must contain a string or a list of strings`);\n            }\n            const fullPath = path_1.default.resolve(fileDirectory, importPath);\n            if (fullPath === containingFilePath) {\n                throw new Error(`Self-import detected in ${containingFilePath}`);\n            }\n            const idx = importStack.indexOf(fullPath);\n            if (idx !== -1) {\n                throw new Error(`Circular import detected:\n${[...importStack, fullPath]\n                    .map((path, i) => `${i + 1}. ${path}`)\n                    .join('\\n')} (same as ${idx + 1}.)`);\n            }\n        }\n    }\n    getSearchPlacesForDir(dir, globalConfigPlaces) {\n        return (dir.isGlobalConfig ? globalConfigPlaces : this.config.searchPlaces).map((place) => path_1.default.join(dir.path, place));\n    }\n    getGlobalConfigDir() {\n        return (0, env_paths_1.default)(this.config.moduleName, { suffix: '' }).config;\n    }\n    *getGlobalDirs(startDir) {\n        const stopDir = path_1.default.resolve(this.config.stopDir ?? os_1.default.homedir());\n        yield { path: startDir, isGlobalConfig: false };\n        let currentDir = startDir;\n        while (currentDir !== stopDir) {\n            const parentDir = path_1.default.dirname(currentDir);\n            /* istanbul ignore if -- @preserve */\n            if (parentDir === currentDir) {\n                // we're probably at the root of the directory structure\n                break;\n            }\n            yield { path: parentDir, isGlobalConfig: false };\n            currentDir = parentDir;\n        }\n        yield { path: this.getGlobalConfigDir(), isGlobalConfig: true };\n    }\n}\nexports.ExplorerBase = ExplorerBase;\n/**\n * @internal\n */\nfunction getExtensionDescription(extension) {\n    /* istanbul ignore next -- @preserve */\n    return extension ? `extension \"${extension}\"` : 'files without extensions';\n}\nexports.getExtensionDescription = getExtensionDescription;\n//# sourceMappingURL=ExplorerBase.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeAll = exports.hasOwn = void 0;\n/* eslint-disable @typescript-eslint/unbound-method */\nexports.hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\nconst objToString = Function.prototype.call.bind(Object.prototype.toString);\n/* eslint-enable @typescript-eslint/unbound-method */\nfunction isPlainObject(obj) {\n    return objToString(obj) === '[object Object]';\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction merge(target, source, options) {\n    for (const key of Object.keys(source)) {\n        const newValue = source[key];\n        if ((0, exports.hasOwn)(target, key)) {\n            if (Array.isArray(target[key]) && Array.isArray(newValue)) {\n                if (options.mergeArrays) {\n                    target[key].push(...newValue);\n                    continue;\n                }\n            }\n            else if (isPlainObject(target[key]) && isPlainObject(newValue)) {\n                target[key] = merge(target[key], newValue, options);\n                continue;\n            }\n        }\n        target[key] = newValue;\n    }\n    return target;\n}\n/**\n * Merges multiple objects. Doesn't care about cloning non-primitives, as we load all these objects fresh from a file.\n */\nfunction mergeAll(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nobjects, options) {\n    return objects.reduce((target, source) => merge(target, source, options), {});\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Explorer = void 0;\nconst promises_1 = __importDefault(require(\"fs/promises\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst defaults_1 = require(\"./defaults\");\nconst ExplorerBase_js_1 = require(\"./ExplorerBase.js\");\nconst merge_1 = require(\"./merge\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass Explorer extends ExplorerBase_js_1.ExplorerBase {\n    async load(filepath) {\n        filepath = path_1.default.resolve(filepath);\n        const load = async () => {\n            return await this.config.transform(await this.#readConfiguration(filepath));\n        };\n        if (this.loadCache) {\n            return await (0, util_js_1.emplace)(this.loadCache, filepath, load);\n        }\n        return await load();\n    }\n    async search(from = '') {\n        if (this.config.metaConfigFilePath) {\n            this.loadingMetaConfig = true;\n            const config = await this.load(this.config.metaConfigFilePath);\n            this.loadingMetaConfig = false;\n            if (config && !config.isEmpty) {\n                return config;\n            }\n        }\n        from = path_1.default.resolve(from);\n        const dirs = this.#getDirs(from);\n        const firstDirIter = await dirs.next();\n        /* istanbul ignore if -- @preserve */\n        if (firstDirIter.done) {\n            // this should never happen\n            throw new Error(`Could not find any folders to iterate through (start from ${from})`);\n        }\n        let currentDir = firstDirIter.value;\n        const search = async () => {\n            /* istanbul ignore if -- @preserve */\n            if (await (0, util_js_1.isDirectory)(currentDir.path)) {\n                for (const filepath of this.getSearchPlacesForDir(currentDir, defaults_1.globalConfigSearchPlaces)) {\n                    try {\n                        const result = await this.#readConfiguration(filepath);\n                        if (result !== null &&\n                            !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {\n                            return await this.config.transform(result);\n                        }\n                    }\n                    catch (error) {\n                        if (error.code === 'ENOENT' ||\n                            error.code === 'EISDIR' ||\n                            error.code === 'ENOTDIR' ||\n                            error.code === 'EACCES') {\n                            continue;\n                        }\n                        throw error;\n                    }\n                }\n            }\n            const nextDirIter = await dirs.next();\n            if (!nextDirIter.done) {\n                currentDir = nextDirIter.value;\n                if (this.searchCache) {\n                    return await (0, util_js_1.emplace)(this.searchCache, currentDir.path, search);\n                }\n                return await search();\n            }\n            return await this.config.transform(null);\n        };\n        if (this.searchCache) {\n            return await (0, util_js_1.emplace)(this.searchCache, from, search);\n        }\n        return await search();\n    }\n    async #readConfiguration(filepath, importStack = []) {\n        const contents = await promises_1.default.readFile(filepath, { encoding: 'utf-8' });\n        return this.toCosmiconfigResult(filepath, await this.#loadConfigFileWithImports(filepath, contents, importStack));\n    }\n    async #loadConfigFileWithImports(filepath, contents, importStack) {\n        const loadedContent = await this.#loadConfiguration(filepath, contents);\n        if (!loadedContent || !(0, merge_1.hasOwn)(loadedContent, '$import')) {\n            return loadedContent;\n        }\n        const fileDirectory = path_1.default.dirname(filepath);\n        const { $import: imports, ...ownContent } = loadedContent;\n        const importPaths = Array.isArray(imports) ? imports : [imports];\n        const newImportStack = [...importStack, filepath];\n        this.validateImports(filepath, importPaths, newImportStack);\n        const importedConfigs = await Promise.all(importPaths.map(async (importPath) => {\n            const fullPath = path_1.default.resolve(fileDirectory, importPath);\n            const result = await this.#readConfiguration(fullPath, newImportStack);\n            return result?.config;\n        }));\n        return (0, merge_1.mergeAll)([...importedConfigs, ownContent], {\n            mergeArrays: this.config.mergeImportArrays,\n        });\n    }\n    async #loadConfiguration(filepath, contents) {\n        if (contents.trim() === '') {\n            return;\n        }\n        const extension = path_1.default.extname(filepath);\n        const loader = this.config.loaders[extension || 'noExt'] ??\n            this.config.loaders['default'];\n        if (!loader) {\n            throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);\n        }\n        try {\n            const loadedContents = await loader(filepath, contents);\n            if (path_1.default.basename(filepath, extension) !== 'package') {\n                return loadedContents;\n            }\n            return ((0, util_js_1.getPropertyByPath)(loadedContents, this.config.packageProp ?? this.config.moduleName) ?? null);\n        }\n        catch (error) {\n            error.filepath = filepath;\n            throw error;\n        }\n    }\n    async #fileExists(path) {\n        try {\n            await promises_1.default.stat(path);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    async *#getDirs(startDir) {\n        switch (this.config.searchStrategy) {\n            case 'none': {\n                // only check in the passed directory (defaults to working directory)\n                yield { path: startDir, isGlobalConfig: false };\n                return;\n            }\n            case 'project': {\n                let currentDir = startDir;\n                while (true) {\n                    yield { path: currentDir, isGlobalConfig: false };\n                    for (const ext of ['json', 'yaml']) {\n                        const packageFile = path_1.default.join(currentDir, `package.${ext}`);\n                        if (await this.#fileExists(packageFile)) {\n                            break;\n                        }\n                    }\n                    const parentDir = path_1.default.dirname(currentDir);\n                    /* istanbul ignore if -- @preserve */\n                    if (parentDir === currentDir) {\n                        // we're probably at the root of the directory structure\n                        break;\n                    }\n                    currentDir = parentDir;\n                }\n                return;\n            }\n            case 'global': {\n                yield* this.getGlobalDirs(startDir);\n            }\n        }\n    }\n}\nexports.Explorer = Explorer;\n//# sourceMappingURL=Explorer.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExplorerSync = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst defaults_1 = require(\"./defaults\");\nconst ExplorerBase_js_1 = require(\"./ExplorerBase.js\");\nconst merge_1 = require(\"./merge\");\nconst util_js_1 = require(\"./util.js\");\n/**\n * @internal\n */\nclass ExplorerSync extends ExplorerBase_js_1.ExplorerBase {\n    load(filepath) {\n        filepath = path_1.default.resolve(filepath);\n        const load = () => {\n            return this.config.transform(this.#readConfiguration(filepath));\n        };\n        if (this.loadCache) {\n            return (0, util_js_1.emplace)(this.loadCache, filepath, load);\n        }\n        return load();\n    }\n    search(from = '') {\n        if (this.config.metaConfigFilePath) {\n            this.loadingMetaConfig = true;\n            const config = this.load(this.config.metaConfigFilePath);\n            this.loadingMetaConfig = false;\n            if (config && !config.isEmpty) {\n                return config;\n            }\n        }\n        from = path_1.default.resolve(from);\n        const dirs = this.#getDirs(from);\n        const firstDirIter = dirs.next();\n        /* istanbul ignore if -- @preserve */\n        if (firstDirIter.done) {\n            // this should never happen\n            throw new Error(`Could not find any folders to iterate through (start from ${from})`);\n        }\n        let currentDir = firstDirIter.value;\n        const search = () => {\n            /* istanbul ignore if -- @preserve */\n            if ((0, util_js_1.isDirectorySync)(currentDir.path)) {\n                for (const filepath of this.getSearchPlacesForDir(currentDir, defaults_1.globalConfigSearchPlacesSync)) {\n                    try {\n                        const result = this.#readConfiguration(filepath);\n                        if (result !== null &&\n                            !(result.isEmpty && this.config.ignoreEmptySearchPlaces)) {\n                            return this.config.transform(result);\n                        }\n                    }\n                    catch (error) {\n                        if (error.code === 'ENOENT' ||\n                            error.code === 'EISDIR' ||\n                            error.code === 'ENOTDIR' ||\n                            error.code === 'EACCES') {\n                            continue;\n                        }\n                        throw error;\n                    }\n                }\n            }\n            const nextDirIter = dirs.next();\n            if (!nextDirIter.done) {\n                currentDir = nextDirIter.value;\n                if (this.searchCache) {\n                    return (0, util_js_1.emplace)(this.searchCache, currentDir.path, search);\n                }\n                return search();\n            }\n            return this.config.transform(null);\n        };\n        if (this.searchCache) {\n            return (0, util_js_1.emplace)(this.searchCache, from, search);\n        }\n        return search();\n    }\n    #readConfiguration(filepath, importStack = []) {\n        const contents = fs_1.default.readFileSync(filepath, 'utf8');\n        return this.toCosmiconfigResult(filepath, this.#loadConfigFileWithImports(filepath, contents, importStack));\n    }\n    #loadConfigFileWithImports(filepath, contents, importStack) {\n        const loadedContent = this.#loadConfiguration(filepath, contents);\n        if (!loadedContent || !(0, merge_1.hasOwn)(loadedContent, '$import')) {\n            return loadedContent;\n        }\n        const fileDirectory = path_1.default.dirname(filepath);\n        const { $import: imports, ...ownContent } = loadedContent;\n        const importPaths = Array.isArray(imports) ? imports : [imports];\n        const newImportStack = [...importStack, filepath];\n        this.validateImports(filepath, importPaths, newImportStack);\n        const importedConfigs = importPaths.map((importPath) => {\n            const fullPath = path_1.default.resolve(fileDirectory, importPath);\n            const result = this.#readConfiguration(fullPath, newImportStack);\n            return result?.config;\n        });\n        return (0, merge_1.mergeAll)([...importedConfigs, ownContent], {\n            mergeArrays: this.config.mergeImportArrays,\n        });\n    }\n    #loadConfiguration(filepath, contents) {\n        if (contents.trim() === '') {\n            return;\n        }\n        const extension = path_1.default.extname(filepath);\n        const loader = this.config.loaders[extension || 'noExt'] ??\n            this.config.loaders['default'];\n        if (!loader) {\n            throw new Error(`No loader specified for ${(0, ExplorerBase_js_1.getExtensionDescription)(extension)}`);\n        }\n        try {\n            const loadedContents = loader(filepath, contents);\n            if (path_1.default.basename(filepath, extension) !== 'package') {\n                return loadedContents;\n            }\n            return ((0, util_js_1.getPropertyByPath)(loadedContents, this.config.packageProp ?? this.config.moduleName) ?? null);\n        }\n        catch (error) {\n            error.filepath = filepath;\n            throw error;\n        }\n    }\n    #fileExists(path) {\n        try {\n            fs_1.default.statSync(path);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    *#getDirs(startDir) {\n        switch (this.config.searchStrategy) {\n            case 'none': {\n                // there is no next dir\n                yield { path: startDir, isGlobalConfig: false };\n                return;\n            }\n            case 'project': {\n                let currentDir = startDir;\n                while (true) {\n                    yield { path: currentDir, isGlobalConfig: false };\n                    for (const ext of ['json', 'yaml']) {\n                        const packageFile = path_1.default.join(currentDir, `package.${ext}`);\n                        if (this.#fileExists(packageFile)) {\n                            break;\n                        }\n                    }\n                    const parentDir = path_1.default.dirname(currentDir);\n                    /* istanbul ignore if -- @preserve */\n                    if (parentDir === currentDir) {\n                        // we're probably at the root of the directory structure\n                        break;\n                    }\n                    currentDir = parentDir;\n                }\n                return;\n            }\n            case 'global': {\n                yield* this.getGlobalDirs(startDir);\n            }\n        }\n    }\n    /**\n     * @deprecated Use {@link ExplorerSync.prototype.load}.\n     */\n    /* istanbul ignore next */\n    loadSync(filepath) {\n        return this.load(filepath);\n    }\n    /**\n     * @deprecated Use {@link ExplorerSync.prototype.search}.\n     */\n    /* istanbul ignore next */\n    searchSync(from = '') {\n        return this.search(from);\n    }\n}\nexports.ExplorerSync = ExplorerSync;\n//# sourceMappingURL=ExplorerSync.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultLoadersSync = exports.defaultLoaders = exports.globalConfigSearchPlacesSync = exports.globalConfigSearchPlaces = exports.getDefaultSearchPlacesSync = exports.getDefaultSearchPlaces = exports.cosmiconfigSync = exports.cosmiconfig = void 0;\nconst defaults_1 = require(\"./defaults\");\nObject.defineProperty(exports, \"defaultLoaders\", { enumerable: true, get: function () { return defaults_1.defaultLoaders; } });\nObject.defineProperty(exports, \"defaultLoadersSync\", { enumerable: true, get: function () { return defaults_1.defaultLoadersSync; } });\nObject.defineProperty(exports, \"getDefaultSearchPlaces\", { enumerable: true, get: function () { return defaults_1.getDefaultSearchPlaces; } });\nObject.defineProperty(exports, \"getDefaultSearchPlacesSync\", { enumerable: true, get: function () { return defaults_1.getDefaultSearchPlacesSync; } });\nObject.defineProperty(exports, \"globalConfigSearchPlaces\", { enumerable: true, get: function () { return defaults_1.globalConfigSearchPlaces; } });\nObject.defineProperty(exports, \"globalConfigSearchPlacesSync\", { enumerable: true, get: function () { return defaults_1.globalConfigSearchPlacesSync; } });\nconst Explorer_js_1 = require(\"./Explorer.js\");\nconst ExplorerSync_js_1 = require(\"./ExplorerSync.js\");\nconst util_1 = require(\"./util\");\nconst identity = function identity(x) {\n    return x;\n};\nfunction getUserDefinedOptionsFromMetaConfig() {\n    const metaExplorer = new ExplorerSync_js_1.ExplorerSync({\n        moduleName: 'cosmiconfig',\n        stopDir: process.cwd(),\n        searchPlaces: defaults_1.metaSearchPlaces,\n        ignoreEmptySearchPlaces: false,\n        applyPackagePropertyPathToConfiguration: true,\n        loaders: defaults_1.defaultLoaders,\n        transform: identity,\n        cache: true,\n        metaConfigFilePath: null,\n        mergeImportArrays: true,\n        mergeSearchPlaces: true,\n        searchStrategy: 'none',\n    });\n    const metaConfig = metaExplorer.search();\n    if (!metaConfig) {\n        return null;\n    }\n    if (metaConfig.config?.loaders) {\n        throw new Error('Can not specify loaders in meta config file');\n    }\n    if (metaConfig.config?.searchStrategy) {\n        throw new Error('Can not specify searchStrategy in meta config file');\n    }\n    const overrideOptions = {\n        mergeSearchPlaces: true,\n        ...(metaConfig.config ?? {}),\n    };\n    return {\n        config: (0, util_1.removeUndefinedValuesFromObject)(overrideOptions),\n        filepath: metaConfig.filepath,\n    };\n}\nfunction getResolvedSearchPlaces(moduleName, toolDefinedSearchPlaces, userConfiguredOptions) {\n    const userConfiguredSearchPlaces = userConfiguredOptions.searchPlaces?.map((path) => path.replace('{name}', moduleName));\n    if (userConfiguredOptions.mergeSearchPlaces) {\n        return [...(userConfiguredSearchPlaces ?? []), ...toolDefinedSearchPlaces];\n    }\n    return (userConfiguredSearchPlaces ??\n        /* istanbul ignore next */ toolDefinedSearchPlaces);\n}\nfunction mergeOptionsBase(moduleName, defaults, options) {\n    const userDefinedConfig = getUserDefinedOptionsFromMetaConfig();\n    if (!userDefinedConfig) {\n        return {\n            ...defaults,\n            ...(0, util_1.removeUndefinedValuesFromObject)(options),\n            loaders: {\n                ...defaults.loaders,\n                ...options.loaders,\n            },\n        };\n    }\n    const userConfiguredOptions = userDefinedConfig.config;\n    const toolDefinedSearchPlaces = options.searchPlaces ?? defaults.searchPlaces;\n    return {\n        ...defaults,\n        ...(0, util_1.removeUndefinedValuesFromObject)(options),\n        metaConfigFilePath: userDefinedConfig.filepath,\n        ...userConfiguredOptions,\n        searchPlaces: getResolvedSearchPlaces(moduleName, toolDefinedSearchPlaces, userConfiguredOptions),\n        loaders: {\n            ...defaults.loaders,\n            ...options.loaders,\n        },\n    };\n}\nfunction validateOptions(options) {\n    if (options.searchStrategy != null &&\n        options.searchStrategy !== 'global' &&\n        options.stopDir) {\n        throw new Error('Can not supply `stopDir` option with `searchStrategy` other than \"global\"');\n    }\n}\nfunction mergeOptions(moduleName, options) {\n    validateOptions(options);\n    const defaults = {\n        moduleName,\n        searchPlaces: (0, defaults_1.getDefaultSearchPlaces)(moduleName),\n        ignoreEmptySearchPlaces: true,\n        cache: true,\n        transform: identity,\n        loaders: defaults_1.defaultLoaders,\n        metaConfigFilePath: null,\n        mergeImportArrays: true,\n        mergeSearchPlaces: true,\n        searchStrategy: options.stopDir ? 'global' : 'none',\n    };\n    return mergeOptionsBase(moduleName, defaults, options);\n}\nfunction mergeOptionsSync(moduleName, options) {\n    validateOptions(options);\n    const defaults = {\n        moduleName,\n        searchPlaces: (0, defaults_1.getDefaultSearchPlacesSync)(moduleName),\n        ignoreEmptySearchPlaces: true,\n        cache: true,\n        transform: identity,\n        loaders: defaults_1.defaultLoadersSync,\n        metaConfigFilePath: null,\n        mergeImportArrays: true,\n        mergeSearchPlaces: true,\n        searchStrategy: options.stopDir ? 'global' : 'none',\n    };\n    return mergeOptionsBase(moduleName, defaults, options);\n}\nfunction cosmiconfig(moduleName, options = {}) {\n    const normalizedOptions = mergeOptions(moduleName, options);\n    const explorer = new Explorer_js_1.Explorer(normalizedOptions);\n    return {\n        search: explorer.search.bind(explorer),\n        load: explorer.load.bind(explorer),\n        clearLoadCache: explorer.clearLoadCache.bind(explorer),\n        clearSearchCache: explorer.clearSearchCache.bind(explorer),\n        clearCaches: explorer.clearCaches.bind(explorer),\n    };\n}\nexports.cosmiconfig = cosmiconfig;\nfunction cosmiconfigSync(moduleName, options = {}) {\n    const normalizedOptions = mergeOptionsSync(moduleName, options);\n    const explorerSync = new ExplorerSync_js_1.ExplorerSync(normalizedOptions);\n    return {\n        search: explorerSync.search.bind(explorerSync),\n        load: explorerSync.load.bind(explorerSync),\n        clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n        clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n        clearCaches: explorerSync.clearCaches.bind(explorerSync),\n    };\n}\nexports.cosmiconfigSync = cosmiconfigSync;\n//# sourceMappingURL=index.js.map","import path from 'node:path';\n\nexport const Logger = {\n  serverListen(port: number) {\n    console.log('');\n    console.log(`  \\x1b[1;32m${__APP_NAME__.toUpperCase()} v${__APP_VERSION__}\\x1b[0m`);\n    console.log(`  \\x1b[0;37mDemo Server\\x1b[0m http://localhost:${port}`);\n    console.log('');\n  },\n  route(method: string, url: string) {\n    console.log(`\\x1b[0;33m${method}:\\x1b[0m \\x1b[0;37m${url}\\x1b[0m`);\n  },\n  changes(file: string) {\n    console.log(`\\x1b[0;31mCHANGED:\\x1b[0m \\x1b[0;37m${file}\\x1b[0m`);\n  },\n  created(file: string) {\n    file = path.relative(process.cwd(), file);\n    const dirname = path.dirname(file);\n    const basename = path.basename(file);\n    const extname = path.extname(file);\n\n    let color: string;\n    switch (extname) {\n      case '.css':\n        color = '\\x1b[0;35m';\n        break;\n      default:\n        color = '\\x1b[0;32m';\n        break;\n    }\n\n    console.log(`\\x1b[0;37m${dirname}${path.sep}\\x1b[0m${color}${basename}\\x1b[0m`);\n  },\n  done(duration: number, count: number) {\n    console.log(`\\x1b[0;32m✓ built in ${duration}ms\\x1b[0m`);\n    console.log(`\\x1b[0;32m✓ generated ${count} icons\\x1b[0m`);\n  },\n  warn(message: string): void {\n    console.log(`\\x1b[0;93m🛆 ${message}\\x1b[0m`);\n  }\n};","import { cosmiconfig } from 'cosmiconfig';\nimport { Logger } from './logger.ts';\nimport { AppConfig, AppConfigKeys } from '../types/app-config.ts';\n\nconst FIELDS: AppConfigKeys[] = ['input', 'output', 'name', 'fontUrl', 'prefix', 'types', 'port'];\n\nconst Seeker = cosmiconfig(__APP_NAME__, {\n  searchStrategy: 'project',\n});\n\nexport async function searchConfig(cwd: string): Promise<Partial<AppConfig | undefined>> {\n  try {\n    const result = await Seeker.search(cwd);\n    return !result?.isEmpty && result?.config ? result?.config?.default : undefined;\n  } catch(error: any) {\n    Logger.warn(`Config file not found, default config will be used.`);\n    return undefined;\n  }\n}\n\nexport async function loadConfig(path: string): Promise<Partial<AppConfig | undefined>> {\n  try {\n    const result = await Seeker.load(path);\n    return !result?.isEmpty && result?.config ? result?.config?.default : undefined;\n  } catch {\n    Logger.warn(`Config file ${path} not found.`);\n    return undefined;\n  }\n}\n\nexport function mergeConfig(required: AppConfigKeys[], ..._configs: Partial<AppConfig | undefined>[]): Required<AppConfig> {\n  const configs = [..._configs].reverse();\n  const result: Partial<AppConfig> = {};\n\n  for (const key of required) {\n    for (let i = 0; i < configs.length; i++) {\n      const config = configs[i];\n\n      if (config && config?.[key] != null) {\n        result[key] = config![key] as any;\n        break;\n      }\n    }\n    if (result[key] == null && required.indexOf(key) >= 0) {\n      throw new TypeError(`no config property ${key} found.`);\n    }\n  }\n\n  return result as Required<AppConfig>;\n}","import { BufferWithMeta } from '../types/types.ts';\n\nexport function populateMetadata<Meta>(buffer: Buffer, metadata: Meta): BufferWithMeta<Meta> {\n  Object.defineProperty(buffer, 'metadata', {\n    value: Object.freeze({ ...metadata }),\n    enumerable: true,\n    writable: false,\n    configurable: false,\n  });\n  return buffer as BufferWithMeta<Meta>;\n}","export const SYMBOL_SIZE = 512;\nexport const SHAPE_SIZE = 480;\n\nexport const START_UNICODE = 0xea01;\n\nexport const LOGO_ICON =\n`<svg viewBox=\"0 0 512 512\" xmlns=\"http://www.w3.org/2000/svg\">\n  <path d=\"m399.129 273.496c22.1079-21.0975 57.0143-20.6894 78.6229 0.91917s22.0167 56.5151 0.91917 78.6229l-132.389 131.818c-5.20907 5.21063-12.2746 8.13877-19.6424 8.14036h-40.2851c-15.344 0-27.7828-12.4388-27.7828-27.7828v-40.2573c9e-3 -7.37183 2.94732-14.4379 8.16814-19.6424z\" fill=\"#0073e5\" stroke-width=\"25.4831\"/>\n  <path d=\"m137.045 15.4143c-66.8513 0-121.045 54.1937-121.045 121.045v216.912c0 66.8513 54.1937 121.045 121.045 121.045h99.8682c1.78381 0 3.23635-1.5035 3.23635-3.3128v-36.925c-3e-3 -16.8975 6.70681-33.1042 18.6536-45.0541l122.93-122.93c19.8872-19.9293 47.9775-29.3651 75.8631-25.4831 8.66425 1.22319 17.4304-4.94371 17.4304-13.7354v-90.5159c0-66.8513-54.1937-121.045-121.045-121.045zm-4.98513 135.771c0-13.6476 11.0636-24.7112 24.7112-24.7112h177.46c13.6476 0 24.7112 11.0636 24.7112 24.7112v22.1742c0.0279 23.0212-28.6677 33.5704-43.5576 16.0129-5.46941-6.45787-12.1909-13.5089-20.6256-13.5089h-8.07233c-9.0984 0-16.4741 7.37571-16.4741 16.4741v84.0181c0 8.96193 7.94054 15.947 14.9585 21.5482 18.3498 14.5428 8.02693 44.0747-15.3869 44.019h-47.9069c-23.2624-1e-3 -33.6362-29.2149-15.5846-43.8872 6.85325-5.56826 14.4973-12.4544 14.4973-21.2846v-84.3807c0-9.0984-7.37571-16.4741-16.4741-16.4741h-8.10529c-8.43477 0-15.1562 7.018-20.6256 13.4759-14.8446 17.6924-43.6858 7.08159-43.5247-16.0129z\" clip-rule=\"evenodd\" fill=\"#c64600\" fill-rule=\"evenodd\" stroke-width=\"25.4831\"/>\n  <path d=\"m193.918 140.523c-13.0736 0.01-26.1471 0.0195-39.2207 0.0293-2.39611 0.80565-4.35694 2.56337-5.96841 4.45876-1.57849 1.98331-2.23664 4.50594-2.43462 6.99188-0.35997 3.99233-0.21373 8.00984-0.28506 12.0138 0.0161 4.19558-0.31514 8.44254 0.45625 12.5926 0.32688 2.13452 1.44288 4.20766 3.34286 5.32476 2.44995 1.51631 5.35502 2.59218 8.27056 2.28589 2.66825-0.55452 4.6677-2.58918 6.63699-4.33083 3.64029-3.40632 7.16826-6.94848 11.0615-10.0712 2.74458-2.19045 5.82263-3.95782 9.13562-5.13284 3.43454-1.37054 7.10274-2.11709 10.7988-2.21436 4.2008-0.20843 8.41644-0.15777 12.6147 0.0625 6.77438 0.62639 13.1853 3.82992 18.1122 8.46399 5.29601 5.08783 8.42689 12.3615 8.37842 19.716 0.0284 23.7689-0.0313 47.5389-0.0162 71.3082-0.0284 5.60665 0.0343 11.2181-0.16828 16.8209-0.41474 5.77723-2.33514 11.4826-5.7902 16.1583-2.16774 3.30523-4.89035 6.23665-8.03319 8.63413-2.97141 2.55825-6.41576 4.76917-8.5024 8.17783-2.31941 4.26262-1.62116 10.1426 2.117 13.3881 1.99451 1.87975 4.65403 3.01266 7.39855 3.09246 5.88665 0.30426 11.7869 0.15882 17.6791 0.12407 8.17952-0.15812 16.3611 0.0516 24.5402-0.10271 1.54399-0.0515 2.8765-0.10236 4.42114-0.21629 1.5309-0.11959 3.08628-0.21039 4.62314-0.68268 1.83826-0.49552 3.38964-1.63166 4.79544-2.88948 1.23267-1.10292 1.93703-2.04516 2.46564-3.91802 0.62675-2.22057 0.51726-5.45378-0.4054-7.38341-1.42897-2.98852-4.82902-5.9418-6.76839-7.7659-4.65484-4.06965-8.45751-5.97767-11.7532-11.3208-3.1234-4.95944-4.96535-10.7273-5.20035-16.5894-0.29927-5.71053-0.0762-11.4326-0.0912-17.148 0.11388-21.819-0.0208-43.6387 0.0883-65.4576 0.10697-6.05813 0.76975-12.3737 3.88719-17.7027 1.64766-2.75659 3.68379-5.29802 6.03355-7.48699 3.63711-3.16916 8.1378-5.20656 12.7374-6.54528 5.55298-1.55816 11.4027-1.63966 17.1029-1.01458 4.99676 0.53143 10.0723 1.57729 14.4721 4.10257 2.94064 1.81605 5.54395 4.1173 8.16969 6.3503 2.99377 2.58274 5.76843 5.40187 8.5305 8.22632 1.20914 1.12647 2.42774 2.38818 4.00937 2.95981 2.08313 0.49874 4.26749 0.18619 6.34225-0.19327 2.03101-0.51741 3.56528-2.03915 4.81672-3.63997 0.96788-1.09636 1.58161-2.4632 1.72388-3.91937 0.73497-4.54241 0.62019-9.16571 0.71737-13.7521 0.0147-4.04295 0.10261-8.10151-0.27596-12.1303-0.29954-2.3782-1.08888-4.86362-3.00762-6.43345-1.94871-2.02297-4.68626-3.44015-7.55153-3.23473-46.6688-0.0298-93.3378-0.0297-140.007-6e-3z\" fill=\"#fff8f4\" style=\"paint-order:fill markers stroke\"/>\n</svg>`;","import { SymbolMetadata } from '../types/types.ts';\nimport { readdir } from 'node:fs/promises';\nimport { extname, join } from 'node:path';\nimport { SHAPE_SIZE, START_UNICODE, SYMBOL_SIZE } from './constants.ts';\n\nconst testExpression = /(^|\\/|\\\\)(?:((?:u[0-9a-f]{4,6},?)+)-)(.+)\\.svg$/i;\n\nexport function compareFiles(fileA: string, fileB: string): -1 | 0 | 1 {\n  const hasUnicodeA = testExpression.test(fileA);\n  const hasUnicodeB = testExpression.test(fileB);\n\n  if (hasUnicodeA == hasUnicodeB) {\n    // just compare alphabetically\n    const fileA_ = fileA.slice(0, fileA.lastIndexOf('.'));\n    const fileB_ = fileB.slice(0, fileB.lastIndexOf('.'));\n    return fileA_ < fileB_ ? -1 : 1;\n  } else {\n    // map true to 0, because we want it to be first\n    return ((hasUnicodeA ? 0 : 1) - (hasUnicodeB ? 0 : 1)) as -1 | 0 | 1;\n  }\n}\n\nexport async function readFiles(path: string, ext = 'svg'): Promise<SymbolMetadata[]> {\n  const files = await readdir(path, { encoding: 'utf8' });\n  let index = 0;\n\n  files.sort(compareFiles);\n\n  return files.reduce<SymbolMetadata[]>((acc, filename) => {\n    if (filename.endsWith(`.${ext}`)) {\n      const name = filename.replace(extname(filename), '');\n      const id = `${name}${(0 === index ? '' : '-' + index)}`;\n      const code = START_UNICODE + index;\n      const unicode = `&#x${(code).toString(16).toUpperCase()};`;\n\n      acc.push({\n        id: id,\n        name: name,\n        code: code,\n        unicode: unicode,\n        file: join(path, filename),\n        size: SYMBOL_SIZE,\n        padding: (SYMBOL_SIZE - SHAPE_SIZE) / 2\n      });\n\n      index++;\n    }\n\n    return acc;\n  }, []);\n}","import { readdir } from 'node:fs/promises';\nimport { extname, join } from 'node:path';\nimport { FileMetadata } from '../../types/types.ts';\nimport { Readable } from 'node:stream';\nimport fs from 'node:fs';\nimport { populateMetadata } from '../../utils/populate-metadata.ts';\nimport { compareFiles } from '../../utils/read-files.ts';\n\nexport class StreamRead extends Readable {\n\n  private readonly _input: string;\n\n  private _files?: Promise<FileMetadata[]>;\n\n  private _fileIndex = 0;\n\n  constructor(input: string) {\n    super({ objectMode: true });\n    this._input = input;\n  }\n\n  async _getIcons(): Promise<FileMetadata[]> {\n    if (!this._files) {\n      this._files = readdir(this._input, { encoding: 'utf8' })\n        .then(files => files.sort(compareFiles))\n        .then(files => {\n          let index = 0;\n          return files.reduce<FileMetadata[]>((acc, filename) => {\n            if (filename.endsWith(`.svg`)) {\n              acc.push({\n                name: filename.replace(extname(filename), ''),\n                index: index,\n                file: join(this._input, filename),\n              });\n              index++;\n            }\n\n            return acc;\n          }, []);\n        });\n    }\n    return this._files;\n  }\n\n  async _read() {\n    const files = await this._getIcons();\n    const file = files[this._fileIndex];\n    if (!file) {\n      return this.push(null);\n    }\n\n    fs.readFile(file.file, (error, buffer: Buffer) => {\n      if (error) {\n        return this.destroy(error);\n      }\n\n      this.push(populateMetadata(buffer, file));\n      this._fileIndex++;\n    });\n  }\n}","export default new Proxy({}, {\n  get(_, key) {\n    throw new Error(`Module \"stream\" has been externalized for browser compatibility. Cannot access \"stream.${key}\" in client code.  See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n  }\n})","export default new Proxy({}, {\n  get(_, key) {\n    throw new Error(`Module \"string_decoder\" has been externalized for browser compatibility. Cannot access \"string_decoder.${key}\" in client code.  See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n  }\n})",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // disallow unquoted attribute values if not otherwise configured\n    // and strict mode is true\n    if (parser.opt.unquotedAttributeValues === undefined) {\n      parser.opt.unquotedAttributeValues = !strict;\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n  if (!Stream) Stream = function () {}\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n            continue;\n          }\n\n          if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {\n            parser.state = S.DOCTYPE_DTD\n            parser.doctype += '<!' + parser.sgmlDecl + c\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          if (c === ']') {\n            parser.doctype += c\n            parser.state = S.DOCTYPE\n          } else if (c === '<') {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else if (isQuote(c)) {\n            parser.doctype += c\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          } else {\n            parser.doctype += c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else if (parser.doctype && parser.doctype !== true) {\n            parser.state = S.DOCTYPE_DTD\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            if (!parser.opt.unquotedAttributeValues) {\n              error(parser, 'Unquoted attribute value')\n            }\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            var parsedEntity = parseEntity(parser)\n            if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {\n              parser.entity = ''\n              parser.state = returnState\n              parser.write(parsedEntity)\n            } else {\n              parser[buffer] += parsedEntity\n              parser.entity = ''\n              parser.state = returnState\n            }\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default: /* istanbul ignore next */ {\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n        }\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","import { SVGPathData } from './SVGPathData.js';\n// Encode SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\n// Private consts : Char groups\nconst WSP = ' ';\nexport function encodeSVGPath(commands) {\n    let str = '';\n    if (!Array.isArray(commands)) {\n        commands = [commands];\n    }\n    for (let i = 0; i < commands.length; i++) {\n        const command = commands[i];\n        if (command.type === SVGPathData.CLOSE_PATH) {\n            str += 'z';\n        }\n        else if (command.type === SVGPathData.HORIZ_LINE_TO) {\n            str += (command.relative ? 'h' : 'H') + command.x;\n        }\n        else if (command.type === SVGPathData.VERT_LINE_TO) {\n            str += (command.relative ? 'v' : 'V') + command.y;\n        }\n        else if (command.type === SVGPathData.MOVE_TO) {\n            str += (command.relative ? 'm' : 'M') + command.x + WSP + command.y;\n        }\n        else if (command.type === SVGPathData.LINE_TO) {\n            str += (command.relative ? 'l' : 'L') + command.x + WSP + command.y;\n        }\n        else if (command.type === SVGPathData.CURVE_TO) {\n            str +=\n                (command.relative ? 'c' : 'C') +\n                    command.x1 +\n                    WSP +\n                    command.y1 +\n                    WSP +\n                    command.x2 +\n                    WSP +\n                    command.y2 +\n                    WSP +\n                    command.x +\n                    WSP +\n                    command.y;\n        }\n        else if (command.type === SVGPathData.SMOOTH_CURVE_TO) {\n            str +=\n                (command.relative ? 's' : 'S') +\n                    command.x2 +\n                    WSP +\n                    command.y2 +\n                    WSP +\n                    command.x +\n                    WSP +\n                    command.y;\n        }\n        else if (command.type === SVGPathData.QUAD_TO) {\n            str +=\n                (command.relative ? 'q' : 'Q') +\n                    command.x1 +\n                    WSP +\n                    command.y1 +\n                    WSP +\n                    command.x +\n                    WSP +\n                    command.y;\n        }\n        else if (command.type === SVGPathData.SMOOTH_QUAD_TO) {\n            str += (command.relative ? 't' : 'T') + command.x + WSP + command.y;\n        }\n        else if (command.type === SVGPathData.ARC) {\n            str +=\n                (command.relative ? 'a' : 'A') +\n                    command.rX +\n                    WSP +\n                    command.rY +\n                    WSP +\n                    command.xRot +\n                    WSP +\n                    +command.lArcFlag +\n                    WSP +\n                    +command.sweepFlag +\n                    WSP +\n                    command.x +\n                    WSP +\n                    command.y;\n        }\n        else {\n            // Unknown command\n            throw new Error(`Unexpected command type \"${command?.type}\" at index ${i}.`);\n        }\n    }\n    return str;\n}\n//# sourceMappingURL=SVGPathDataEncoder.js.map","import { SVGPathData } from './SVGPathData.js';\nexport function rotate([x, y], rad) {\n    return [\n        x * Math.cos(rad) - y * Math.sin(rad),\n        x * Math.sin(rad) + y * Math.cos(rad),\n    ];\n}\nconst DEBUG_CHECK_NUMBERS = true;\nexport function assertNumbers(...numbers) {\n    if (DEBUG_CHECK_NUMBERS) {\n        for (let i = 0; i < numbers.length; i++) {\n            if ('number' !== typeof numbers[i]) {\n                throw new Error(`assertNumbers arguments[${i}] is not a number. ${typeof numbers[i]} == typeof ${numbers[i]}`);\n            }\n        }\n    }\n    return true;\n}\nconst PI = Math.PI;\n/**\n * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n * Fixes rX and rY.\n * Ensures lArcFlag and sweepFlag are 0 or 1\n * Adds center coordinates: command.cX, command.cY (relative or absolute, depending on command.relative)\n * Adds start and end arc parameters (in degrees): command.phi1, command.phi2; phi1 < phi2 iff. c.sweepFlag == true\n */\nexport function annotateArcCommand(c, x1, y1) {\n    c.lArcFlag = 0 === c.lArcFlag ? 0 : 1;\n    c.sweepFlag = 0 === c.sweepFlag ? 0 : 1;\n    // tslint:disable-next-line\n    let { rX, rY } = c;\n    const { x, y } = c;\n    rX = Math.abs(c.rX);\n    rY = Math.abs(c.rY);\n    const [x1_, y1_] = rotate([(x1 - x) / 2, (y1 - y) / 2], (-c.xRot / 180) * PI);\n    const testValue = Math.pow(x1_, 2) / Math.pow(rX, 2) + Math.pow(y1_, 2) / Math.pow(rY, 2);\n    if (1 < testValue) {\n        rX *= Math.sqrt(testValue);\n        rY *= Math.sqrt(testValue);\n    }\n    c.rX = rX;\n    c.rY = rY;\n    const c_ScaleTemp = Math.pow(rX, 2) * Math.pow(y1_, 2) + Math.pow(rY, 2) * Math.pow(x1_, 2);\n    const c_Scale = (c.lArcFlag !== c.sweepFlag ? 1 : -1) *\n        Math.sqrt(Math.max(0, (Math.pow(rX, 2) * Math.pow(rY, 2) - c_ScaleTemp) / c_ScaleTemp));\n    const cx_ = ((rX * y1_) / rY) * c_Scale;\n    const cy_ = ((-rY * x1_) / rX) * c_Scale;\n    const cRot = rotate([cx_, cy_], (c.xRot / 180) * PI);\n    c.cX = cRot[0] + (x1 + x) / 2;\n    c.cY = cRot[1] + (y1 + y) / 2;\n    c.phi1 = Math.atan2((y1_ - cy_) / rY, (x1_ - cx_) / rX);\n    c.phi2 = Math.atan2((-y1_ - cy_) / rY, (-x1_ - cx_) / rX);\n    if (0 === c.sweepFlag && c.phi2 > c.phi1) {\n        c.phi2 -= 2 * PI;\n    }\n    if (1 === c.sweepFlag && c.phi2 < c.phi1) {\n        c.phi2 += 2 * PI;\n    }\n    c.phi1 *= 180 / PI;\n    c.phi2 *= 180 / PI;\n}\n/**\n * Solves a quadratic system of equations of the form\n *      a * x + b * y = c\n *      x² + y² = 1\n * This can be understood as the intersection of the unit circle with a line.\n *      => y = (c - a x) / b\n *      => x² + (c - a x)² / b² = 1\n *      => x² b² + c² - 2 c a x + a² x² = b²\n *      => (a² + b²) x² - 2 a c x + (c² - b²) = 0\n */\nexport function intersectionUnitCircleLine(a, b, c) {\n    assertNumbers(a, b, c);\n    // cf. pqFormula\n    const termSqr = a * a + b * b - c * c;\n    if (0 > termSqr) {\n        return [];\n    }\n    else if (0 === termSqr) {\n        return [[(a * c) / (a * a + b * b), (b * c) / (a * a + b * b)]];\n    }\n    const term = Math.sqrt(termSqr);\n    return [\n        [\n            (a * c + b * term) / (a * a + b * b),\n            (b * c - a * term) / (a * a + b * b),\n        ],\n        [\n            (a * c - b * term) / (a * a + b * b),\n            (b * c + a * term) / (a * a + b * b),\n        ],\n    ];\n}\nexport const DEG = Math.PI / 180;\nexport function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n}\nexport function arcAt(c, x1, x2, phiDeg) {\n    return (c + Math.cos((phiDeg / 180) * PI) * x1 + Math.sin((phiDeg / 180) * PI) * x2);\n}\nexport function bezierRoot(x0, x1, x2, x3) {\n    const EPS = 1e-6;\n    const x01 = x1 - x0;\n    const x12 = x2 - x1;\n    const x23 = x3 - x2;\n    const a = 3 * x01 + 3 * x23 - 6 * x12;\n    const b = (x12 - x01) * 6;\n    const c = 3 * x01;\n    // solve a * t² + b * t + c = 0\n    if (Math.abs(a) < EPS) {\n        // equivalent to b * t + c =>\n        return [-c / b];\n    }\n    return pqFormula(b / a, c / a, EPS);\n}\nexport function bezierAt(x0, x1, x2, x3, t) {\n    // console.log(x0, y0, x1, y1, x2, y2, x3, y3, t)\n    const s = 1 - t;\n    const c0 = s * s * s;\n    const c1 = 3 * s * s * t;\n    const c2 = 3 * s * t * t;\n    const c3 = t * t * t;\n    return x0 * c0 + x1 * c1 + x2 * c2 + x3 * c3;\n}\nfunction pqFormula(p, q, PRECISION = 1e-6) {\n    // 4 times the discriminant:in\n    const discriminantX4 = (p * p) / 4 - q;\n    if (discriminantX4 < -PRECISION) {\n        return [];\n    }\n    else if (discriminantX4 <= PRECISION) {\n        return [-p / 2];\n    }\n    const root = Math.sqrt(discriminantX4);\n    return [-(p / 2) - root, -(p / 2) + root];\n}\nexport function a2c(arc, x0, y0) {\n    if (!arc.cX) {\n        annotateArcCommand(arc, x0, y0);\n    }\n    const phiMin = Math.min(arc.phi1, arc.phi2), phiMax = Math.max(arc.phi1, arc.phi2), deltaPhi = phiMax - phiMin;\n    const partCount = Math.ceil(deltaPhi / 90);\n    const result = new Array(partCount);\n    let prevX = x0, prevY = y0;\n    for (let i = 0; i < partCount; i++) {\n        const phiStart = lerp(arc.phi1, arc.phi2, i / partCount);\n        const phiEnd = lerp(arc.phi1, arc.phi2, (i + 1) / partCount);\n        const deltaPhi = phiEnd - phiStart;\n        const f = (4 / 3) * Math.tan((deltaPhi * DEG) / 4);\n        // x1/y1, x2/y2 and x/y coordinates on the unit circle for phiStart/phiEnd\n        const [x1, y1] = [\n            Math.cos(phiStart * DEG) - f * Math.sin(phiStart * DEG),\n            Math.sin(phiStart * DEG) + f * Math.cos(phiStart * DEG),\n        ];\n        const [x, y] = [Math.cos(phiEnd * DEG), Math.sin(phiEnd * DEG)];\n        const [x2, y2] = [\n            x + f * Math.sin(phiEnd * DEG),\n            y - f * Math.cos(phiEnd * DEG),\n        ];\n        const command = {\n            relative: arc.relative,\n            type: SVGPathData.CURVE_TO,\n        };\n        const transform = (x, y) => {\n            const [xTemp, yTemp] = rotate([x * arc.rX, y * arc.rY], arc.xRot);\n            return [arc.cX + xTemp, arc.cY + yTemp];\n        };\n        [command.x1, command.y1] = transform(x1, y1);\n        [command.x2, command.y2] = transform(x2, y2);\n        [command.x, command.y] = transform(x, y);\n        if (arc.relative) {\n            command.x1 -= prevX;\n            command.y1 -= prevY;\n            command.x2 -= prevX;\n            command.y2 -= prevY;\n            command.x -= prevX;\n            command.y -= prevY;\n        }\n        [prevX, prevY] = [command.x, command.y];\n        result[i] = command;\n    }\n    return result;\n}\n//# sourceMappingURL=mathUtils.js.map","/* eslint @typescript-eslint/no-explicit-any:0 */\n// Transform SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\nimport { a2c, annotateArcCommand, arcAt, assertNumbers, bezierAt, bezierRoot, intersectionUnitCircleLine, } from './mathUtils.js';\nimport { SVGPathData } from './SVGPathData.js';\n// Predefined transforming functions\n// Rounds commands values\nfunction ROUND(roundVal = 1e13) {\n    assertNumbers(roundVal);\n    function rf(val) {\n        return Math.round(val * roundVal) / roundVal;\n    }\n    return function round(command) {\n        if ('x1' in command && 'undefined' !== typeof command.x1) {\n            command.x1 = rf(command.x1);\n        }\n        if ('y1' in command && 'undefined' !== typeof command.y1) {\n            command.y1 = rf(command.y1);\n        }\n        if ('x2' in command && 'undefined' !== typeof command.x2) {\n            command.x2 = rf(command.x2);\n        }\n        if ('y2' in command && 'undefined' !== typeof command.y2) {\n            command.y2 = rf(command.y2);\n        }\n        if ('x' in command && 'undefined' !== typeof command.x) {\n            command.x = rf(command.x);\n        }\n        if ('y' in command && 'undefined' !== typeof command.y) {\n            command.y = rf(command.y);\n        }\n        if ('rX' in command && 'undefined' !== typeof command.rX) {\n            command.rX = rf(command.rX);\n        }\n        if ('rY' in command && 'undefined' !== typeof command.rY) {\n            command.rY = rf(command.rY);\n        }\n        return command;\n    };\n}\n// Relative to absolute commands\nfunction TO_ABS() {\n    return INFO((command, prevX, prevY) => {\n        if (command.relative) {\n            // x1/y1 values\n            if ('undefined' !== typeof command.x1) {\n                command.x1 += prevX;\n            }\n            if ('undefined' !== typeof command.y1) {\n                command.y1 += prevY;\n            }\n            // x2/y2 values\n            if ('undefined' !== typeof command.x2) {\n                command.x2 += prevX;\n            }\n            if ('undefined' !== typeof command.y2) {\n                command.y2 += prevY;\n            }\n            // Finally x/y values\n            if ('undefined' !== typeof command.x) {\n                command.x += prevX;\n            }\n            if ('undefined' !== typeof command.y) {\n                command.y += prevY;\n            }\n            command.relative = false;\n        }\n        return command;\n    });\n}\n// Absolute to relative commands\nfunction TO_REL() {\n    return INFO((command, prevX, prevY) => {\n        if (!command.relative) {\n            // x1/y1 values\n            if ('undefined' !== typeof command.x1) {\n                command.x1 -= prevX;\n            }\n            if ('undefined' !== typeof command.y1) {\n                command.y1 -= prevY;\n            }\n            // x2/y2 values\n            if ('undefined' !== typeof command.x2) {\n                command.x2 -= prevX;\n            }\n            if ('undefined' !== typeof command.y2) {\n                command.y2 -= prevY;\n            }\n            // Finally x/y values\n            if ('undefined' !== typeof command.x) {\n                command.x -= prevX;\n            }\n            if ('undefined' !== typeof command.y) {\n                command.y -= prevY;\n            }\n            command.relative = true;\n        }\n        return command;\n    });\n}\n// Convert H, V, Z and A with rX = 0 to L\nfunction NORMALIZE_HVZ(normalizeZ = true, normalizeH = true, normalizeV = true) {\n    return INFO((command, prevX, prevY, pathStartX, pathStartY) => {\n        if (isNaN(pathStartX) && !(command.type & SVGPathData.MOVE_TO)) {\n            throw new Error('path must start with moveto');\n        }\n        if (normalizeH && command.type & SVGPathData.HORIZ_LINE_TO) {\n            command.type = SVGPathData.LINE_TO;\n            command.y = command.relative ? 0 : prevY;\n        }\n        if (normalizeV && command.type & SVGPathData.VERT_LINE_TO) {\n            command.type = SVGPathData.LINE_TO;\n            command.x = command.relative ? 0 : prevX;\n        }\n        if (normalizeZ && command.type & SVGPathData.CLOSE_PATH) {\n            command.type = SVGPathData.LINE_TO;\n            command.x = command.relative ? pathStartX - prevX : pathStartX;\n            command.y = command.relative ? pathStartY - prevY : pathStartY;\n        }\n        if (command.type & SVGPathData.ARC &&\n            (0 === command.rX || 0 === command.rY)) {\n            command.type = SVGPathData.LINE_TO;\n            delete command.rX;\n            delete command.rY;\n            delete command.xRot;\n            delete command.lArcFlag;\n            delete command.sweepFlag;\n        }\n        return command;\n    });\n}\n/*\n * Transforms smooth curves and quads to normal curves and quads (SsTt to CcQq)\n */\nfunction NORMALIZE_ST() {\n    let prevCurveC2X = NaN;\n    let prevCurveC2Y = NaN;\n    let prevQuadCX = NaN;\n    let prevQuadCY = NaN;\n    return INFO((command, prevX, prevY) => {\n        if (command.type & SVGPathData.SMOOTH_CURVE_TO) {\n            command.type = SVGPathData.CURVE_TO;\n            prevCurveC2X = isNaN(prevCurveC2X) ? prevX : prevCurveC2X;\n            prevCurveC2Y = isNaN(prevCurveC2Y) ? prevY : prevCurveC2Y;\n            command.x1 = command.relative\n                ? prevX - prevCurveC2X\n                : 2 * prevX - prevCurveC2X;\n            command.y1 = command.relative\n                ? prevY - prevCurveC2Y\n                : 2 * prevY - prevCurveC2Y;\n        }\n        if (command.type & SVGPathData.CURVE_TO) {\n            prevCurveC2X = command.relative ? prevX + command.x2 : command.x2;\n            prevCurveC2Y = command.relative ? prevY + command.y2 : command.y2;\n        }\n        else {\n            prevCurveC2X = NaN;\n            prevCurveC2Y = NaN;\n        }\n        if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n            command.type = SVGPathData.QUAD_TO;\n            prevQuadCX = isNaN(prevQuadCX) ? prevX : prevQuadCX;\n            prevQuadCY = isNaN(prevQuadCY) ? prevY : prevQuadCY;\n            command.x1 = command.relative\n                ? prevX - prevQuadCX\n                : 2 * prevX - prevQuadCX;\n            command.y1 = command.relative\n                ? prevY - prevQuadCY\n                : 2 * prevY - prevQuadCY;\n        }\n        if (command.type & SVGPathData.QUAD_TO) {\n            prevQuadCX = command.relative ? prevX + command.x1 : command.x1;\n            prevQuadCY = command.relative ? prevY + command.y1 : command.y1;\n        }\n        else {\n            prevQuadCX = NaN;\n            prevQuadCY = NaN;\n        }\n        return command;\n    });\n}\n/*\n * A quadratic bézier curve can be represented by a cubic bézier curve which has\n * the same end points as the quadratic and both control points in place of the\n * quadratic\"s one.\n *\n * This transformer replaces QqTt commands with Cc commands respectively.\n * This is useful for reading path data into a system which only has a\n * representation for cubic curves.\n */\nfunction QT_TO_C() {\n    let prevQuadX1 = NaN;\n    let prevQuadY1 = NaN;\n    return INFO((command, prevX, prevY) => {\n        if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n            command.type = SVGPathData.QUAD_TO;\n            prevQuadX1 = isNaN(prevQuadX1) ? prevX : prevQuadX1;\n            prevQuadY1 = isNaN(prevQuadY1) ? prevY : prevQuadY1;\n            command.x1 = command.relative\n                ? prevX - prevQuadX1\n                : 2 * prevX - prevQuadX1;\n            command.y1 = command.relative\n                ? prevY - prevQuadY1\n                : 2 * prevY - prevQuadY1;\n        }\n        if (command.type & SVGPathData.QUAD_TO) {\n            prevQuadX1 = command.relative ? prevX + command.x1 : command.x1;\n            prevQuadY1 = command.relative ? prevY + command.y1 : command.y1;\n            const x1 = command.x1;\n            const y1 = command.y1;\n            command.type = SVGPathData.CURVE_TO;\n            command.x1 = ((command.relative ? 0 : prevX) + x1 * 2) / 3;\n            command.y1 = ((command.relative ? 0 : prevY) + y1 * 2) / 3;\n            command.x2 = (command.x + x1 * 2) / 3;\n            command.y2 = (command.y + y1 * 2) / 3;\n        }\n        else {\n            prevQuadX1 = NaN;\n            prevQuadY1 = NaN;\n        }\n        return command;\n    });\n}\nfunction INFO(f) {\n    let prevXAbs = 0;\n    let prevYAbs = 0;\n    let pathStartXAbs = NaN;\n    let pathStartYAbs = NaN;\n    return function transform(command) {\n        if (isNaN(pathStartXAbs) && !(command.type & SVGPathData.MOVE_TO)) {\n            throw new Error('path must start with moveto');\n        }\n        const result = f(command, prevXAbs, prevYAbs, pathStartXAbs, pathStartYAbs);\n        if (command.type & SVGPathData.CLOSE_PATH) {\n            prevXAbs = pathStartXAbs;\n            prevYAbs = pathStartYAbs;\n        }\n        if ('x' in command && 'undefined' !== typeof command.x) {\n            prevXAbs = command.relative ? prevXAbs + command.x : command.x;\n        }\n        if ('y' in command && 'undefined' !== typeof command.y) {\n            prevYAbs = command.relative ? prevYAbs + command.y : command.y;\n        }\n        if (command.type & SVGPathData.MOVE_TO) {\n            pathStartXAbs = prevXAbs;\n            pathStartYAbs = prevYAbs;\n        }\n        return result;\n    };\n}\n/*\n * remove 0-length segments\n */\nfunction SANITIZE(EPS = 0) {\n    assertNumbers(EPS);\n    let prevCurveC2X = NaN;\n    let prevCurveC2Y = NaN;\n    let prevQuadCX = NaN;\n    let prevQuadCY = NaN;\n    return INFO((command, prevX, prevY, pathStartX, pathStartY) => {\n        const abs = Math.abs;\n        let skip = false;\n        let x1Rel = 0;\n        let y1Rel = 0;\n        if (command.type & SVGPathData.SMOOTH_CURVE_TO) {\n            x1Rel = isNaN(prevCurveC2X) ? 0 : prevX - prevCurveC2X;\n            y1Rel = isNaN(prevCurveC2Y) ? 0 : prevY - prevCurveC2Y;\n        }\n        if (command.type & (SVGPathData.CURVE_TO | SVGPathData.SMOOTH_CURVE_TO)) {\n            prevCurveC2X = command.relative ? prevX + command.x2 : command.x2;\n            prevCurveC2Y = command.relative ? prevY + command.y2 : command.y2;\n        }\n        else {\n            prevCurveC2X = NaN;\n            prevCurveC2Y = NaN;\n        }\n        if (command.type & SVGPathData.SMOOTH_QUAD_TO) {\n            prevQuadCX = isNaN(prevQuadCX) ? prevX : 2 * prevX - prevQuadCX;\n            prevQuadCY = isNaN(prevQuadCY) ? prevY : 2 * prevY - prevQuadCY;\n        }\n        else if (command.type & SVGPathData.QUAD_TO) {\n            prevQuadCX = command.relative ? prevX + command.x1 : command.x1;\n            prevQuadCY = command.relative ? prevY + command.y1 : command.y2;\n        }\n        else {\n            prevQuadCX = NaN;\n            prevQuadCY = NaN;\n        }\n        if (command.type & SVGPathData.LINE_COMMANDS ||\n            (command.type & SVGPathData.ARC &&\n                (0 === command.rX || 0 === command.rY || !command.lArcFlag)) ||\n            command.type & SVGPathData.CURVE_TO ||\n            command.type & SVGPathData.SMOOTH_CURVE_TO ||\n            command.type & SVGPathData.QUAD_TO ||\n            command.type & SVGPathData.SMOOTH_QUAD_TO) {\n            const xRel = 'undefined' === typeof command.x\n                ? 0\n                : command.relative\n                    ? command.x\n                    : command.x - prevX;\n            const yRel = 'undefined' === typeof command.y\n                ? 0\n                : command.relative\n                    ? command.y\n                    : command.y - prevY;\n            x1Rel = !isNaN(prevQuadCX)\n                ? prevQuadCX - prevX\n                : 'undefined' === typeof command.x1\n                    ? x1Rel\n                    : command.relative\n                        ? command.x\n                        : command.x1 - prevX;\n            y1Rel = !isNaN(prevQuadCY)\n                ? prevQuadCY - prevY\n                : 'undefined' === typeof command.y1\n                    ? y1Rel\n                    : command.relative\n                        ? command.y\n                        : command.y1 - prevY;\n            const x2Rel = 'undefined' === typeof command.x2\n                ? 0\n                : command.relative\n                    ? command.x\n                    : command.x2 - prevX;\n            const y2Rel = 'undefined' === typeof command.y2\n                ? 0\n                : command.relative\n                    ? command.y\n                    : command.y2 - prevY;\n            if (abs(xRel) <= EPS &&\n                abs(yRel) <= EPS &&\n                abs(x1Rel) <= EPS &&\n                abs(y1Rel) <= EPS &&\n                abs(x2Rel) <= EPS &&\n                abs(y2Rel) <= EPS) {\n                skip = true;\n            }\n        }\n        if (command.type & SVGPathData.CLOSE_PATH) {\n            if (abs(prevX - pathStartX) <= EPS && abs(prevY - pathStartY) <= EPS) {\n                skip = true;\n            }\n        }\n        return skip ? [] : command;\n    });\n}\n// SVG Transforms : http://www.w3.org/TR/SVGTiny12/coords.html#TransformList\n// Matrix : http://apike.ca/prog_svg_transform.html\n// a c e\n// b d f\nfunction MATRIX(a, b, c, d, e, f) {\n    assertNumbers(a, b, c, d, e, f);\n    return INFO((command, prevX, prevY, pathStartX) => {\n        const origX1 = command.x1;\n        const origX2 = command.x2;\n        // if isNaN(pathStartX), then this is the first command, which is ALWAYS an\n        // absolute MOVE_TO, regardless what the relative flag says\n        const comRel = command.relative && !isNaN(pathStartX);\n        const x = 'undefined' !== typeof command.x ? command.x : comRel ? 0 : prevX;\n        const y = 'undefined' !== typeof command.y ? command.y : comRel ? 0 : prevY;\n        if (command.type & SVGPathData.HORIZ_LINE_TO && 0 !== b) {\n            command.type = SVGPathData.LINE_TO;\n            command.y = command.relative ? 0 : prevY;\n        }\n        if (command.type & SVGPathData.VERT_LINE_TO && 0 !== c) {\n            command.type = SVGPathData.LINE_TO;\n            command.x = command.relative ? 0 : prevX;\n        }\n        if ('undefined' !== typeof command.x) {\n            command.x = command.x * a + y * c + (comRel ? 0 : e);\n        }\n        if ('undefined' !== typeof command.y) {\n            command.y = x * b + command.y * d + (comRel ? 0 : f);\n        }\n        if ('undefined' !== typeof command.x1) {\n            command.x1 = command.x1 * a + command.y1 * c + (comRel ? 0 : e);\n        }\n        if ('undefined' !== typeof command.y1) {\n            command.y1 = origX1 * b + command.y1 * d + (comRel ? 0 : f);\n        }\n        if ('undefined' !== typeof command.x2) {\n            command.x2 = command.x2 * a + command.y2 * c + (comRel ? 0 : e);\n        }\n        if ('undefined' !== typeof command.y2) {\n            command.y2 = origX2 * b + command.y2 * d + (comRel ? 0 : f);\n        }\n        function sqr(x) {\n            return x * x;\n        }\n        const det = a * d - b * c;\n        if ('undefined' !== typeof command.xRot) {\n            // Skip if this is a pure translation\n            if (1 !== a || 0 !== b || 0 !== c || 1 !== d) {\n                // Special case for singular matrix\n                if (0 === det) {\n                    // In the singular case, the arc is compressed to a line. The actual geometric image of the original\n                    // curve under this transform possibly extends beyond the starting and/or ending points of the segment, but\n                    // for simplicity we ignore this detail and just replace this command with a single line segment.\n                    delete command.rX;\n                    delete command.rY;\n                    delete command.xRot;\n                    delete command.lArcFlag;\n                    delete command.sweepFlag;\n                    command.type = SVGPathData.LINE_TO;\n                }\n                else {\n                    // Convert to radians\n                    const xRot = (command.xRot * Math.PI) / 180;\n                    // Convert rotated ellipse to general conic form\n                    // x0^2/rX^2 + y0^2/rY^2 - 1 = 0\n                    // x0 = x*cos(xRot) + y*sin(xRot)\n                    // y0 = -x*sin(xRot) + y*cos(xRot)\n                    // --> A*x^2 + B*x*y + C*y^2 - 1 = 0, where\n                    const sinRot = Math.sin(xRot);\n                    const cosRot = Math.cos(xRot);\n                    const xCurve = 1 / sqr(command.rX);\n                    const yCurve = 1 / sqr(command.rY);\n                    const A = sqr(cosRot) * xCurve + sqr(sinRot) * yCurve;\n                    const B = 2 * sinRot * cosRot * (xCurve - yCurve);\n                    const C = sqr(sinRot) * xCurve + sqr(cosRot) * yCurve;\n                    // Apply matrix to A*x^2 + B*x*y + C*y^2 - 1 = 0\n                    // x1 = a*x + c*y\n                    // y1 = b*x + d*y\n                    //      (we can ignore e and f, since pure translations don\"t affect the shape of the ellipse)\n                    // --> A1*x1^2 + B1*x1*y1 + C1*y1^2 - det^2 = 0, where\n                    const A1 = A * d * d - B * b * d + C * b * b;\n                    const B1 = B * (a * d + b * c) - 2 * (A * c * d + C * a * b);\n                    const C1 = A * c * c - B * a * c + C * a * a;\n                    // Unapply newXRot to get back to axis-aligned ellipse equation\n                    // x1 = x2*cos(newXRot) - y2*sin(newXRot)\n                    // y1 = x2*sin(newXRot) + y2*cos(newXRot)\n                    // A1*x1^2 + B1*x1*y1 + C1*y1^2 - det^2 =\n                    //   x2^2*(A1*cos(newXRot)^2 + B1*sin(newXRot)*cos(newXRot) + C1*sin(newXRot)^2)\n                    //   + x2*y2*(2*(C1 - A1)*sin(newXRot)*cos(newXRot) + B1*(cos(newXRot)^2 - sin(newXRot)^2))\n                    //   + y2^2*(A1*sin(newXRot)^2 - B1*sin(newXRot)*cos(newXRot) + C1*cos(newXRot)^2)\n                    //   (which must have the same zeroes as)\n                    // x2^2/newRX^2 + y2^2/newRY^2 - 1\n                    //   (so we have)\n                    // 2*(C1 - A1)*sin(newXRot)*cos(newXRot) + B1*(cos(newXRot)^2 - sin(newXRot)^2) = 0\n                    // (A1 - C1)*sin(2*newXRot) = B1*cos(2*newXRot)\n                    // 2*newXRot = atan2(B1, A1 - C1)\n                    const newXRot = ((Math.atan2(B1, A1 - C1) + Math.PI) % Math.PI) / 2;\n                    // For any integer n, (atan2(B1, A1 - C1) + n*pi)/2 is a solution to the above; incrementing n just swaps\n                    // the x and y radii computed below (since that\"s what rotating an ellipse by pi/2 does).  Choosing the\n                    // rotation between 0 and pi/2 eliminates the ambiguity and leads to more predictable output.\n                    // Finally, we get newRX and newRY from the same-zeroes relationship that gave us newXRot\n                    const newSinRot = Math.sin(newXRot);\n                    const newCosRot = Math.cos(newXRot);\n                    command.rX =\n                        Math.abs(det) /\n                            Math.sqrt(A1 * sqr(newCosRot) +\n                                B1 * newSinRot * newCosRot +\n                                C1 * sqr(newSinRot));\n                    command.rY =\n                        Math.abs(det) /\n                            Math.sqrt(A1 * sqr(newSinRot) -\n                                B1 * newSinRot * newCosRot +\n                                C1 * sqr(newCosRot));\n                    command.xRot = (newXRot * 180) / Math.PI;\n                }\n            }\n        }\n        // sweepFlag needs to be inverted when mirroring shapes\n        // see http://www.itk.ilstu.edu/faculty/javila/SVG/SVG_drawing1/elliptical_curve.htm\n        // m 65,10 a 50,25 0 1 0 50,25\n        // M 65,60 A 50,25 0 1 1 115,35\n        if ('undefined' !== typeof command.sweepFlag && 0 > det) {\n            command.sweepFlag = +!command.sweepFlag;\n        }\n        return command;\n    });\n}\nfunction ROTATE(a, x = 0, y = 0) {\n    assertNumbers(a, x, y);\n    const sin = Math.sin(a);\n    const cos = Math.cos(a);\n    return MATRIX(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);\n}\nfunction TRANSLATE(dX, dY = 0) {\n    assertNumbers(dX, dY);\n    return MATRIX(1, 0, 0, 1, dX, dY);\n}\nfunction SCALE(dX, dY = dX) {\n    assertNumbers(dX, dY);\n    return MATRIX(dX, 0, 0, dY, 0, 0);\n}\nfunction SKEW_X(a) {\n    assertNumbers(a);\n    return MATRIX(1, 0, Math.atan(a), 1, 0, 0);\n}\nfunction SKEW_Y(a) {\n    assertNumbers(a);\n    return MATRIX(1, Math.atan(a), 0, 1, 0, 0);\n}\nfunction X_AXIS_SYMMETRY(xOffset = 0) {\n    assertNumbers(xOffset);\n    return MATRIX(-1, 0, 0, 1, xOffset, 0);\n}\nfunction Y_AXIS_SYMMETRY(yOffset = 0) {\n    assertNumbers(yOffset);\n    return MATRIX(1, 0, 0, -1, 0, yOffset);\n}\n// Convert arc commands to curve commands\nfunction A_TO_C() {\n    return INFO((command, prevX, prevY) => {\n        if (SVGPathData.ARC === command.type) {\n            return a2c(command, command.relative ? 0 : prevX, command.relative ? 0 : prevY);\n        }\n        return command;\n    });\n}\n// @see annotateArcCommand\nfunction ANNOTATE_ARCS() {\n    return INFO((c, x1, y1) => {\n        if (c.relative) {\n            x1 = 0;\n            y1 = 0;\n        }\n        if (SVGPathData.ARC === c.type) {\n            annotateArcCommand(c, x1, y1);\n        }\n        return c;\n    });\n}\nfunction CLONE() {\n    return (c) => {\n        return { ...c };\n    };\n}\n// @see annotateArcCommand\nfunction CALCULATE_BOUNDS() {\n    const clone = CLONE();\n    const toAbs = TO_ABS();\n    const qtToC = QT_TO_C();\n    const normST = NORMALIZE_ST();\n    const f = INFO((command, prevXAbs, prevYAbs) => {\n        const c = normST(qtToC(toAbs(clone(command))));\n        function fixX(absX) {\n            if (absX > f.maxX) {\n                f.maxX = absX;\n            }\n            if (absX < f.minX) {\n                f.minX = absX;\n            }\n        }\n        function fixY(absY) {\n            if (absY > f.maxY) {\n                f.maxY = absY;\n            }\n            if (absY < f.minY) {\n                f.minY = absY;\n            }\n        }\n        if (c.type & SVGPathData.DRAWING_COMMANDS) {\n            fixX(prevXAbs);\n            fixY(prevYAbs);\n        }\n        if (c.type & SVGPathData.HORIZ_LINE_TO) {\n            fixX(c.x);\n        }\n        if (c.type & SVGPathData.VERT_LINE_TO) {\n            fixY(c.y);\n        }\n        if (c.type & SVGPathData.LINE_TO) {\n            fixX(c.x);\n            fixY(c.y);\n        }\n        if (c.type & SVGPathData.CURVE_TO) {\n            // add start and end points\n            fixX(c.x);\n            fixY(c.y);\n            const xDerivRoots = bezierRoot(prevXAbs, c.x1, c.x2, c.x);\n            for (const derivRoot of xDerivRoots) {\n                if (0 < derivRoot && 1 > derivRoot) {\n                    fixX(bezierAt(prevXAbs, c.x1, c.x2, c.x, derivRoot));\n                }\n            }\n            const yDerivRoots = bezierRoot(prevYAbs, c.y1, c.y2, c.y);\n            for (const derivRoot of yDerivRoots) {\n                if (0 < derivRoot && 1 > derivRoot) {\n                    fixY(bezierAt(prevYAbs, c.y1, c.y2, c.y, derivRoot));\n                }\n            }\n        }\n        if (c.type & SVGPathData.ARC) {\n            // add start and end points\n            fixX(c.x);\n            fixY(c.y);\n            annotateArcCommand(c, prevXAbs, prevYAbs);\n            // p = cos(phi) * xv + sin(phi) * yv\n            // dp = -sin(phi) * xv + cos(phi) * yv = 0\n            const xRotRad = (c.xRot / 180) * Math.PI;\n            // points on ellipse for phi = 0° and phi = 90°\n            const x0 = Math.cos(xRotRad) * c.rX;\n            const y0 = Math.sin(xRotRad) * c.rX;\n            const x90 = -Math.sin(xRotRad) * c.rY;\n            const y90 = Math.cos(xRotRad) * c.rY;\n            // annotateArcCommand returns phi1 and phi2 such that -180° < phi1 < 180° and phi2 is smaller or greater\n            // depending on the sweep flag. Calculate phiMin, phiMax such that -180° < phiMin < 180° and phiMin < phiMax\n            const [phiMin, phiMax] = c.phi1 < c.phi2\n                ? [c.phi1, c.phi2]\n                : -180 > c.phi2\n                    ? [c.phi2 + 360, c.phi1 + 360]\n                    : [c.phi2, c.phi1];\n            const normalizeXiEta = ([xi, eta]) => {\n                const phiRad = Math.atan2(eta, xi);\n                const phi = (phiRad * 180) / Math.PI;\n                return phi < phiMin ? phi + 360 : phi;\n            };\n            // xi = cos(phi), eta = sin(phi)\n            const xDerivRoots = intersectionUnitCircleLine(x90, -x0, 0).map(normalizeXiEta);\n            for (const derivRoot of xDerivRoots) {\n                if (derivRoot > phiMin && derivRoot < phiMax) {\n                    fixX(arcAt(c.cX, x0, x90, derivRoot));\n                }\n            }\n            const yDerivRoots = intersectionUnitCircleLine(y90, -y0, 0).map(normalizeXiEta);\n            for (const derivRoot of yDerivRoots) {\n                if (derivRoot > phiMin && derivRoot < phiMax) {\n                    fixY(arcAt(c.cY, y0, y90, derivRoot));\n                }\n            }\n        }\n        return command;\n    });\n    f.minX = Infinity;\n    f.maxX = -Infinity;\n    f.minY = Infinity;\n    f.maxY = -Infinity;\n    return f;\n}\nexport const SVGPathDataTransformer = {\n    ROUND,\n    TO_ABS,\n    TO_REL,\n    NORMALIZE_HVZ,\n    NORMALIZE_ST,\n    QT_TO_C,\n    INFO,\n    SANITIZE,\n    MATRIX,\n    ROTATE,\n    TRANSLATE,\n    SCALE,\n    SKEW_X,\n    SKEW_Y,\n    X_AXIS_SYMMETRY,\n    Y_AXIS_SYMMETRY,\n    A_TO_C,\n    ANNOTATE_ARCS,\n    CLONE,\n    CALCULATE_BOUNDS,\n};\n//# sourceMappingURL=SVGPathDataTransformer.js.map","import { SVGPathDataTransformer } from './SVGPathDataTransformer.js';\nexport class TransformableSVG {\n    round(x) {\n        return this.transform(SVGPathDataTransformer.ROUND(x));\n    }\n    toAbs() {\n        return this.transform(SVGPathDataTransformer.TO_ABS());\n    }\n    toRel() {\n        return this.transform(SVGPathDataTransformer.TO_REL());\n    }\n    normalizeHVZ(a, b, c) {\n        return this.transform(SVGPathDataTransformer.NORMALIZE_HVZ(a, b, c));\n    }\n    normalizeST() {\n        return this.transform(SVGPathDataTransformer.NORMALIZE_ST());\n    }\n    qtToC() {\n        return this.transform(SVGPathDataTransformer.QT_TO_C());\n    }\n    aToC() {\n        return this.transform(SVGPathDataTransformer.A_TO_C());\n    }\n    sanitize(eps) {\n        return this.transform(SVGPathDataTransformer.SANITIZE(eps));\n    }\n    translate(x, y) {\n        return this.transform(SVGPathDataTransformer.TRANSLATE(x, y));\n    }\n    scale(x, y) {\n        return this.transform(SVGPathDataTransformer.SCALE(x, y));\n    }\n    rotate(a, x, y) {\n        return this.transform(SVGPathDataTransformer.ROTATE(a, x, y));\n    }\n    matrix(a, b, c, d, e, f) {\n        return this.transform(SVGPathDataTransformer.MATRIX(a, b, c, d, e, f));\n    }\n    skewX(a) {\n        return this.transform(SVGPathDataTransformer.SKEW_X(a));\n    }\n    skewY(a) {\n        return this.transform(SVGPathDataTransformer.SKEW_Y(a));\n    }\n    xSymmetry(xOffset) {\n        return this.transform(SVGPathDataTransformer.X_AXIS_SYMMETRY(xOffset));\n    }\n    ySymmetry(yOffset) {\n        return this.transform(SVGPathDataTransformer.Y_AXIS_SYMMETRY(yOffset));\n    }\n    annotateArcs() {\n        return this.transform(SVGPathDataTransformer.ANNOTATE_ARCS());\n    }\n}\n//# sourceMappingURL=TransformableSVG.js.map","// Parse SVG PathData\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\nimport { COMMAND_ARG_COUNTS, SVGPathData } from './SVGPathData.js';\nimport { TransformableSVG } from './TransformableSVG.js';\n// Private consts : Char groups\nconst isWhiteSpace = (c) => ' ' === c || '\\t' === c || '\\r' === c || '\\n' === c;\nconst isDigit = (c) => '0'.charCodeAt(0) <= c.charCodeAt(0) && c.charCodeAt(0) <= '9'.charCodeAt(0);\nexport class SVGPathDataParser extends TransformableSVG {\n    curNumber = '';\n    curCommandType = -1;\n    curCommandRelative = false;\n    canParseCommandOrComma = true;\n    curNumberHasExp = false;\n    curNumberHasExpDigits = false;\n    curNumberHasDecimal = false;\n    curArgs = [];\n    constructor() {\n        super();\n    }\n    finish(commands = []) {\n        this.parse(' ', commands);\n        // Adding residual command\n        if (0 !== this.curArgs.length || !this.canParseCommandOrComma) {\n            throw new SyntaxError('Unterminated command at the path end.');\n        }\n        return commands;\n    }\n    parse(str, commands = []) {\n        const finishCommand = (command) => {\n            commands.push(command);\n            this.curArgs.length = 0;\n            this.canParseCommandOrComma = true;\n        };\n        for (let i = 0; i < str.length; i++) {\n            const c = str[i];\n            // White spaces parsing\n            const isAArcFlag = this.curCommandType === SVGPathData.ARC &&\n                (this.curArgs.length === 3 || this.curArgs.length === 4) &&\n                this.curNumber.length === 1 &&\n                (this.curNumber === '0' || this.curNumber === '1');\n            const isEndingDigit = isDigit(c) && ((this.curNumber === '0' && c === '0') || isAArcFlag);\n            if (isDigit(c) && !isEndingDigit) {\n                this.curNumber += c;\n                this.curNumberHasExpDigits = this.curNumberHasExp;\n                continue;\n            }\n            if ('e' === c || 'E' === c) {\n                this.curNumber += c;\n                this.curNumberHasExp = true;\n                continue;\n            }\n            if (('-' === c || '+' === c) &&\n                this.curNumberHasExp &&\n                !this.curNumberHasExpDigits) {\n                this.curNumber += c;\n                continue;\n            }\n            // if we already have a \".\", it means we are starting a new number\n            if ('.' === c &&\n                !this.curNumberHasExp &&\n                !this.curNumberHasDecimal &&\n                !isAArcFlag) {\n                this.curNumber += c;\n                this.curNumberHasDecimal = true;\n                continue;\n            }\n            // New number\n            if (this.curNumber && -1 !== this.curCommandType) {\n                const val = Number(this.curNumber);\n                if (isNaN(val)) {\n                    throw new SyntaxError(`Invalid number ending at ${i}`);\n                }\n                if (this.curCommandType === SVGPathData.ARC) {\n                    if (0 === this.curArgs.length || 1 === this.curArgs.length) {\n                        if (0 > val) {\n                            throw new SyntaxError(`Expected positive number, got \"${val}\" at index \"${i}\"`);\n                        }\n                    }\n                    else if (3 === this.curArgs.length || 4 === this.curArgs.length) {\n                        if ('0' !== this.curNumber && '1' !== this.curNumber) {\n                            throw new SyntaxError(`Expected a flag, got \"${this.curNumber}\" at index \"${i}\"`);\n                        }\n                    }\n                }\n                this.curArgs.push(val);\n                if (this.curArgs.length === COMMAND_ARG_COUNTS[this.curCommandType]) {\n                    if (SVGPathData.HORIZ_LINE_TO === this.curCommandType) {\n                        finishCommand({\n                            type: SVGPathData.HORIZ_LINE_TO,\n                            relative: this.curCommandRelative,\n                            x: val,\n                        });\n                    }\n                    else if (SVGPathData.VERT_LINE_TO === this.curCommandType) {\n                        finishCommand({\n                            type: SVGPathData.VERT_LINE_TO,\n                            relative: this.curCommandRelative,\n                            y: val,\n                        });\n                        // Move to / line to / smooth quadratic curve to commands (x, y)\n                    }\n                    else if (this.curCommandType === SVGPathData.MOVE_TO ||\n                        this.curCommandType === SVGPathData.LINE_TO ||\n                        this.curCommandType === SVGPathData.SMOOTH_QUAD_TO) {\n                        finishCommand({\n                            type: this.curCommandType,\n                            relative: this.curCommandRelative,\n                            x: this.curArgs[0],\n                            y: this.curArgs[1],\n                        });\n                        // Switch to line to state\n                        if (SVGPathData.MOVE_TO === this.curCommandType) {\n                            this.curCommandType = SVGPathData.LINE_TO;\n                        }\n                    }\n                    else if (this.curCommandType === SVGPathData.CURVE_TO) {\n                        finishCommand({\n                            type: SVGPathData.CURVE_TO,\n                            relative: this.curCommandRelative,\n                            x1: this.curArgs[0],\n                            y1: this.curArgs[1],\n                            x2: this.curArgs[2],\n                            y2: this.curArgs[3],\n                            x: this.curArgs[4],\n                            y: this.curArgs[5],\n                        });\n                    }\n                    else if (this.curCommandType === SVGPathData.SMOOTH_CURVE_TO) {\n                        finishCommand({\n                            type: SVGPathData.SMOOTH_CURVE_TO,\n                            relative: this.curCommandRelative,\n                            x2: this.curArgs[0],\n                            y2: this.curArgs[1],\n                            x: this.curArgs[2],\n                            y: this.curArgs[3],\n                        });\n                    }\n                    else if (this.curCommandType === SVGPathData.QUAD_TO) {\n                        finishCommand({\n                            type: SVGPathData.QUAD_TO,\n                            relative: this.curCommandRelative,\n                            x1: this.curArgs[0],\n                            y1: this.curArgs[1],\n                            x: this.curArgs[2],\n                            y: this.curArgs[3],\n                        });\n                    }\n                    else if (this.curCommandType === SVGPathData.ARC) {\n                        finishCommand({\n                            type: SVGPathData.ARC,\n                            relative: this.curCommandRelative,\n                            rX: this.curArgs[0],\n                            rY: this.curArgs[1],\n                            xRot: this.curArgs[2],\n                            lArcFlag: this.curArgs[3],\n                            sweepFlag: this.curArgs[4],\n                            x: this.curArgs[5],\n                            y: this.curArgs[6],\n                        });\n                    }\n                }\n                this.curNumber = '';\n                this.curNumberHasExpDigits = false;\n                this.curNumberHasExp = false;\n                this.curNumberHasDecimal = false;\n                this.canParseCommandOrComma = true;\n            }\n            // Continue if a white space or a comma was detected\n            if (isWhiteSpace(c)) {\n                continue;\n            }\n            if (',' === c && this.canParseCommandOrComma) {\n                // L 0,0, H is not valid:\n                this.canParseCommandOrComma = false;\n                continue;\n            }\n            // if a sign is detected, then parse the new number\n            if ('+' === c || '-' === c || '.' === c) {\n                this.curNumber = c;\n                this.curNumberHasDecimal = '.' === c;\n                continue;\n            }\n            // if a 0 is detected, then parse the new number\n            if (isEndingDigit) {\n                this.curNumber = c;\n                this.curNumberHasDecimal = false;\n                continue;\n            }\n            // Adding residual command\n            if (0 !== this.curArgs.length) {\n                throw new SyntaxError(`Unterminated command at index ${i}.`);\n            }\n            if (!this.canParseCommandOrComma) {\n                throw new SyntaxError(`Unexpected character \"${c}\" at index ${i}. Command cannot follow comma`);\n            }\n            this.canParseCommandOrComma = false;\n            // Detecting the next command\n            if ('z' === c || 'Z' === c) {\n                commands.push({\n                    type: SVGPathData.CLOSE_PATH,\n                });\n                this.canParseCommandOrComma = true;\n                this.curCommandType = -1;\n                continue;\n                // Horizontal move to command\n            }\n            else if ('h' === c || 'H' === c) {\n                this.curCommandType = SVGPathData.HORIZ_LINE_TO;\n                this.curCommandRelative = 'h' === c;\n                // Vertical move to command\n            }\n            else if ('v' === c || 'V' === c) {\n                this.curCommandType = SVGPathData.VERT_LINE_TO;\n                this.curCommandRelative = 'v' === c;\n                // Move to command\n            }\n            else if ('m' === c || 'M' === c) {\n                this.curCommandType = SVGPathData.MOVE_TO;\n                this.curCommandRelative = 'm' === c;\n                // Line to command\n            }\n            else if ('l' === c || 'L' === c) {\n                this.curCommandType = SVGPathData.LINE_TO;\n                this.curCommandRelative = 'l' === c;\n                // Curve to command\n            }\n            else if ('c' === c || 'C' === c) {\n                this.curCommandType = SVGPathData.CURVE_TO;\n                this.curCommandRelative = 'c' === c;\n                // Smooth curve to command\n            }\n            else if ('s' === c || 'S' === c) {\n                this.curCommandType = SVGPathData.SMOOTH_CURVE_TO;\n                this.curCommandRelative = 's' === c;\n                // Quadratic bezier curve to command\n            }\n            else if ('q' === c || 'Q' === c) {\n                this.curCommandType = SVGPathData.QUAD_TO;\n                this.curCommandRelative = 'q' === c;\n                // Smooth quadratic bezier curve to command\n            }\n            else if ('t' === c || 'T' === c) {\n                this.curCommandType = SVGPathData.SMOOTH_QUAD_TO;\n                this.curCommandRelative = 't' === c;\n                // Elliptic arc command\n            }\n            else if ('a' === c || 'A' === c) {\n                this.curCommandType = SVGPathData.ARC;\n                this.curCommandRelative = 'a' === c;\n            }\n            else {\n                throw new SyntaxError(`Unexpected character \"${c}\" at index ${i}.`);\n            }\n        }\n        return commands;\n    }\n    /**\n     * Return a wrapper around this parser which applies the transformation on parsed commands.\n     */\n    transform(transform) {\n        const result = Object.create(this, {\n            parse: {\n                value(chunk, commands = []) {\n                    const parsedCommands = Object.getPrototypeOf(this).parse.call(this, chunk);\n                    for (const c of parsedCommands) {\n                        const cT = transform(c);\n                        if (Array.isArray(cT)) {\n                            commands.push(...cT);\n                        }\n                        else {\n                            commands.push(cT);\n                        }\n                    }\n                    return commands;\n                },\n            },\n        });\n        return result;\n    }\n}\n//# sourceMappingURL=SVGPathDataParser.js.map","import { encodeSVGPath } from './SVGPathDataEncoder.js';\nimport { SVGPathDataParser } from './SVGPathDataParser.js';\nimport { SVGPathDataTransformer } from './SVGPathDataTransformer.js';\nimport { TransformableSVG } from './TransformableSVG.js';\nexport class SVGPathData extends TransformableSVG {\n    commands;\n    constructor(content) {\n        super();\n        if ('string' === typeof content) {\n            this.commands = SVGPathData.parse(content);\n        }\n        else {\n            this.commands = content;\n        }\n    }\n    encode() {\n        return SVGPathData.encode(this.commands);\n    }\n    getBounds() {\n        const boundsTransform = SVGPathDataTransformer.CALCULATE_BOUNDS();\n        this.transform(boundsTransform);\n        return boundsTransform;\n    }\n    transform(transformFunction) {\n        const newCommands = [];\n        for (const command of this.commands) {\n            const transformedCommand = transformFunction(command);\n            if (Array.isArray(transformedCommand)) {\n                newCommands.push(...transformedCommand);\n            }\n            else {\n                newCommands.push(transformedCommand);\n            }\n        }\n        this.commands = newCommands;\n        return this;\n    }\n    static encode(commands) {\n        return encodeSVGPath(commands);\n    }\n    static parse(path) {\n        const parser = new SVGPathDataParser();\n        const commands = [];\n        parser.parse(path, commands);\n        parser.finish(commands);\n        return commands;\n    }\n    static CLOSE_PATH = 1;\n    static MOVE_TO = 2;\n    static HORIZ_LINE_TO = 4;\n    static VERT_LINE_TO = 8;\n    static LINE_TO = 16;\n    static CURVE_TO = 32;\n    static SMOOTH_CURVE_TO = 64;\n    static QUAD_TO = 128;\n    static SMOOTH_QUAD_TO = 256;\n    static ARC = 512;\n    static LINE_COMMANDS = SVGPathData.LINE_TO | SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO;\n    static DRAWING_COMMANDS = SVGPathData.HORIZ_LINE_TO |\n        SVGPathData.VERT_LINE_TO |\n        SVGPathData.LINE_TO |\n        SVGPathData.CURVE_TO |\n        SVGPathData.SMOOTH_CURVE_TO |\n        SVGPathData.QUAD_TO |\n        SVGPathData.SMOOTH_QUAD_TO |\n        SVGPathData.ARC;\n}\nexport const COMMAND_ARG_COUNTS = {\n    [SVGPathData.MOVE_TO]: 2,\n    [SVGPathData.LINE_TO]: 2,\n    [SVGPathData.HORIZ_LINE_TO]: 1,\n    [SVGPathData.VERT_LINE_TO]: 1,\n    [SVGPathData.CLOSE_PATH]: 0,\n    [SVGPathData.QUAD_TO]: 4,\n    [SVGPathData.SMOOTH_QUAD_TO]: 2,\n    [SVGPathData.CURVE_TO]: 6,\n    [SVGPathData.SMOOTH_CURVE_TO]: 4,\n    [SVGPathData.ARC]: 7,\n};\n//# sourceMappingURL=SVGPathData.js.map","export interface RectAttributes {\n  x?: string;\n  y?: string;\n  width?: string;\n  height?: string;\n  rx?: string;\n  ry?: string;\n}\n\nexport function svgRectToPath(attributes: RectAttributes): string {\n  const x = attributes.x == null ? 0 : parseFloat(attributes.x);\n  const y = attributes.y == null ? 0 : parseFloat(attributes.y);\n  const width = attributes.width == null ? 0 : parseFloat(attributes.width);\n  const height = attributes.height == null ? 0 : parseFloat(attributes.height);\n\n  const rx = attributes.rx == null ? 0 : parseFloat(attributes.rx);\n  const ry = attributes.ry == null ? 0 : parseFloat(attributes.ry);\n\n  return `M${x + rx} ` +\n    `${y}h${width - rx * 2}${rx || ry ? `a ${rx} ${ry} 0 0 1 ${rx} ${ry}` : ''}` +\n    `v${height - ry * 2}${rx || ry ? `a ${rx} ${ry} 0 0 1 ${rx * -1} ${ry}` : ''}` +\n    `h${(width - rx * 2) * -1}${rx || ry ? `a ${rx} ${ry} 0 0 1 ${rx * -1} ${ry * -1}` : ''}` +\n    `v${(height - ry * 2) * -1}${rx || ry ? `a ${rx} ${ry} 0 0 1 ${rx} ${ry * -1}` : ''}` +\n    'z';\n}","export interface LineAttributes {\n  x1?: string;\n  y1?: string;\n  x2?: string;\n  y2?: string;\n}\n\nexport function svgLineToPath(attributes: LineAttributes): string {\n  const x1 = attributes.x1 && parseFloat(attributes.x1) || 0;\n  const y1 = attributes.y1 && parseFloat(attributes.y1) || 0;\n  const x2 = attributes.x2 && parseFloat(attributes.x2) || 0;\n  const y2 = attributes.y2 && parseFloat(attributes.y2) || 0;\n\n  return `M${x1} ${y1} ${x1 + 1} ${y1 + 1} ${x2 + 1} ${y2 + 1} ${x2} ${y2}Z`;\n}","export interface CircleAttributes {\n  cx?: string;\n  cy?: string;\n  rx?: string;\n  ry?: string;\n  r?: string;\n}\n\nexport function svgCircleToPath(attributes: CircleAttributes): string {\n  const cx = attributes.cx && parseFloat(attributes.cx) || 0;\n  const cy = attributes.cy && parseFloat(attributes.cy) || 0;\n  const r = attributes.r && parseFloat(attributes.r) || 0;\n  const rx = attributes.rx && parseFloat(attributes.rx) || r;\n  const ry = attributes.ry && parseFloat(attributes.ry) || r;\n\n  return `M${cx - rx},${cy}A${rx},${ry} 0,0,0 ${cx + rx},${cy}A${rx},${ry} 0,0,0 ${cx - rx},${cy}`;\n}","import { Transform, TransformCallback } from 'node:stream';\nimport sax from 'sax';\nimport { BufferWithMeta, FileMetadata, SymbolMeta } from '../../types/types.ts';\nimport { SVGCommand, SVGPathData, SVGPathDataParser, SVGPathDataTransformer } from 'svg-pathdata';\nimport { START_UNICODE, SYMBOL_SIZE } from '../../utils/constants.ts';\nimport { Buffer } from 'node:buffer';\nimport { populateMetadata } from '../../utils/populate-metadata.ts';\nimport { svgRectToPath } from '../../svg-helpers/svg-rect-to-path.ts';\nimport { svgLineToPath } from '../../svg-helpers/svg-line-to-path.ts';\nimport { svgCircleToPath } from '../../svg-helpers/svg-circle-to-path.ts';\nimport type { SvgTransformation } from '../../types';\nimport { round } from '../../utils/round.ts';\n\nexport class TransformPrepareIcons extends Transform {\n\n  _size = SYMBOL_SIZE;\n\n  _startUnicode = START_UNICODE;\n\n  constructor() {\n    super({ objectMode: true });\n  }\n\n  private _sizeAndPos(pathData: SVGPathData): { x: number; y: number, width: number; height: number } {\n    const { minX, maxX, minY, maxY } = pathData.getBounds();\n    const width = maxX - minX;\n    const height = maxY - minY;\n\n    return {\n      x: minX,\n      y: minY,\n      width: width,\n      height: height,\n    }\n  }\n\n  private _adjustSize(pathData: SVGPathData): SVGPathData {\n    const { width, height } = this._sizeAndPos(pathData);\n    const currentSize = Math.round(Math.max(width, height));\n\n    // If the shape fits into a given square, we do nothing\n    if (currentSize !== this._size) {\n      pathData = pathData.scale(this._size / currentSize);\n    }\n    return pathData;\n  }\n\n  private _adjustAlign(pathData: SVGPathData): SVGPathData {\n    const { x, y, width, height } = this._sizeAndPos(pathData);\n\n    const dX = x - (this._size - width) / 2;\n    const dY = y - (this._size - height) / 2;\n\n    return pathData.translate(-dX, -dY);\n  }\n\n  private _parseTransformAttr(transform?: string): SvgTransformation[] {\n    if (!transform) return [];\n\n    const output: SvgTransformation[] = [];\n\n    const transformations = transform.match(/(rotate|translate|scale|skewX|skewY|matrix)\\s*\\(([^)]*)\\)\\s*/g) || [];\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      const matched = transformation.match(/[\\w.-]+/g);\n      if (!matched) continue;\n\n      const [transformType, ...data] = matched;\n      switch (transformType) {\n        case 'rotate': {\n          const a = parseFloat(data[0]);\n          const x = data[1] ? parseFloat(data[1]) : undefined;\n          const y = data[2] ? parseFloat(data[2]) : undefined;\n          output.push({\n            attribute: transformation,\n            function: SVGPathDataTransformer.ROTATE(a, x, y),\n          });\n          break;\n        }\n        case 'translate': {\n          const x = parseFloat(data[0]);\n          const y = data[1] ? parseFloat(data[1]) : undefined;\n          output.push({\n            attribute: transformation,\n            function: SVGPathDataTransformer.TRANSLATE(x, y),\n          });\n          break;\n        }\n        case 'skewX': {\n          const a = parseFloat(data[0]);\n          output.push({\n            attribute: transformation,\n            function: SVGPathDataTransformer.SKEW_X(a),\n          });\n          break;\n        }\n        case 'skewY': {\n          const a = parseFloat(data[0]);\n          output.push({\n            attribute: transformation,\n            function: SVGPathDataTransformer.SKEW_Y(a),\n          });\n          break;\n        }\n        case 'matrix': {\n          const rest = data.map(parseFloat) as [number, number, number, number, number, number];\n          output.push({\n            attribute: transformation,\n            function: SVGPathDataTransformer.MATRIX(...rest),\n          });\n          break;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  private _parseViewBoxAttr(viewBox?: string): SvgTransformation[] {\n    if (!viewBox) return [];\n\n    try {\n      const values = viewBox.split(/\\s*,*\\s|\\s,*\\s*|,/);\n\n      const dX = parseFloat(values[0]) || 0;\n      const dY = parseFloat(values[1]) || 0;\n      const width = parseFloat(values[2]);\n      const height = parseFloat(values[3]);\n\n      const output: SvgTransformation[] = [];\n\n      if (dX !== 0 || dY !== 0) {\n        output.push({\n          attribute: `translate(${-dX}, ${-dY})`,\n          function: SVGPathDataTransformer.TRANSLATE(-dX, -dY),\n        });\n      }\n\n      if (width !== this._size || height !== this._size) {\n        output.push({\n          attribute: `scale(${this._size / width}, ${this._size / height})`,\n          function: SVGPathDataTransformer.SCALE(this._size / width, this._size / height),\n        });\n      }\n      return output;\n    } catch (error: any) {\n      console.error(error);\n      return [];\n    }\n  }\n\n  _transform(chunk: BufferWithMeta<FileMetadata>, _encoding: any, callback: TransformCallback) {\n    const parser = sax.parser(true);\n    const parents: (sax.Tag | sax.QualifiedTag)[] = [];\n    const transforms: SvgTransformation[][] = [];\n    const paths: string[] = [];\n\n    function pushTransform(_newTransformations: SvgTransformation[]) {\n      const index = parents.length - 1;\n      transforms[index] = [...(transforms[index] || []), ..._newTransformations];\n    }\n\n    function applyTransformAndPush(path: string) {\n      const svgPathData = new SVGPathData(path).toAbs();\n\n      const transformations = transforms.flat(2);\n      for (let i = 0; i < transformations.length; i++) {\n        const transformation = transformations[i];\n        svgPathData.transform(transformation.function);\n      }\n\n      paths.push(svgPathData.encode());\n    }\n\n    parser.onerror = (error: Error) => {\n      callback(error);\n    }\n\n    parser.onopentag = (tag: sax.Tag | sax.QualifiedTag) => {\n      parents.push(tag);\n\n      pushTransform(this._parseTransformAttr(tag.attributes.transform as string));\n\n      switch (tag.name) {\n        case 'svg':\n          pushTransform(this._parseViewBoxAttr(tag.attributes.viewBox as string));\n          break;\n        case 'path':\n          applyTransformAndPush(tag.attributes.d as string);\n          break;\n        case 'rect':\n          applyTransformAndPush(svgRectToPath(tag.attributes));\n          break;\n        case 'line':\n          applyTransformAndPush(svgLineToPath(tag.attributes));\n          break;\n        case 'polyline':\n        case 'polygon':\n          applyTransformAndPush(`M${tag.attributes.points}`);\n          break;\n        case 'circle':\n        case 'ellipse':\n          applyTransformAndPush(svgCircleToPath(tag.attributes));\n          break;\n        case 'g':\n          break;\n        default:\n          console.warn(`Unsupported tag ${tag.name}`);\n      }\n    }\n\n    parser.onclosetag = () => {\n      parents.pop();\n      transforms.pop();\n    }\n\n    parser.onend = () => {\n      const commands: SVGCommand[] = [];\n      const parser = new SVGPathDataParser();\n\n      for (let i = 0; i < paths.length; i++) {\n        parser.parse(paths[i], commands);\n      }\n      parser.finish(commands);\n\n      let svgPathData = new SVGPathData(commands);\n      svgPathData = this._adjustSize(svgPathData);\n      svgPathData = this._adjustAlign(svgPathData);\n\n      const path = svgPathData.round(100).scale(1, -1).encode();\n\n      const meta: SymbolMeta = {\n        index: chunk.metadata.index,\n        name: chunk.metadata.name,\n        codepoint: this._startUnicode + chunk.metadata.index,\n        x: 0,\n        y: 0,\n        width: this._size,\n        height: this._size,\n      }\n\n      callback(null, populateMetadata(Buffer.from(path), meta));\n    }\n\n    const svg = chunk.toString('utf8');\n    parser.write(svg);\n    parser.end();\n  }\n}","export function slugify(value: string): string {\n  value = value.trim();\n  if (value.includes(' ')) {\n    value = value.toLowerCase().replace(/\\s+/g, '-');\n  } else if (/[A-Z]/.test(value)) {\n    value = value.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  }\n\n  return value;\n}","/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n *\n * @param input The Unicode input string (UCS-2).\n * @returns {number[]} The new array of code points.\n */\nexport function ucs2decode(input: string): number[] {\n  const output: number[] = [];\n  let counter = 0;\n  const length = input.length;\n\n  while (counter < length) {\n    const value = input.charCodeAt(counter++);\n    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n      const extra = input.charCodeAt(counter++);\n      if ((extra & 0xFC00) == 0xDC00) {\n        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n      } else {\n        output.push(value);\n        counter--;\n      }\n    } else {\n      output.push(value);\n    }\n  }\n  return output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n *\n * @param {number[]} codePoints The array of numeric code points.\n * @returns {string} The new Unicode string (UCS-2).\n */\nexport function ucs2encode(codePoints: number[]): string {\n  return String.fromCodePoint(...codePoints);\n}\n\n/**\n * Encode symbol to represent in HTML page\n * @param codePoints\n */\nexport function encodeHtml(codePoints: number[]): string {\n  return codePoints.map(code => `&#x${(code).toString(16).toUpperCase()};`).join('');\n}\n\n/**\n * Decode HTML to codepoints\n * @param htmlCharacter\n */\nexport function decodeHtml(htmlCharacter: string): number[] {\n  return htmlCharacter\n    .split('&#x')\n    .map((source, index, codes) => {\n      if (index === codes.length - 1) {\n        return null;\n      }\n      return parseInt(source.slice(0, -1), 16);\n    })\n    .filter<number>(code => typeof code === 'number');\n}","import { Transform, TransformCallback } from 'node:stream';\nimport { SVGPathData } from 'svg-pathdata';\nimport { slugify } from '../../utils/slugify.ts';\nimport { BufferWithMeta, SymbolMeta } from '../../types/types.ts';\nimport { encodeHtml } from '../../utils/coders.ts';\n\nexport class TransformToSvgFont extends Transform {\n\n  private readonly _fontName: string;\n\n  private readonly _metadata?: string;\n\n  private _isHeaderRendered = false;\n\n  constructor(fontName: string, metadata?: string) {\n    super({ objectMode: true });\n\n    this._fontName = fontName;\n    this._metadata = metadata;\n  }\n\n  private _header(symbolSize: number): string {\n    const slug = slugify(this._fontName);\n    let output = '<?xml version=\"1.0\" standalone=\"no\"?>\\n';\n    output += '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\" >\\n';\n    output += '<svg xmlns=\"http://www.w3.org/2000/svg\">\\n';\n\n    if (this._metadata) {\n      output += `<metadata>${this._metadata}</metadata>\\n`;\n    }\n\n    output += '<defs>\\n';\n    output += `  <font id=\"${slug}\" horiz-adv-x=\"${symbolSize}\">\\n`;\n    output += `    <font-face\\n`;\n    output += `        font-family=\"${this._fontName}\"\\n`;\n    output += `        units-per-em=\"${symbolSize}\"\\n`;\n    output += `        ascent=\"-${symbolSize}\"\\n`;\n    output += `        descent=\"0\"\\n`;\n    output += `        font-size=\"16\"\\n`;\n    output += `        widths=\"16\"\\n`;\n    output += `        font-weight=\"400\"\\n`;\n    output += `        font-style=\"Regular\"\\n`;\n    output += `    />\\n`;\n    output += `    <missing-glyph horiz-adv-x=\"0\" />\\n`;\n\n    return output;\n  }\n\n  _transform(chunk: BufferWithMeta<SymbolMeta>, _encoding: BufferEncoding, callback: TransformCallback) {\n    const size = Math.max(chunk.metadata.width, chunk.metadata.height);\n    let output = '';\n    if (!this._isHeaderRendered) {\n      output += this._header(size);\n      this._isHeaderRendered = true;\n    }\n\n    const path = new SVGPathData(chunk.toString())\n      .encode();\n\n    output += `    <glyph\\n`;\n    output += `        glyph-name=\"${chunk.metadata.name}\"\\n`;\n    output += `        unicode=\"${encodeHtml([chunk.metadata.codepoint])}\"\\n`;\n    output += `        horiz-adv-x=\"${size}\"\\n`;\n    output += `        d=\"${path}\"\\n`;\n    output += `    />\\n`;\n\n    callback(null, output);\n  }\n\n  _flush(callback: TransformCallback) {\n    let output = '';\n    output += `  </font>\\n`;\n    output += `</defs>\\n`;\n    output += `</svg>\\n`;\n\n    callback(null, output);\n  }\n}","import { Writable } from 'node:stream';\nimport { StreamRead } from '../../streams/stream-read/stream-read.ts';\nimport { TransformPrepareIcons } from '../../streams/transform-prepare-icons/transform-prepare-icons.ts';\nimport { TransformToSvgFont } from '../../streams/transform-to-svg-font/transform-to-svg-font.ts';\nimport { AppConfig } from '../../types';\n\nexport async function generateFontSvg(config: Omit<AppConfig, 'output'>): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    const filesReadStream = new StreamRead(config.input);\n    const prepareStream = new TransformPrepareIcons();\n    const svgFontStream = new TransformToSvgFont(config.name);\n\n    let result = '';\n    const writeStream = new Writable({\n      write(chunk: any, _encoding: BufferEncoding, callback: (error?: (Error | null)) => void) {\n        result += chunk.toString();\n        callback();\n      },\n      final(callback: (error?: (Error | null)) => void) {\n        resolve(result);\n        callback();\n      },\n      destroy(error: Error | null, callback: (error?: (Error | null)) => void) {\n        if (error) {\n          reject(error);\n        }\n        callback(error);\n      }\n    });\n\n    filesReadStream.pipe(prepareStream).pipe(svgFontStream).pipe(writeStream);\n  });\n}\n\n","import { PointLike } from '../types';\n\nexport class Point implements PointLike {\n  x: number;\n  y: number;\n\n  /*\n * Check if 3 points are in line, and second in the middle.\n * Used to replace quad curves with lines or join lines\n *\n */\n  static isInLine(p1: Point, m: Point, p2: Point, accuracy: number): boolean {\n    const a = p1.sub(m).sqr();\n    const b = p2.sub(m).sqr();\n    const c = p1.sub(p2).sqr();\n\n    // control point not between anchors\n    if ((a > (b + c)) || (b > (a + c))) {\n      return false;\n    }\n\n    // count distance via scalar multiplication\n    const distance = Math.sqrt(Math.pow((p1.x - m.x) * (p2.y - m.y) - (p2.x - m.x) * (p1.y - m.y), 2) / c);\n\n    return distance < accuracy;\n  }\n\n  static calcPoint(a: Point, b: Point, c: Point, d: Point, t: number): Point {\n    // a*t^3 + b*t^2 + c*t + d = ((a*t + b)*t + c)*t + d\n    return a.mul(t).add(b).mul(t).add(c).mul(t).add(d);\n  }\n\n  static calcPointQuad(a: Point, b: Point, c: Point, t: number): Point {\n    // a*t^2 + b*t + c = (a*t + b)*t + c\n    return a.mul(t).add(b).mul(t).add(c);\n  }\n\n  static calcPointDerivative(a: Point, b: Point, c: Point, d: Point, t: number): Point {\n    // d/dt[a*t^3 + b*t^2 + c*t + d] = 3*a*t^2 + 2*b*t + c = (3*a*t + 2*b)*t + c\n    return a.mul(3 * t).add(b.mul(2)).mul(t).add(c)\n  }\n\n  static calcPowerCoefficients(p1: Point, c1: Point, c2: Point, p2: Point): [Point, Point, Point, Point] {\n    // point(t) = p1*(1-t)^3 + c1*t*(1-t)^2 + c2*t^2*(1-t) + p2*t^3 = a*t^3 + b*t^2 + c*t + d\n    // for each t value, so\n    // a = (p2 - p1) + 3 * (c1 - c2)\n    // b = 3 * (p1 + c2) - 6 * c1\n    // c = 3 * (c1 - p1)\n    // d = p1\n    const a = p2.sub(p1).add(c1.sub(c2).mul(3));\n    const b = p1.add(c2).mul(3).sub(c1.mul(6));\n    const c = c1.sub(p1).mul(3);\n    const d = p1.clone();\n    return [a, b, c, d]\n  }\n\n  static calcPowerCoefficientsQuad(p1: Point, c1: Point, p2: Point): [Point, Point, Point] {\n    // point(t) = p1*(1-t)^2 + c1*t*(1-t) + p2*t^2 = a*t^2 + b*t + c\n    // for each t value, so\n    // a = p1 + p2 - 2 * c1\n    // b = 2 * (c1 - p1)\n    // c = p1\n    const a = c1.mul(-2).add(p1).add(p2);\n    const b = c1.sub(p1).mul(2);\n    const c = p1.clone();\n    return [a, b, c]\n  }\n\n  /**\n   *  Calculate a distance between a `point` and a line segment `p1, p2`\n   *  (result is squared for performance reasons), see details here:\n   * @param point\n   * @param p1\n   * @param p2\n   */\n  static calcMinDistanceToLine(point: Point, p1: Point, p2: Point): number {\n    const p1p2 = p2.sub(p1);\n    const dot = point.sub(p1).dot(p1p2);\n    const lenSq = p1p2.sqr();\n    let param = 0;\n    let diff;\n    if (lenSq !== 0) param = dot / lenSq\n    if (param <= 0) {\n      diff = point.sub(p1)\n    } else if (param >= 1) {\n      diff = point.sub(p2)\n    } else {\n      diff = point.sub(p1.add(p1p2.mul(param)))\n    }\n    return diff.sqr()\n  }\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  add(point: Point): Point {\n    return new Point(this.x + point.x, this.y + point.y);\n  }\n\n  sub(point: Point): Point {\n    return new Point(this.x - point.x, this.y - point.y);\n  }\n\n  mul(value: number): Point {\n    return new Point(this.x * value, this.y * value);\n  }\n\n  div(value: number): Point {\n    return new Point(this.x / value, this.y / value);\n  }\n\n  dist(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  sqr(): number {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  dot(point: PointLike): number {\n    return this.x * point.x + this.y * point.y;\n  }\n}\n\n\n","// Precision used to check determinant in quad and cubic solvers,\n// any number lower than this is considered to be zero.\n// `8.67e-19` is an example of real error occurring in tests.\nimport { Point } from '../entities/point.ts';\n\nconst epsilon = 1e-16;\n\nexport type PointArray = [number, number, number, number, number, number, number, number];\n\nexport type Curve = [Point, Point, Point];\n\nfunction quadSolve(a: number, b: number, c: number): number[] {\n  // a*x^2 + b*x + c = 0\n  if (a === 0) {\n    return (b === 0) ? [] : [-c / b]\n  }\n  const D = b * b - 4 * a * c;\n  if (Math.abs(D) < epsilon) {\n    return [-b / (2 * a)]\n  } else if (D < 0) {\n    return []\n  }\n  const DSqrt = Math.sqrt(D);\n  return [(-b - DSqrt) / (2 * a), (-b + DSqrt) / (2 * a)]\n}\n\nfunction processSegment(a: Point, b: Point, c: Point, d: Point, t1: number, t2: number): [Point, Point, Point] {\n  // Find a single control point for given segment of cubic Bezier curve\n  // These control point is an interception of tangent lines to the boundary points\n  // Let's denote that f(t) is a vector function of parameter t that defines the cubic Bezier curve,\n  // f(t1) + f'(t1)*z1 is a parametric equation of tangent line to f(t1) with parameter z1\n  // f(t2) + f'(t2)*z2 is the same for point f(t2) and the vector equation\n  // f(t1) + f'(t1)*z1 = f(t2) + f'(t2)*z2 defines the values of parameters z1 and z2.\n  // Defining fx(t) and fy(t) as the x and y components of vector function f(t) respectively\n  // and solving the given system for z1 one could obtain that\n  //\n  //      -(fx(t2) - fx(t1))*fy'(t2) + (fy(t2) - fy(t1))*fx'(t2)\n  // z1 = ------------------------------------------------------.\n  //            -fx'(t1)*fy'(t2) + fx'(t2)*fy'(t1)\n  //\n  // Let's assign letter D to the denominator and note that if D = 0 it means that the curve actually\n  // is a line. Substituting z1 to the equation of tangent line to the point f(t1), one could obtain that\n  // cx = [fx'(t1)*(fy(t2)*fx'(t2) - fx(t2)*fy'(t2)) + fx'(t2)*(fx(t1)*fy'(t1) - fy(t1)*fx'(t1))]/D\n  // cy = [fy'(t1)*(fy(t2)*fx'(t2) - fx(t2)*fy'(t2)) + fy'(t2)*(fx(t1)*fy'(t1) - fy(t1)*fx'(t1))]/D\n  // where c = (cx, cy) is the control point of quadratic Bezier curve.\n\n  const f1 = Point.calcPoint(a, b, c, d, t1);\n  const f2 = Point.calcPoint(a, b, c, d, t2);\n  const f1_ = Point.calcPointDerivative(a, b, c, d, t1);\n  const f2_ = Point.calcPointDerivative(a, b, c, d, t2);\n\n  const D = -f1_.x * f2_.y + f2_.x * f1_.y;\n  if (Math.abs(D) < 1e-8) {\n    return [f1, f1.add(f2).div(2), f2]; // straight line segment\n  }\n  const cx = (f1_.x * (f2.y * f2_.x - f2.x * f2_.y) + f2_.x * (f1.x * f1_.y - f1.y * f1_.x)) / D;\n  const cy = (f1_.y * (f2.y * f2_.x - f2.x * f2_.y) + f2_.y * (f1.x * f1_.y - f1.y * f1_.x)) / D;\n  return [f1, new Point(cx, cy), f2];\n}\n\n/*\n * Divide cubic and quadratic curves into 10 points and 9 line segments.\n * Calculate distances between each point on cubic and nearest line segment\n * on quadratic (and vice versa), and make sure all distances are less\n * than `errorBound`.\n *\n * We need to calculate BOTH distance from all points on quadratic to any cubic,\n * and all points on cubic to any quadratic.\n *\n * If we do it only one way, it may lead to an error if the entire original curve\n * falls within errorBound (then **any** quad will erroneously treated as good):\n * https://github.com/fontello/svg2ttf/issues/105#issuecomment-842558027\n *\n *  - a,b,c,d define cubic curve (power coefficients)\n *  - tmin, tmax are boundary points on cubic curve (in 0-1 range)\n *  - p1, c1, p2 define quadratic curve (control points)\n *  - errorBound is maximum allowed distance\n */\nfunction isSegmentApproximationClose(a: Point, b: Point, c: Point, d: Point, tmin: number, tmax: number, p1: Point, c1: Point, p2: Point, errorBound: number): boolean {\n  const n = 10; // number of points\n  let t, dt;\n  const p = Point.calcPowerCoefficientsQuad(p1, c1, p2);\n  const qa = p[0], qb = p[1], qc = p[2];\n  let i, j, distSq;\n  const errorBoundSq = errorBound * errorBound;\n  const cubicPoints = [];\n  const quadPoints = [];\n  let minDistSq;\n\n  dt = (tmax - tmin) / n;\n  for (i = 0, t = tmin; i <= n; i++, t += dt) {\n    cubicPoints.push(Point.calcPoint(a, b, c, d, t));\n  }\n\n  dt = 1 / n;\n  for (i = 0, t = 0; i <= n; i++, t += dt) {\n    quadPoints.push(Point.calcPointQuad(qa, qb, qc, t));\n  }\n\n  for (i = 1; i < cubicPoints.length - 1; i++) {\n    minDistSq = Infinity;\n    for (j = 0; j < quadPoints.length - 1; j++) {\n      distSq = Point.calcMinDistanceToLine(cubicPoints[i], quadPoints[j], quadPoints[j + 1]);\n      minDistSq = Math.min(minDistSq, distSq);\n    }\n    if (minDistSq > errorBoundSq) return false;\n  }\n\n  for (i = 1; i < quadPoints.length - 1; i++) {\n    minDistSq = Infinity;\n    for (j = 0; j < cubicPoints.length - 1; j++) {\n      distSq = Point.calcMinDistanceToLine(quadPoints[i], cubicPoints[j], cubicPoints[j + 1]);\n      minDistSq = Math.min(minDistSq, distSq);\n    }\n    if (minDistSq > errorBoundSq) return false;\n  }\n\n  return true;\n}\n\nfunction _isApproximationClose(a: Point, b: Point, c: Point, d: Point, quadCurves: Curve[], errorBound?: number): boolean {\n  const dt = 1 / quadCurves.length;\n  for (let i = 0; i < quadCurves.length; i++) {\n    const p1 = quadCurves[i][0];\n    const c1 = quadCurves[i][1];\n    const p2 = quadCurves[i][2];\n    if (!isSegmentApproximationClose(a, b, c, d, i * dt, (i + 1) * dt, p1, c1, p2, errorBound || 0)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction toFlatArray(quadsList: Curve[]): number[] {\n  const result: number[] = [];\n  result.push(quadsList[0][0].x);\n  result.push(quadsList[0][0].y);\n  for (let i = 0; i < quadsList.length; i++) {\n    result.push(quadsList[i][1].x);\n    result.push(quadsList[i][1].y);\n    result.push(quadsList[i][2].x);\n    result.push(quadsList[i][2].y);\n  }\n  return result;\n}\n\n/*\n * Split cubic bézier curve into two cubic curves, see details here:\n * https://math.stackexchange.com/questions/877725\n */\nfunction subdivideCubic(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number, t: number): [PointArray, PointArray] {\n  const u = 1 - t;\n  const v = t;\n\n  const bx = x1 * u + x2 * v;\n  const sx = x2 * u + x3 * v;\n  const fx = x3 * u + x4 * v;\n  const cx = bx * u + sx * v;\n  const ex = sx * u + fx * v;\n  const dx = cx * u + ex * v;\n\n  const by = y1 * u + y2 * v;\n  const sy = y2 * u + y3 * v;\n  const fy = y3 * u + y4 * v;\n  const cy = by * u + sy * v;\n  const ey = sy * u + fy * v;\n  const dy = cy * u + ey * v;\n\n  return [\n    [x1, y1, bx, by, cx, cy, dx, dy],\n    [dx, dy, ex, ey, fx, fy, x4, y4]\n  ];\n}\n\n/*\n * Find inflection points on a cubic curve, algorithm is similar to this one:\n * http://www.caffeineowl.com/graphics/2d/vectorial/cubic-inflexion.html\n */\nfunction solveInflections(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): number[] {\n  const p = -(x4 * (y1 - 2 * y2 + y3)) + x3 * (2 * y1 - 3 * y2 + y4) +\n    x1 * (y2 - 2 * y3 + y4) - x2 * (y1 - 3 * y3 + 2 * y4);\n  const q = x4 * (y1 - y2) + 3 * x3 * (-y1 + y2) + x2 * (2 * y1 - 3 * y3 + y4) - x1 * (2 * y2 - 3 * y3 + y4);\n  const r = x3 * (y1 - y2) + x1 * (y2 - y3) + x2 * (-y1 + y3);\n\n  return quadSolve(p, q, r).filter(t => (t > 1e-8 && t < 1 - 1e-8)).sort((x, y) => x - y);\n}\n\n/*\n * Approximate cubic Bezier curve defined with base points p1, p2 and control points c1, c2 with\n * with a few quadratic Bezier curves.\n * The function uses tangent method to find quadratic approximation of cubic curve segment and\n * simplified Hausdorff distance to determine number of segments that is enough to make error small.\n * In general the method is the same as described here: https://fontforge.github.io/bezier.html.\n */\nfunction _cubicToQuad(p1x: number, p1y: number, c1x: number, c1y: number, c2x: number, c2y: number, p2x: number, p2y: number, errorBound?: number) {\n  const p1 = new Point(p1x, p1y);\n  const c1 = new Point(c1x, c1y);\n  const c2 = new Point(c2x, c2y);\n  const p2 = new Point(p2x, p2y);\n  const [a, b, c, d] = Point.calcPowerCoefficients(p1, c1, c2, p2);\n\n  let approximation: any[] = [];\n  for (let i = 1; i <= 8; i++) {\n    approximation = [];\n    for (let j = 0; j < 1; j += (1 / i)) {\n      approximation.push(processSegment(a, b, c, d, j, j + (1 / i)));\n    }\n    if (i === 1 &&\n      (approximation[0][1].sub(p1).dot(c1.sub(p1)) < 0 ||\n        approximation[0][1].sub(p2).dot(c2.sub(p2)) < 0)) {\n      // approximation concave, while the curve is convex (or vice versa)\n      continue;\n    }\n    if (_isApproximationClose(a, b, c, d, approximation, errorBound)) {\n      break;\n    }\n  }\n  return toFlatArray(approximation);\n}\n\n/*\n * If this curve has any inflection points, split the curve and call\n * _cubicToQuad function on each resulting curve.\n */\nexport function svgCubicToQuad(p1x: number, p1y: number, c1x: number, c1y: number, c2x: number, c2y: number, p2x: number, p2y: number, errorBound?: number): number[] {\n  const inflections = solveInflections(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\n  if (!inflections.length) {\n    return _cubicToQuad(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, errorBound);\n  }\n\n  let result: number[] = [];\n  let curve = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n  let prevPoint = 0;\n  let quad: number[];\n  let split;\n\n  for (let inflectionIdx = 0; inflectionIdx < inflections.length; inflectionIdx++) {\n    split = subdivideCubic(\n      curve[0], curve[1], curve[2], curve[3],\n      curve[4], curve[5], curve[6], curve[7],\n      // we make a new curve, so adjust inflection point accordingly\n      1 - (1 - inflections[inflectionIdx]) / (1 - prevPoint)\n    );\n\n    quad = _cubicToQuad(\n      split[0][0], split[0][1], split[0][2], split[0][3],\n      split[0][4], split[0][5], split[0][6], split[0][7],\n      errorBound\n    );\n\n    result = result.concat(quad.slice(0, -2));\n    curve = split[1];\n    prevPoint = inflections[inflectionIdx];\n  }\n\n  quad = _cubicToQuad(\n    curve[0], curve[1], curve[2], curve[3],\n    curve[4], curve[5], curve[6], curve[7],\n    errorBound\n  );\n\n  return result.concat(quad);\n}\n","export function round(value: number, precision = 1): number {\n  return Math.round(value * precision) / precision;\n}","import { SVGPathData } from 'svg-pathdata';\nimport { svgCubicToQuad } from './svg-cubic-to-quad.ts';\nimport { round } from '../utils/round.ts';\nimport { Contour, ContourPoint } from '../types';\nimport { Point } from '../entities/point.ts';\n\nexport function svgPathToContour(pathData: SVGPathData, accuracy = 0.3): Contour[] {\n  let lastX = 0;\n  let lastY = 0;\n  let contourStartX = 0;\n  let contourStartY = 0;\n\n  let contours: Contour[] = [];\n  let contour: Contour = {\n    points: [],\n  };\n\n\n  for (let i = 0; i < pathData.commands.length; i++) {\n    const command = pathData.commands[i];\n\n    if (i === 0 || command.type === SVGPathData.MOVE_TO) {\n      contour = {\n        points: [],\n      };\n      contours.push(contour);\n    }\n\n    switch (command.type) {\n      case SVGPathData.MOVE_TO: {\n        contour.points.push({ x: command.x, y: command.y, onCurve: true });\n\n        lastX = command.x;\n        lastY = command.y;\n        contourStartX = lastX;\n        contourStartY = lastY;\n        break;\n      }\n      case SVGPathData.VERT_LINE_TO: {\n        contour.points.push({ x: lastX, y: command.y, onCurve: true });\n\n        lastY = command.y;\n        break;\n      }\n      case SVGPathData.HORIZ_LINE_TO: {\n        contour.points.push({ x: command.x, y: lastY, onCurve: true });\n\n        lastX = command.x;\n        break;\n      }\n      case SVGPathData.LINE_TO: {\n        contour.points.push({ x: command.x, y: command.y, onCurve: true });\n\n        lastX = command.x;\n        lastY = command.y;\n        break;\n      }\n      case SVGPathData.CURVE_TO: {\n        const quadCurves = svgCubicToQuad(\n          lastX, lastY,\n          command.x1, command.y1,\n          command.x2, command.y2,\n          command.x, command.y,\n          accuracy,\n        );\n        lastX = command.x;\n        lastY = command.y;\n\n        for (let i = 2; i < quadCurves.length; i += 4) {\n          contour.points.push({ x: round(quadCurves[i]), y: round(quadCurves[i + 1]), onCurve: false });\n          contour.points.push({ x: round(quadCurves[i + 2]), y: round(quadCurves[i + 3]), onCurve: true });\n\n          lastX = quadCurves[i + 2];\n          lastY = quadCurves[i + 3];\n        }\n\n        break;\n      }\n      case SVGPathData.QUAD_TO: {\n        contour.points.push({ x: command.x1, y: command.y1, onCurve: false });\n        contour.points.push({ x: command.x, y: command.y, onCurve: true });\n\n        lastX = command.x1;\n        lastY = command.y1;\n        break;\n      }\n      case SVGPathData.CLOSE_PATH: {\n        lastX = contourStartX;\n        lastY = contourStartY;\n        break;\n      }\n      default:\n        throw new Error(`Type ${command.type} not implemented`);\n    }\n  }\n\n  contours = simplify(contours, 0.3);\n  contours = simplify(contours, 0.3);\n  contours = interpolate(contours, 1.1);\n  contours = removeClosingReturnPoints(contours);\n  contours = toRelative(contours);\n\n  return contours;\n}\n\nfunction simplify(contours: Contour[], accuracy: number): Contour[] {\n  for (let i = 0; i < contours.length; i++) {\n    const contour = contours[i];\n\n    let curr: ContourPoint;\n    let prev: ContourPoint;\n    let next: ContourPoint;\n\n    for (let i = contour.points.length - 2; i > 1; i--) {\n      prev = contour.points[i - 1];\n      next = contour.points[i + 1];\n      curr = contour.points[i];\n\n      if (prev.onCurve && next.onCurve) {\n        const p = new Point(curr.x, curr.y);\n        const pPrev = new Point(prev.x, prev.y);\n        const pNext = new Point(next.x, next.y);\n        if (Point.isInLine(pPrev, p, pNext, accuracy)) {\n          contour.points.splice(i, 1);\n        }\n      }\n    }\n  }\n  return contours;\n}\n\nfunction interpolate(contours: Contour[], accuracy: number): Contour[] {\n  return contours.map<Contour>((contour: Contour) => {\n    const resContour: Contour = {\n      points: [],\n    };\n\n    for (let i = 0; i < contour.points.length; i++) {\n      const point: ContourPoint = contour.points[i];\n      if (i === 0 || i === (contour.points.length - 1)) {\n        resContour.points.push({\n          x: Math.round(point.x),\n          y: Math.round(point.y),\n          onCurve: point.onCurve,\n        });\n        continue;\n      }\n\n      const prev = contour.points[i - 1];\n      const next = contour.points[i + 1];\n\n      if (!prev.onCurve && point.onCurve && !next.onCurve) {\n        const p = new Point(point.x, point.y);\n        const pPrev = new Point(prev.x, prev.y);\n        const pNext = new Point(next.x, next.y);\n        if (pPrev.add(pNext).div(2).sub(p).dist() < accuracy) {\n          continue;\n        }\n      }\n      resContour.points.push({\n        x: Math.round(point.x),\n        y: Math.round(point.y),\n        onCurve: point.onCurve,\n      });\n    }\n    return resContour;\n  });\n}\n\nfunction removeClosingReturnPoints(contours: Contour[]): Contour[] {\n  return contours.map((contour: Contour) => {\n    const length = contour.points.length;\n\n    if (length > 1 &&\n      contour.points[0].x === contour.points[length - 1].x &&\n      contour.points[0].y === contour.points[length - 1].y) {\n      contour.points.splice(length - 1);\n    }\n    return contour;\n  });\n}\n\nfunction toRelative(contours: Contour[]): Contour[] {\n  let prevPoint = { x: 0, y: 0 };\n  const resContours: Contour[] = [];\n  let resContour: Contour;\n\n  for (let i = 0; i < contours.length; i++) {\n    const contour = contours[i];\n\n    resContour = {\n      points: [],\n    };\n    resContours.push(resContour);\n    for (let j = 0; j < contour.points.length; j++) {\n      const point = contour.points[j];\n      resContour.points.push({\n        x: point.x - prevPoint.x,\n        y: point.y - prevPoint.y,\n        onCurve: point.onCurve\n      });\n      prevPoint = point;\n    }\n  }\n\n  return resContours;\n}","import { Contour, ContourPoint } from '../types';\nimport { svgPathToContour } from '../svg-helpers/svg-path-to-contour.ts';\nimport { SVGPathData } from 'svg-pathdata';\n\nexport interface GlyphConstructorArgs {\n  id: number;\n  name: string;\n  path: string;\n  codepoint: number;\n  height: number;\n  width: number;\n}\n\nexport class Glyph {\n  id: number;\n  name: string;\n  contours: Contour[];\n  codepoint: number;\n  height: number;\n  width: number;\n  flags: number[];\n  allX: number[];\n  allY: number[];\n  sizeBytes: number;\n\n  constructor(args: GlyphConstructorArgs) {\n    this.id = args.id;\n    this.name = args.name;\n\n    this.codepoint = args.codepoint;\n    this.width = args.width;\n    this.height = args.height;\n\n    this.flags = [];\n    this.allX = [];\n    this.allY = [];\n\n    if (!args.path) {\n      this.contours = [];\n      this.sizeBytes = 0;\n      return;\n    }\n\n    const pathData = new SVGPathData(args.path).toAbs().aToC().normalizeST();\n    this.contours = svgPathToContour(pathData, 0.3);\n    this.sizeBytes = 12 + (this.contours.length * 2); // glyph fixed properties\n\n    for (let i = 0; i < this.contours.length; i++) {\n      const contour = this.contours[i];\n\n      for (let j = 0; j < contour.points.length; j++) {\n        const point = contour.points[j];\n\n        const flag = this._pointToFlag(point);\n        this.flags.push(flag);\n\n        // Collect all x points\n        if (point.x !== 0) {\n          this.allX.push(point.x);\n\n          // add 1 or 2 bytes for each coordinate depends on its size\n          this.sizeBytes += (-0xFF <= point.x && point.x <= 0xFF) ? 1 : 2;\n        }\n        if (point.y !== 0) {\n          this.allY.push(point.y);\n\n          // add 1 or 2 bytes for each coordinate depends on its size\n          this.sizeBytes += (-0xFF <= point.y && point.y <= 0xFF) ? 1 : 2;\n        }\n      }\n    }\n\n    this._simplifyFlags();\n\n    this.sizeBytes += this.flags.length;\n\n    if (this.sizeBytes % 4 !== 0) { // glyph size must be divisible by 4.\n      this.sizeBytes += 4 - this.sizeBytes % 4;\n    }\n  }\n\n  private _simplifyFlags() {\n    const result: number[] = [];\n    let prevFlag = -1;\n    let firstRepeat = false;\n\n    for (let i = 0; i < this.flags.length; i++) {\n      const flag = this.flags[i];\n      if (prevFlag === flag) {\n        if (firstRepeat) {\n          result[result.length - 1] += 8; // current flag repeats previous one, need to set 3rd bit of previous flag and set 1 to the current one\n          result.push(1);\n          firstRepeat = false;\n        } else {\n          result[result.length - 1]++; // when flag is repeating second or more times, we need to increase the last flag value\n        }\n      } else {\n        firstRepeat = true;\n        prevFlag = flag;\n        result.push(flag);\n      }\n    }\n\n    this.flags = result;\n  }\n\n  private _pointToFlag(point: ContourPoint): number {\n    let flag = point.onCurve ? 1 : 0;\n\n    // Compute flags\n    if (point.x === 0) {\n      flag += 16;\n    } else {\n      if (-0xFF <= point.x && point.x <= 0xFF) {\n        flag += 2; // the corresponding x-coordinate is 1 byte long\n      }\n      if (point.x > 0 && point.x <= 0xFF) {\n        flag += 16; // If x-Short Vector is set, this bit describes the sign of the value, with 1 equalling positive and 0 negative\n      }\n    }\n    if (point.y === 0) {\n      flag += 32;\n    } else {\n      if (-0xFF <= point.y && point.y <= 0xFF) {\n        flag += 4; // the corresponding y-coordinate is 1 byte long\n      }\n      if (point.y > 0 && point.y <= 0xFF) {\n        flag += 32; // If y-Short Vector is set, this bit describes the sign of the value, with 1 equalling positive and 0 negative.\n      }\n    }\n    return flag;\n  }\n\n  get xMin(): number {\n    let xMin = 0;\n    let hasPoints = false;\n\n    for (let i = 0; i < this.contours.length; i++) {\n      const contour = this.contours[i];\n\n      for (let j = 0; j < contour.points.length; j++) {\n        const point = contour.points[j];\n        xMin = Math.min(xMin, Math.floor(point.x));\n        hasPoints = true;\n      }\n    }\n\n    if (xMin < -32768) {\n      throw new Error('xMin value for glyph ' + (this.name ? ('\"' + this.name + '\"') : JSON.stringify(this.codepoint)) +\n        ' is out of bounds (actual ' + xMin + ', expected -32768..32767)');\n    }\n    return hasPoints ? xMin : 0;\n  }\n\n  get xMax(): number {\n    let xMax = 0;\n    let hasPoints = false;\n\n    for (let i = 0; i < this.contours.length; i++) {\n      const contour = this.contours[i];\n\n      for (let j = 0; j < contour.points.length; j++) {\n        const point = contour.points[j];\n        xMax = Math.max(xMax, -Math.floor(-point.x));\n        hasPoints = true;\n      }\n    }\n\n    if (xMax > 32767) {\n      throw new Error('xMax value for glyph ' + (this.name ? ('\"' + this.name + '\"') : JSON.stringify(this.codepoint)) +\n        ' is out of bounds (actual ' + xMax + ', expected -32768..32767)');\n    }\n    return hasPoints ? xMax : this.width;\n  }\n\n  get yMin(): number {\n    let yMin = 0;\n    let hasPoints = false;\n\n    for (let i = 0; i < this.contours.length; i++) {\n      const contour = this.contours[i];\n\n      for (let j = 0; j < contour.points.length; j++) {\n        const point = contour.points[j];\n        yMin = Math.min(yMin, Math.floor(point.y));\n        hasPoints = true;\n      }\n    }\n\n    if (yMin < -32768) {\n      throw new Error('yMin value for glyph ' + (this.name ? ('\"' + this.name + '\"') : JSON.stringify(this.codepoint)) +\n        ' is out of bounds (actual ' + yMin + ', expected -32768..32767)');\n    }\n    return hasPoints ? yMin : 0;\n  }\n\n  get yMax(): number {\n    let yMax = 0;\n    let hasPoints = false;\n\n    for (let i = 0; i < this.contours.length; i++) {\n      const contour = this.contours[i];\n\n      for (let j = 0; j < contour.points.length; j++) {\n        const point = contour.points[j];\n        yMax = Math.max(yMax, -Math.floor(-point.y));\n        hasPoints = true;\n      }\n    }\n\n    if (yMax > 32767) {\n      throw new Error('yMax value for glyph ' + (this.name ? ('\"' + this.name + '\"') : JSON.stringify(this.codepoint)) +\n        ' is out of bounds (actual ' + yMax + ', expected -32768..32767)');\n    }\n    return hasPoints ? yMax : 0;\n  }\n}\n","import { Glyph } from './glyph.ts';\n\nexport interface Ligature {\n  ligature: string;\n  unicode: number[];\n  glyph: Glyph;\n}\n\nexport interface LigatureGroup {\n  codePoint: number;\n  ligatures: Ligature[];\n  startGlyph: Glyph;\n}\n\nexport interface Panose {\n  familyType: number;\n  serifStyle: number;\n  weight: number;\n  proportion: number;\n  contrast: number;\n  strokeVariation: number;\n  armStyle: number;\n  letterform: number;\n  midline: number;\n  xHeight: number;\n}\n\nexport interface SfntName {\n  id: number;\n  value: string;\n}\n\nexport class Font {\n  id: string = '';\n  description: string = '';\n  url: string = '';\n  ascent: number = 0;\n  copyright: string = '';\n  createdDate: Date = new Date();\n  glyphs: Glyph[] = [];\n  missingGlyph?: {\n    d?: string;\n    width?: number;\n    height?: number;\n  }\n  ligatures: Ligature[] = [];\n  codePoints: { [key: number]: Glyph } = {};\n  isFixedPitch: number = 0;\n  italicAngle: number = 0;\n  familyClass: number = 0; // No Classification\n  familyName: string = '';\n  subfamilyName: string = '';\n  fsSelection: number = 0x40 | 0x80;\n  fsType: number = 0;\n  lowestRecPPEM: number = 8;\n  macStyle: number = 0;\n  modifiedDate: Date = new Date();\n  panose: Panose = {\n    familyType: 2,\n    serifStyle: 0,\n    weight: 5,\n    proportion: 3,\n    contrast: 0,\n    strokeVariation: 0,\n    armStyle: 0,\n    letterform: 0,\n    midline: 0,\n    xHeight: 0,\n  };\n  revision: number = 1;\n  sfntNames: SfntName[] = [];\n  stretch: string = 'normal';\n  metadata?: string;\n  underlineThickness: number = 0;\n  unitsPerEm: number = 1000;\n  weightClass: number | string = 400; // normal\n  width: number = 1000;\n  widthClass: number = 5; // Medium (normal)\n  ySubscriptXOffset: number = 0;\n  ySuperscriptXOffset: number = 0;\n  horizOriginX: number = 0;\n  horizOriginY: number = 0;\n  vertOriginX: number = 0;\n  vertOriginY: number = 0;\n  xHeight: number = 0;\n  height: number = 0;\n  capHeight: number = 0;\n  ttf_glyph_size: number = 0;\n  int_descent: number = -150;\n\n  private int_ySubscriptXSize?: number;\n  private int_ySubscriptYSize?: number;\n  private int_ySubscriptYOffset?: number;\n  private int_ySuperscriptXSize?: number;\n  private int_ySuperscriptYSize?: number;\n  private int_ySuperscriptYOffset?: number;\n  private int_yStrikeoutSize?: number;\n  private int_yStrikeoutPosition?: number;\n  private int_lineGap?: number;\n  private int_underlinePosition?: number;\n\n  get descent(): number {\n    return this.int_descent;\n  }\n\n  set descent(value: number) {\n    this.int_descent = parseInt(Math.round(-Math.abs(value)).toString(), 10);\n  }\n\n  get avgCharWidth(): number {\n    if (this.glyphs.length === 0) {\n      return 0;\n    }\n\n    const fullWith = this.glyphs.reduce<number>((acc, cur) => acc + cur.width, 0);\n    const advWidth = fullWith / this.glyphs.length;\n\n    return parseInt(advWidth.toString(), 10);\n  }\n\n  get ySubscriptXSize(): number {\n    return parseInt((this.int_ySubscriptXSize !== undefined ? this.int_ySubscriptXSize : (this.width * 0.6347)).toString(), 10);\n  }\n\n  set ySubscriptXSize(value: number) {\n    this.int_ySubscriptXSize = value;\n  }\n\n  get ySubscriptYSize(): number {\n    return parseInt((this.int_ySubscriptYSize !== undefined ? this.int_ySubscriptYSize : ((this.ascent - this.descent) * 0.7)).toString(), 10);\n  }\n\n  set ySubscriptYSize(value: number) {\n    this.int_ySubscriptYSize = value;\n  }\n\n  get ySubscriptYOffset(): number {\n    return parseInt((this.int_ySubscriptYOffset !== undefined ? this.int_ySubscriptYOffset : ((this.ascent - this.descent) * 0.14)).toString(), 10);\n  }\n\n  set ySubscriptYOffset(value: number) {\n    this.int_ySubscriptYOffset = value;\n  }\n\n  get ySuperscriptXSize(): number {\n    return parseInt((this.int_ySuperscriptXSize !== undefined ? this.int_ySuperscriptXSize : (this.width * 0.6347)).toString(), 10);\n  }\n\n  set ySuperscriptXSize(value: number) {\n    this.int_ySuperscriptXSize = value;\n  }\n\n  get ySuperscriptYSize(): number {\n    return parseInt((this.int_ySuperscriptYSize !== undefined ? this.int_ySuperscriptYSize : ((this.ascent - this.descent) * 0.7)).toString(), 10);\n  }\n\n  set ySuperscriptYSize(value: number) {\n    this.int_ySuperscriptYSize = value;\n  }\n\n  get ySuperscriptYOffset(): number {\n    return parseInt((this.int_ySuperscriptYOffset !== undefined ? this.int_ySuperscriptYOffset : ((this.ascent - this.descent) * 0.48)).toString(), 10);\n  }\n\n  set ySuperscriptYOffset(value: number) {\n    this.int_ySuperscriptYOffset = value;\n  }\n\n  get yStrikeoutSize(): number {\n    return parseInt((this.int_yStrikeoutSize !== undefined ? this.int_yStrikeoutSize : ((this.ascent - this.descent) * 0.049)).toString(), 10);\n  }\n\n  set yStrikeoutSize(value: number) {\n    this.int_yStrikeoutSize = value;\n  }\n\n  get yStrikeoutPosition(): number {\n    return parseInt((this.int_yStrikeoutPosition !== undefined ? this.int_yStrikeoutPosition : ((this.ascent - this.descent) * 0.258)).toString(), 10);\n  }\n\n  set yStrikeoutPosition(value: number) {\n    this.int_yStrikeoutPosition = value;\n  }\n\n  get minLsb(): number {\n    const minValue = Math.min(...this.glyphs.map(g => g.xMin));\n    return parseInt(minValue.toString(), 10);\n  }\n\n  get minRsb(): number {\n    if (!this.glyphs.length) {\n      return parseInt(this.width.toString(), 10);\n    }\n\n    const value = this.glyphs.reduce((minRsb, glyph) => Math.min(minRsb, glyph.width - glyph.xMax), 0)\n\n    return parseInt(value.toString(), 10);\n  }\n\n  get xMin(): number {\n    if (!this.glyphs.length) {\n      return this.width;\n    }\n    return this.glyphs.reduce((xMin, glyph) => Math.min(xMin, glyph.xMin), 0);\n  }\n\n  get yMin(): number {\n    if (!this.glyphs.length) {\n      // noinspection JSSuspiciousNameCombination\n      return this.width;\n    }\n    return this.glyphs.reduce((yMin, glyph) => Math.min(yMin, glyph.yMin), 0);\n  }\n\n  get xMax(): number {\n    if (!this.glyphs.length) {\n      return this.width;\n    }\n    return this.glyphs.reduce((xMax, glyph) => Math.max(xMax, glyph.xMax), 0);\n  }\n\n  get yMax(): number {\n    if (!this.glyphs.length) {\n      // noinspection JSSuspiciousNameCombination\n      return this.width;\n    }\n    return this.glyphs.reduce((yMax, glyph) => Math.max(yMax, glyph.yMax), 0);\n  }\n\n  get avgWidth(): number {\n    const len = this.glyphs.length;\n    if (len === 0) {\n      return this.width;\n    }\n    const sumWidth = this.glyphs.reduce((sumWidth, glyph) => sumWidth + glyph.width, 0);\n    return Math.round(sumWidth / len);\n  }\n\n  get maxWidth(): number {\n    if (!this.glyphs.length) return this.width;\n    return this.glyphs.reduce((maxWidth, glyph) => Math.max(maxWidth, glyph.width), 0);\n  }\n\n  get maxExtent(): number {\n    if (!this.glyphs.length) {\n      return this.width;\n    }\n    return this.glyphs.reduce((maxExtent, glyph) => Math.max(maxExtent, glyph.xMax), 0);\n  }\n\n  get lineGap(): number {\n    return parseInt((this.int_lineGap !== undefined ? this.int_lineGap : ((this.ascent - this.descent) * 0.09)).toString(), 10);\n  }\n\n  set lineGap(value: number) {\n    this.int_lineGap = value;\n  }\n\n  get underlinePosition(): number {\n    return parseInt((this.int_underlinePosition !== undefined ? this.int_underlinePosition : ((this.ascent - this.descent) * 0.01)).toString(), 10);\n  }\n\n  set underlinePosition(value: number) {\n    this.int_underlinePosition = value;\n  }\n}\n\nexport class FontTTF {\n\n}","export class BufferByte {\n\n  buffer: Uint8Array;\n\n  start: number;\n\n  length: number;\n\n  offset: number;\n\n  private _logPosition?: number;\n\n  constructor(buffer: number | BufferByte, start?: number, length?: number) {\n    if (buffer instanceof BufferByte) {\n      this.buffer = buffer.buffer;\n      this.start = (start || 0) + buffer.start;\n    } else {\n      this.buffer = new Uint8Array(buffer);\n      this.start = start || 0;\n    }\n    this.length = length || (this.buffer.length - this.start)\n    this.offset = 0;\n  }\n\n  getUint8(pos: number): number {\n    return this.buffer[pos + this.start];\n  }\n\n  getUint16(pos: number): number {\n    const first = this.buffer[pos + 1 + this.start];\n    return first + (this.buffer[pos + this.start] << 8 >>> 0);\n  }\n\n  getUint32(pos: number): number {\n    let val = this.buffer[pos + 1 + this.start] << 16;\n    val |= this.buffer[pos + 2 + this.start] << 8;\n    val |= this.buffer[pos + 3 + this.start];\n    val += this.buffer[pos + this.start] << 24 >>> 0;\n    return val;\n  }\n\n  setUint8(pos: number, value: number): void {\n    this.buffer[pos + this.start] = value & 0xFF;\n  }\n\n  setUint16(pos: number, value: number): void {\n    const offset = pos + this.start;\n    this.buffer[offset] = (value >>> 8) & 0xFF;\n    this.buffer[offset + 1] = value & 0xFF;\n  }\n\n  setUint32(pos: number, value: number): void {\n    const offset = pos + this.start;\n    this.buffer[offset] = (value >>> 24) & 0xFF;\n    this.buffer[offset + 1] = (value >>> 16) & 0xFF;\n    this.buffer[offset + 2] = (value >>> 8) & 0xFF;\n    this.buffer[offset + 3] = value & 0xFF;\n  }\n\n  writeUint8(value: number): void {\n    this.buffer[this.offset + this.start] = value & 0xFF;\n    this.offset++;\n  }\n\n  writeInt8(value: number): void {\n    this.setUint8(this.offset, (value < 0) ? 0xFF + value + 1 : value);\n    this.offset++;\n  }\n\n  writeUint16(value: number): void {\n    this.setUint16(this.offset, value);\n    this.offset += 2;\n  }\n\n  writeInt16(value: number): void {\n    this.setUint16(this.offset, (value < 0) ? 0xFFFF + value + 1 : value);\n    this.offset += 2;\n  }\n\n  writeUint32(value: number): void {\n    this.setUint32(this.offset, value);\n    this.offset += 4;\n  }\n\n  writeInt32(value: number): void {\n    this.setUint32(this.offset, (value < 0) ? 0xFFFFFFFF + value + 1 : value);\n    this.offset += 4;\n  }\n\n  writeUint64(value: number): void {\n    const hi = Math.floor(value / 4294967296);\n    const lo = value - hi * 4294967296;\n    this.writeUint32(hi);\n    this.writeUint32(lo);\n  }\n\n  /**\n   * Returns current position (offset)\n   */\n  tell(): number {\n    return this.offset;\n  }\n\n  /**\n   * Set current position (offset)\n   * @param pos\n   */\n  seek(pos: number): void {\n    this.offset = pos;\n  }\n\n  fill(value: number): void {\n    let index = this.length - 1;\n    while (index >= 0) {\n      this.buffer[index + this.start] = value;\n      index--;\n    }\n  }\n\n  writeBytes(data: ArrayLike<number>): void {\n    const offset = this.offset + this.start;\n    this.buffer.set(data, offset);\n    this.offset += data.length;\n  }\n\n  slice(offset = 0, length?: number): Uint8Array {\n    length = length || (this.length - offset);\n    const start = offset + this.start;\n    const end = start + length;\n\n    let index = 0\n    const buffer = new Uint8Array(length);\n    for (let i = start; i < end; i++) {\n      buffer[index++] = this.buffer[i];\n    }\n    return buffer;\n  }\n\n  toString(offset = 0, length?: number): string {\n    length = length || (this.length - offset);\n\n    const start = offset + this.start;\n    const end = start + length;\n\n    let string = '';\n    for (let i = start; i < end; i++) {\n      string += String.fromCharCode(this.buffer[i]);\n    }\n    return string;\n  }\n\n  startLog() {\n    if ((this.offset % 32) === 0) {\n      this._logPosition = this.offset;\n    } else {\n      this._logPosition = Math.floor(this.offset / 32) * 32;\n    }\n  }\n\n  endLog() {\n    if (this._logPosition == null) {\n      throw new Error('You need call from method before');\n    }\n\n    const length = Math.ceil((this.offset - this._logPosition) / 32) * 32;\n\n    this.log(this._logPosition, length);\n    this._logPosition = undefined;\n  }\n\n  log(offset?: number, length?: number) {\n    const renderBytes = (bytes: number[]) => {\n      return bytes.reduce((acc, byte) => {\n        if (byte <= 0x1F || (byte >= 0x7F && byte <= 0xA0) || byte === 0xFF || byte === 0xA8) {\n          return acc + '.';\n        }\n\n        const char = String.fromCodePoint(byte);\n        if (/^\\s+$/.test(char)) {\n          return acc + ' ';\n        }\n        return acc + char;\n      }, '');\n    }\n\n    const buffer = offset == null ? this.buffer : this.slice(offset, length);\n    const addressLength = buffer.length.toString(16).length;\n    const line = `─`.repeat(49 + addressLength + 4);\n\n    const ascii = [];\n\n    process.stdout.write(`\\x1b[2;37m${line}\\x1b[0m\\n`);\n    for (let i = 0; i < buffer.length; i++) {\n      /** @type {number} */\n      const byte = buffer[i];\n\n      // Render address column\n      if (i % 16 === 0) {\n        const address = (i + (offset || 0)).toString(16).toUpperCase().padStart(addressLength, '0');\n        process.stdout.write(`\\x1b[0;30;107m ${address} \\x1b[0m  `);\n      }\n\n      if (byte === 0) {\n        process.stdout.write('\\x1b[2;37m00\\x1b[0m ');\n      } else if (byte === 255) {\n        process.stdout.write('\\x1b[2;33mFF\\x1b[0m ');\n      } else {\n        const byteHex = byte.toString(16).padStart(2, '0').toUpperCase();\n        process.stdout.write(byteHex + ' ');\n      }\n      ascii.push(byte);\n\n      if (i > 0 && (i + 1) % 8 === 0) {\n        process.stdout.write('  ');\n      }\n\n      if (i > 0 && (i + 1) % 16 === 0) {\n        process.stdout.write(` \\x1b[2;37m${renderBytes(ascii)}\\x1b[0m\\n`);\n        ascii.length = 0;\n      }\n    }\n    process.stdout.write(`\\n\\x1b[2;37m${line}\\x1b[0m\\n`);\n\n    console.log('\\x1b[0;97mTotal:\\x1b[0m \\x1b[0;94m%i\\x1b[0m \\x1b[0;93m0x%s\\x1b[0m Bytes', buffer.length, buffer.length.toString(16).toUpperCase());\n  }\n\n  toArray() {\n    return this.buffer.subarray(this.start, this.start + this.length);\n  }\n}","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\n\nfunction tableSize(font: Font, names: Uint8Array[]): number {\n  let result = 36; // table header\n\n  result += font.glyphs.length * 2; // name declarations\n  names.forEach(name => {\n    result += name.length;\n  });\n  return result;\n}\n\nexport function createPostTable(font: Font): BufferByte {\n  const names: Uint8Array[] = [];\n  const buf = new BufferByte(tableSize(font, names));\n\n  buf.writeInt32(0x20000); // formatType,  version 2.0\n  buf.writeInt32(font.italicAngle); // italicAngle\n  buf.writeInt16(font.underlinePosition); // underlinePosition\n  buf.writeInt16(font.underlineThickness); // underlineThickness\n  buf.writeUint32(font.isFixedPitch); // isFixedPitch\n  buf.writeUint32(0); // minMemType42\n  buf.writeUint32(0); // maxMemType42\n  buf.writeUint32(0); // minMemType1\n  buf.writeUint32(0); // maxMemType1\n  buf.writeUint16(font.glyphs.length); // numberOfGlyphs\n\n  // Array of glyph name indexes\n  let index = 258; // first index of custom glyph name, it is calculated as glyph name index + 258\n\n  // Array of glyph name indexes\n  names.forEach(name => {\n    buf.writeBytes(name);\n  });\n\n  return buf;\n}\n","export function tableIdentifier(value: string, littleEndian?: number): number {\n  let result = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    result = result << 8;\n    let index = littleEndian ? value.length - i - 1 : i;\n\n    result += value.charCodeAt(index);\n  }\n\n  return result;\n}\n\nexport function stringToAscII(str: string): Uint8Array {\n  const bytes: number[] = [];\n  const len = str ? (str.length < 256 ? str.length : 255) : 0;\n\n  bytes.push(len);\n  for (let i = 0; i < len; i++) {\n    const char = str.charCodeAt(i);\n\n    // non-ASCII characters are substituted with '_'\n    bytes.push(char < 128 ? char : 95);\n  }\n  return Uint8Array.from(bytes);\n}\n\nexport function toUTF8Bytes(str: string): Uint8Array {\n  const byteArray = [];\n\n  for (let i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) <= 0x7F) {\n      byteArray.push(str.charCodeAt(i));\n    } else {\n      const h = encodeURIComponent(str.charAt(i)).slice(1).split('%');\n\n      for (let j = 0; j < h.length; j++) {\n        byteArray.push(parseInt(h[j], 16));\n      }\n    }\n  }\n\n  return Uint8Array.from(byteArray);\n}\n\nexport function toUCS2Bytes(str: string): Uint8Array {\n  const byteArray = [];\n  let ch;\n\n  for (let i = 0; i < str.length; ++i) {\n    ch = str.charCodeAt(i);  // get char\n    byteArray.push(ch >> 8);\n    byteArray.push(ch & 0xFF);\n  }\n  return Uint8Array.from(byteArray);\n}\n\nexport function dateToUInt64(date: Date): number {\n  const startDate = new Date('1904-01-01T00:00:00.000Z');\n  return Math.floor((date.getTime() - startDate.getTime()) / 1000);\n}\n\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\nimport { toUCS2Bytes, toUTF8Bytes } from '../../../utils/string-to-bytes.ts';\n\nconst TTF_NAMES = {\n  COPYRIGHT: 0,\n  FONT_FAMILY: 1,\n  ID: 3,\n  DESCRIPTION: 10,\n  URL_VENDOR: 11\n};\n\ninterface Name {\n  data: Uint8Array;\n  id: number;\n  platformID: number;\n  encodingID: number;\n  languageID: number;\n}\n\nfunction tableSize(names: Name[]): number {\n  let result = 6; // table header\n\n  names.forEach(name => {\n    result += 12 + name.data.length; //name header and data\n  });\n  return result;\n}\n\nfunction getStrings(name: string, id: number): Name[] {\n  const result: Name[] = [];\n\n  result.push({ data: toUTF8Bytes(name), id: id, platformID: 1, encodingID: 0, languageID: 0 }); //mac standard\n  result.push({ data: toUCS2Bytes(name), id: id, platformID: 3, encodingID: 1, languageID: 0x409 }); //windows standard\n  return result;\n}\n\n/**\n * Collect font names\n * @param font\n */\nfunction getNames(font: Font): Name[] {\n  const result: Name[] = [];\n\n  if (font.copyright) {\n    result.push(...getStrings(font.copyright, TTF_NAMES.COPYRIGHT));\n  }\n  if (font.familyName) {\n    result.push(...getStrings(font.familyName, TTF_NAMES.FONT_FAMILY));\n  }\n  if (font.id) {\n    result.push(...getStrings(font.id, TTF_NAMES.ID));\n  }\n  result.push(...getStrings(font.description, TTF_NAMES.DESCRIPTION));\n  result.push(...getStrings(font.url, TTF_NAMES.URL_VENDOR));\n\n  font.sfntNames.forEach(sfntName => {\n    result.push(...getStrings(sfntName.value, sfntName.id));\n  });\n\n  result.sort((a, b) => {\n    const orderFields: (keyof Name)[] = ['platformID', 'encodingID', 'languageID', 'id'];\n\n    for (const field of orderFields) {\n      if (a[field] !== b[field]) {\n        return a[field] < b[field] ? -1 : 1;\n      }\n    }\n    return 0;\n  });\n\n  return result;\n}\n\nexport function createNameTable(font: Font): BufferByte {\n  const names = getNames(font);\n\n  const buf = new BufferByte(tableSize(names));\n\n  buf.writeUint16(0); // formatSelector\n  buf.writeUint16(names.length); // nameRecordsCount\n  const offsetPosition = buf.tell();\n\n  buf.writeUint16(0); // offset, will be filled later\n  let nameOffset = 0;\n\n  names.forEach(name => {\n    buf.writeUint16(name.platformID); // platformID\n    buf.writeUint16(name.encodingID); // platEncID\n    buf.writeUint16(name.languageID); // languageID, English (USA)\n    buf.writeUint16(name.id); // nameID\n    buf.writeUint16(name.data.length); // reclength\n    buf.writeUint16(nameOffset); // offset\n    nameOffset += name.data.length;\n  });\n  const actualStringDataOffset = buf.tell();\n\n  //Array of bytes with actual string data\n  names.forEach(name => {\n    buf.writeBytes(name.data);\n  });\n\n  //write actual string data offset\n  buf.seek(offsetPosition);\n  buf.writeUint16(actualStringDataOffset); // offset\n\n  return buf;\n}\n\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\n\nexport function createGlyfTable(font: Font): BufferByte {\n  let tableSize = 0;\n  for (let i = 0; i < font.glyphs.length; i++) {\n    tableSize += font.glyphs[i].sizeBytes;\n  }\n  font.ttf_glyph_size = tableSize;\n\n  const buf = new BufferByte(tableSize);\n\n  for (let i = 0; i < font.glyphs.length; i++) {\n    const glyph = font.glyphs[i];\n\n    // Ignore glyphs without outlines. These will get a length of zero in the \"loca\" table\n    if (!glyph.contours.length) {\n      continue;\n    }\n\n    const offset = buf.tell();\n\n    buf.writeInt16(glyph.contours.length); // numberOfContours\n    buf.writeInt16(glyph.xMin); // xMin\n    buf.writeInt16(glyph.yMin); // yMin\n    buf.writeInt16(glyph.xMax); // xMax\n    buf.writeInt16(glyph.yMax); // yMax\n\n    // Array of end points\n    let endPtsOfContours = -1;\n    const contours = glyph.contours;\n    for (let j = 0; j < contours.length; j++) {\n      const contour = contours[j];\n\n      endPtsOfContours += contour.points.length;\n      buf.writeInt16(endPtsOfContours);\n    }\n    buf.writeInt16(0); // instructionLength, is not used here\n\n    // Array of flags\n    for (let j = 0; j < glyph.flags.length; j++) {\n      buf.writeInt8(glyph.flags[j]);\n    }\n\n    // Array of X relative coordinates\n    for (let j = 0; j < glyph.allX.length; j++) {\n      const x = glyph.allX[j];\n      if (-0xFF <= x && x <= 0xFF) {\n        buf.writeUint8(Math.abs(x));\n      } else {\n        buf.writeInt16(x);\n      }\n    }\n\n    // Array of Y relative coordinates\n    for (let j = 0; j < glyph.allY.length; j++) {\n      const y = glyph.allY[j];\n      if (-0xFF <= y && y <= 0xFF) {\n        buf.writeUint8(Math.abs(y));\n      } else {\n        buf.writeInt16(y);\n      }\n    }\n\n    let tail = (buf.tell() - offset) % 4;\n\n    if (tail !== 0) { // glyph size must be divisible by 4.\n      for (; tail < 4; tail++) {\n        buf.writeUint8(0);\n      }\n    }\n  }\n\n  return buf;\n}\n\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\nimport { Glyph } from '../../../entities/glyph.ts';\n\nfunction tableSize(font: Font, isShortFormat: boolean): number {\n  return (font.glyphs.length + 1) * (isShortFormat ? 2 : 4); // by glyph count + tail\n}\n\nexport function createLocaTable(font: Font): BufferByte {\n  const isShortFormat = font.ttf_glyph_size < 0x20000;\n\n  const buf = new BufferByte(tableSize(font, isShortFormat));\n\n  let location = 0;\n\n  // Array of offsets in GLYF table for each glyph\n  font.glyphs.forEach((glyph: Glyph) => {\n    if (isShortFormat) {\n      buf.writeUint16(location);\n      location += glyph.sizeBytes / 2; // actual location must be divided to 2 in short format\n    } else {\n      buf.writeUint32(location);\n      location += glyph.sizeBytes; // actual location is stored as is in long format\n    }\n  });\n\n  // The last glyph location is stored to get last glyph length\n  if (isShortFormat) {\n    buf.writeUint16(location);\n  } else {\n    buf.writeUint32(location);\n  }\n\n  return buf;\n}\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\nimport { Glyph } from '../../../entities/glyph.ts';\n\ninterface Segment {\n  start: number;\n  end: number;\n  length?: number;\n}\n\ninterface CodePoint {\n  unicode: number;\n  glyph: Glyph;\n}\n\ninterface TableHeader {\n  platformID: number;\n  encodingID: number;\n  table: BufferByte;\n}\n\nfunction getIDByUnicode(font: Font, unicode: number): number {\n  return font.codePoints[unicode] ? font.codePoints[unicode].id : 0;\n}\n\nfunction getSegments(font: Font, bounds?: number): Segment[] {\n  bounds = bounds || Number.MAX_VALUE;\n\n  const result: Segment[] = [];\n  let segment: Segment | undefined;\n\n  Object.keys(font.codePoints).forEach(unicode => {\n    const unicodeNum = parseInt(unicode, 10);\n    if (unicodeNum >= bounds) {\n      return false;\n    }\n    if (!segment || unicodeNum !== (segment.end + 1)) {\n      if (segment) {\n        result.push(segment);\n      }\n      segment = {\n        start: unicodeNum,\n        end: unicodeNum\n      };\n    } else {\n      segment.end = unicodeNum;\n    }\n  });\n\n  if (segment) {\n    result.push(segment);\n  }\n\n  result.forEach(segment => {\n    segment.length = segment.end - segment.start + 1;\n  });\n\n  return result;\n}\n\nfunction getCodePoints(codePoints: Font['codePoints'], bounds?: number): CodePoint[] {\n  bounds = bounds || Number.MAX_VALUE;\n\n  const result: CodePoint[] = [];\n\n  Object.entries(codePoints).forEach(([unicode, glyph]) => {\n    const unicodeNum = parseInt(unicode, 10);\n    if (unicodeNum > bounds) {\n      return false;\n    }\n    result.push({\n      unicode: unicodeNum,\n      glyph: glyph\n    });\n  });\n  return result;\n}\n\nfunction bufferForTable(format: number, length: number): BufferByte {\n  const fieldWidth = format === 8 || format === 10 || format === 12 || format === 13 ? 4 : 2;\n\n  length += (0\n    + fieldWidth // Format\n    + fieldWidth // Length\n    + fieldWidth // Language\n  );\n\n  const LANGUAGE = 0;\n  const buffer = new BufferByte(length);\n\n  const writer = fieldWidth === 4 ? buffer.writeUint32 : buffer.writeUint16;\n\n  buffer.writeUint16(format);\n  if (fieldWidth === 4) {\n    buffer.writeUint16(0);\n  }\n  writer.call(buffer, length);\n  writer.call(buffer, LANGUAGE);\n\n  return buffer;\n}\n\nfunction createFormat0Table(font: Font): BufferByte {\n  const FORMAT = 0;\n  const length = 0xff + 1;\n\n  const buffer = bufferForTable(FORMAT, length);\n\n  for (let i = 0; i < length; i++) {\n    buffer.writeUint8(getIDByUnicode(font, i));\n  }\n  return buffer;\n}\n\nfunction createFormat4Table(font: Font): BufferByte {\n  const FORMAT = 4;\n\n  const segments = getSegments(font, 0xFFFF);\n  const glyphIndexArrays: number[][] = [];\n\n  segments.forEach(segment => {\n    const glyphIndexArray: number[] = [];\n\n    for (let unicode = segment.start; unicode <= segment.end; unicode++) {\n      glyphIndexArray.push(getIDByUnicode(font, unicode));\n    }\n    glyphIndexArrays.push(glyphIndexArray);\n  });\n\n  const segCount = segments.length + 1;\n\n  const glyphIndexArrayLength = glyphIndexArrays.reduce((acc, glyphIndex) => acc + glyphIndex.length, 0);\n\n  /**\n   * +2 segCountX2\n   * +2 searchRange\n   * +2 entrySelector\n   * +2 rangeShift\n   * +2 Padding\n   */\n  const length = (\n    10\n    + 2 * segCount // endCodes\n    + 2 * segCount //startCodes\n    + 2 * segCount //idDeltas\n    + 2 * segCount //idRangeOffsets\n    + 2 * glyphIndexArrayLength\n  );\n\n  const buffer = bufferForTable(FORMAT, length);\n\n  buffer.writeUint16(segCount * 2);\n  const maxExponent = Math.floor(Math.log(segCount) / Math.LN2);\n  const searchRange = 2 * Math.pow(2, maxExponent);\n\n  buffer.writeUint16(searchRange);\n  buffer.writeUint16(maxExponent);\n  buffer.writeUint16(2 * segCount - searchRange);\n\n  segments.forEach(segment => {\n    buffer.writeUint16(segment.end);\n  });\n  buffer.writeUint16(0xFFFF);\n\n  buffer.writeUint16(0);\n\n  segments.forEach(segment => {\n    buffer.writeUint16(segment.start);\n  });\n  buffer.writeUint16(0xFFFF);\n\n  for (let i = 0; i < segments.length; i++) {\n    buffer.writeUint16(0);\n  }\n  buffer.writeUint16(1);\n\n  let offset = 0;\n\n  for (let i = 0; i < segments.length; i++) {\n    buffer.writeUint16(2 * ((segments.length - i + 1) + offset));\n    offset += glyphIndexArrays[i].length;\n  }\n  buffer.writeUint16(0);\n\n  glyphIndexArrays.forEach(glyphIndexArray => {\n    glyphIndexArray.forEach(glyphId => {\n      buffer.writeUint16(glyphId);\n    });\n  });\n\n  return buffer;\n}\n\nfunction createFormat12Table(font: Font): BufferByte {\n  const FORMAT = 12;\n\n  const codePoints = getCodePoints(font.codePoints);\n\n  const length = (\n    4 // nGroups\n    + 4 * codePoints.length // startCharCode\n    + 4 * codePoints.length // endCharCode\n    + 4 * codePoints.length // startGlyphCode\n  );\n\n  const buffer = bufferForTable(FORMAT, length);\n\n  buffer.writeUint32(codePoints.length);\n  codePoints.forEach(codePoint => {\n    buffer.writeUint32(codePoint.unicode);\n    buffer.writeUint32(codePoint.unicode);\n    buffer.writeUint32(codePoint.glyph.id);\n  });\n\n  return buffer;\n}\n\nexport function createCMapTable(font: Font): BufferByte {\n  /**\n   * +2 platform\n   * +2 encoding\n   * +4 offset\n   */\n  const TABLE_HEAD = 8;\n\n  const singleByteTable = createFormat0Table(font);\n  const twoByteTable = createFormat4Table(font);\n  const fourByteTable = createFormat12Table(font);\n\n  const tableHeaders: TableHeader[] = [\n    {\n      platformID: 0,\n      encodingID: 3,\n      table: twoByteTable\n    },\n    {\n      platformID: 0,\n      encodingID: 4,\n      table: fourByteTable\n    },\n    {\n      platformID: 1,\n      encodingID: 0,\n      table: singleByteTable\n    },\n    {\n      platformID: 3,\n      encodingID: 1,\n      table: twoByteTable\n    },\n    {\n      platformID: 3,\n      encodingID: 10,\n      table: fourByteTable\n    }\n  ];\n\n  const tables = [\n    twoByteTable,\n    singleByteTable,\n    fourByteTable\n  ];\n\n  /**\n   * +2 version\n   * +2 number of subtable headers\n   */\n  let tableOffset = 4 + tableHeaders.length * TABLE_HEAD;\n\n  tables.forEach(table => {\n    (table as any)._tableOffset = tableOffset;\n    tableOffset += table.length;\n  });\n\n  const length = tableOffset;\n\n  const buffer = new BufferByte(length);\n\n  buffer.writeUint16(0);\n  buffer.writeUint16(tableHeaders.length);\n\n  tableHeaders.forEach(header => {\n    buffer.writeUint16(header.platformID);\n    buffer.writeUint16(header.encodingID);\n    buffer.writeUint32((header.table as any)._tableOffset);\n  });\n\n  tables.forEach(table => {\n    buffer.writeBytes(table.buffer);\n  });\n\n  return buffer;\n}\n\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\nimport { Glyph } from '../../../entities/glyph.ts';\n\nexport function createHtmxTable(font: Font): BufferByte {\n  const buf = new BufferByte(font.glyphs.length * 4);\n\n  font.glyphs.forEach((glyph: Glyph) => {\n    buf.writeUint16(glyph.width); // advanceWidth\n    buf.writeInt16(glyph.xMin); // lsb\n  });\n\n  return buf;\n}\n","import { tableIdentifier } from '../../../utils/string-to-bytes.ts';\nimport { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font, Ligature, LigatureGroup } from '../../../entities/font.ts';\n\nfunction createScript(): BufferByte {\n  /**\n   * +2 Script DefaultLangSys Offset\n   * +2 Script[0] LangSysCount (0)\n   */\n  const scriptRecord = 4;\n  /**\n   * +2 Script DefaultLangSys LookupOrder\n   * +2 Script DefaultLangSys ReqFeatureIndex\n   * +2 Script DefaultLangSys FeatureCount (0?)\n   * +2 Script Optional Feature Index[0]\n   */\n  const langSys = 8;\n\n  const length = scriptRecord + langSys;\n\n  const buffer = new BufferByte(length);\n\n  // Script Record\n  // Offset to the start of langSys from the start of scriptRecord\n  buffer.writeUint16(scriptRecord); // DefaultLangSys\n\n  // Number of LangSys entries other than the default (none)\n  buffer.writeUint16(0);\n\n  // LangSys record (DefaultLangSys)\n  // LookupOrder\n  buffer.writeUint16(0);\n  // ReqFeatureIndex -> only one required feature: all ligatures\n  buffer.writeUint16(0);\n  // Number of FeatureIndex values for this language system (excludes the required feature)\n  buffer.writeUint16(1);\n  // FeatureIndex for the first optional feature\n  buffer.writeUint16(0);\n\n  return buffer;\n}\n\nfunction createScriptList(): BufferByte {\n  /**\n   * +4 Tag\n   * +2 Offset\n   */\n  const scriptSize = 6;\n\n  // tags should be arranged alphabetically\n  const scripts: [string, BufferByte][] = [\n    ['DFLT', createScript()],\n    ['latn', createScript()]\n  ];\n\n  /**\n   * +2 Script count\n   */\n  const header = 2 + scripts.length * scriptSize;\n\n  const sizes = scripts.map((script) => script[1].length);\n  const tableLengths = sizes.reduce((result, count) => result + count, 0);\n\n  const length = header + tableLengths;\n\n  const buffer = new BufferByte(length);\n\n  // Script count\n  buffer.writeUint16(scripts.length);\n\n  // Write all ScriptRecords\n  let offset = header;\n\n  scripts.forEach(script => {\n    const name = script[0], table = script[1];\n\n    // Script identifier (DFLT/latn)\n    buffer.writeUint32(tableIdentifier(name));\n    // Offset to the ScriptRecord from start of the script list\n    buffer.writeUint16(offset);\n    // Increment offset by script table length\n    offset += table.length;\n  });\n\n  // Write all ScriptTables\n  scripts.forEach(script => {\n    const table = script[1];\n\n    buffer.writeBytes(table.buffer);\n  });\n\n  return buffer;\n}\n\n// Write one feature containing all ligatures\nfunction createFeatureList(): BufferByte {\n  /**\n   * +2 FeatureCount\n   * +4 FeatureTag[0]\n   * +2 Feature Offset[0]\n   */\n  const header = 8;\n  /**\n   * +2 FeatureParams[0]\n   * +2 LookupCount[0]\n   * +2 Lookup[0] LookupListIndex[0]\n   */\n  const length = header + 6;\n\n  const buffer = new BufferByte(length);\n\n  // FeatureCount\n  buffer.writeUint16(1);\n  // FeatureTag[0]\n  buffer.writeUint32(tableIdentifier('liga'));\n  // Feature Offset[0]\n  buffer.writeUint16(header);\n  // FeatureParams[0]\n  buffer.writeUint16(0);\n  // LookupCount[0]\n  buffer.writeUint16(1);\n  // Index into lookup table. Since we only have ligatures, the index is always 0\n  buffer.writeUint16(0);\n\n  return buffer;\n}\n\nfunction createLigatureCoverage(font: Font, ligatureGroups: LigatureGroup[]): BufferByte {\n  const glyphCount = ligatureGroups.length;\n\n  /**\n   * +2 CoverageFormat\n   * +2 GlyphCount\n   */\n  const length = 4 + (2 * glyphCount);\n\n  const buffer = new BufferByte(length);\n\n  // CoverageFormat\n  buffer.writeUint16(1);\n\n  // Length\n  buffer.writeUint16(glyphCount);\n\n  ligatureGroups.forEach(group => {\n    buffer.writeUint16(group.startGlyph.id);\n  });\n\n  return buffer;\n}\n\nfunction createLigatureTable(font: any, ligature: any): BufferByte {\n  const allCodePoints = font.codePoints;\n\n  const unicode = ligature.unicode;\n  /**\n   * +2 LigGlyph\n   * +2 CompCount\n   */\n  const length = 4 + 2 * (unicode.length - 1);\n\n  const buffer = new BufferByte(length);\n\n  // LigGlyph\n  let glyph = ligature.glyph;\n\n  buffer.writeUint16(glyph.id);\n\n  // CompCount\n  buffer.writeUint16(unicode.length);\n\n  // Compound glyphs (excluding first as it’s already in the coverage table)\n  for (let i = 1; i < unicode.length; i++) {\n    glyph = allCodePoints[unicode[i]];\n    buffer.writeUint16(glyph.id);\n  }\n\n  return buffer;\n}\n\nfunction createLigatureSet(font: Font, codePoint: number, ligatures: Ligature[]): BufferByte {\n  const ligatureTables: BufferByte[] = [];\n\n  ligatures.forEach(ligature => {\n    ligatureTables.push(createLigatureTable(font, ligature));\n  });\n\n  const tableLengths = ligatureTables.reduce((acc, l) => acc + l.length, 0);\n\n  /**\n   * +2 LigatureCount\n   */\n  let offset = 2 + 2 * ligatures.length;\n\n  const length = offset + tableLengths;\n\n  const buffer = new BufferByte(length);\n\n  // LigatureCount\n  buffer.writeUint16(ligatures.length);\n\n  // Ligature offsets\n  ligatureTables.forEach(table => {\n    // The offset to the current set, from SubstFormat\n    buffer.writeUint16(offset);\n    offset += table.length;\n  });\n\n  // Ligatures\n  ligatureTables.forEach(table => {\n    buffer.writeBytes(table.buffer);\n  });\n\n  return buffer;\n}\n\nfunction createLigatureList(font: Font, ligatureGroups: LigatureGroup[]): BufferByte {\n  const sets: BufferByte[] = [];\n\n  ligatureGroups.forEach(group => {\n    const set = createLigatureSet(font, group.codePoint, group.ligatures);\n\n    sets.push(set);\n  });\n\n  const setLengths = sets.reduce((acc, item) => acc + item.length, 0);\n\n  const coverage = createLigatureCoverage(font, ligatureGroups);\n\n  /**\n   * +2 Lookup type\n   * +2 Lokup flag\n   * +2 SubTableCount\n   * +2 SubTable[0] Offset\n   */\n  const tableOffset = 8;\n  /**\n   * +2 SubstFormat\n   * +2 Coverage offset\n   * +2 LigSetCount\n   */\n  let setOffset = 6  + 2 * sets.length;\n\n  const coverageOffset = setOffset + setLengths;\n\n  const length = tableOffset + coverageOffset + coverage.length;\n\n  const buffer = new BufferByte(length);\n\n  // Lookup type 4 – ligatures\n  buffer.writeUint16(4);\n\n  // Lookup flag – empty\n  buffer.writeUint16(0);\n\n  // Subtable count\n  buffer.writeUint16(1);\n\n  // Subtable[0] offset\n  buffer.writeUint16(tableOffset);\n\n  // SubstFormat\n  buffer.writeUint16(1);\n\n  // Coverage\n  buffer.writeUint16(coverageOffset);\n\n  // LigSetCount\n  buffer.writeUint16(sets.length);\n\n  sets.forEach(set => {\n    // The offset to the current set, from SubstFormat\n    buffer.writeUint16(setOffset);\n    setOffset += set.length;\n  });\n\n  sets.forEach((set) => {\n    buffer.writeBytes(set.buffer);\n  });\n\n  buffer.writeBytes(coverage.buffer);\n\n  return buffer;\n}\n\n// Add a lookup for each ligature\nfunction createLookupList(font: Font): BufferByte {\n  const ligatures = font.ligatures;\n\n  const groupedLigatures: { [key: number]: Ligature[] } = {};\n\n  // Group ligatures by first code point\n  ligatures.forEach(ligature => {\n    const first = ligature.unicode[0];\n\n    if (!(first in groupedLigatures)) {\n      groupedLigatures[first] = [];\n    }\n    groupedLigatures[first].push(ligature);\n  });\n\n  const ligatureGroups: LigatureGroup[] = [];\n\n  Object.entries(groupedLigatures).forEach(([_codePoint, ligatures]) => {\n    const codePoint = parseInt(_codePoint, 10);\n    // Order ligatures by length, descending\n    ligatures.sort((ligA, ligB) => ligB.unicode.length - ligA.unicode.length);\n    ligatureGroups.push({\n      codePoint: codePoint,\n      ligatures: ligatures,\n      startGlyph: font.codePoints[codePoint]\n    });\n  });\n\n  ligatureGroups.sort((a, b) => a.startGlyph.id - b.startGlyph.id);\n  /**\n   * +2 Lookup count\n   * +2 Lookup[0] offset\n   */\n  const offset = 4;\n\n  const set = createLigatureList(font, ligatureGroups);\n\n  const length = offset + set.length;\n\n  const buffer = new BufferByte(length);\n\n  // Lookup count\n  buffer.writeUint16(1);\n\n  // Lookup[0] offset\n  buffer.writeUint16(offset);\n\n  // Lookup[0]\n  buffer.writeBytes(set.buffer);\n\n  return buffer;\n}\n\nexport function createGSUBTable(font: Font): BufferByte {\n  const scriptList = createScriptList();\n  const featureList = createFeatureList();\n  const lookupList = createLookupList(font);\n\n  const lists: BufferByte[] = [scriptList, featureList, lookupList];\n\n  /**\n   * +4 Version\n   */\n  let offset = 4  + 2 * lists.length;\n\n  // Calculate offsets\n  lists.forEach(list => {\n    (list as any)['_listOffset'] = offset;\n    offset += list.length;\n  });\n\n  const length = offset;\n  const buffer = new BufferByte(length);\n\n  // Version\n  buffer.writeUint32(0x00010000);\n\n  // Offsets\n  lists.forEach(list => {\n    buffer.writeUint16((list as any)['_listOffset']);\n  });\n\n  // List contents\n  lists.forEach(list => {\n    buffer.writeBytes(list.buffer);\n  });\n\n  return buffer;\n}\n\n\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\nimport { tableIdentifier } from '../../../utils/string-to-bytes.ts';\n\n/**\n * Get first glyph unicode\n * @param font\n */\nfunction getFirstCharIndex(font: Font): number {\n  const codePoints = Object.keys(font.codePoints).map(parseInt);\n\n  return Math.max(0, Math.min(0xffff, Math.abs(Math.min(...codePoints) || 0)));\n}\n\n/**\n * Get last glyph unicode\n * @param font\n */\nfunction getLastCharIndex(font: Font): number {\n  const codePoints = Object.keys(font.codePoints).map(parseInt);\n\n  return Math.max(0, Math.min(0xffff, Math.abs(Math.max(...codePoints) || 0)));\n}\n\n// OpenType spec: https://docs.microsoft.com/en-us/typography/opentype/spec/os2\nexport function createOS2Table(font: Font): BufferByte {\n  // use at least 2 for ligatures and kerning\n  const maxContext = font.ligatures.reduce((a, l) => Math.max(a, l.unicode.length), 2);\n\n  const buf = new BufferByte(96);\n\n  // Version 5 is not supported in the Android 5 browser.\n  buf.writeUint16(4); // version\n  buf.writeInt16(font.avgWidth); // xAvgCharWidth\n  buf.writeUint16(typeof font.weightClass === 'number' ? font.weightClass : 400); // usWeightClass\n  buf.writeUint16(font.widthClass); // usWidthClass\n  buf.writeInt16(font.fsType); // fsType\n  buf.writeInt16(font.ySubscriptXSize); // ySubscriptXSize\n  buf.writeInt16(font.ySubscriptYSize); //ySubscriptYSize\n  buf.writeInt16(font.ySubscriptXOffset); // ySubscriptXOffset\n  buf.writeInt16(font.ySubscriptYOffset); // ySubscriptYOffset\n  buf.writeInt16(font.ySuperscriptXSize); // ySuperscriptXSize\n  buf.writeInt16(font.ySuperscriptYSize); // ySuperscriptYSize\n  buf.writeInt16(font.ySuperscriptXOffset); // ySuperscriptXOffset\n  buf.writeInt16(font.ySuperscriptYOffset); // ySuperscriptYOffset\n  buf.writeInt16(font.yStrikeoutSize); // yStrikeoutSize\n  buf.writeInt16(font.yStrikeoutPosition); // yStrikeoutPosition\n  buf.writeInt16(font.familyClass); // sFamilyClass\n  buf.writeUint8(font.panose.familyType); // panose.bFamilyType\n  buf.writeUint8(font.panose.serifStyle); // panose.bSerifStyle\n  buf.writeUint8(font.panose.weight); // panose.bWeight\n  buf.writeUint8(font.panose.proportion); // panose.bProportion\n  buf.writeUint8(font.panose.contrast); // panose.bContrast\n  buf.writeUint8(font.panose.strokeVariation); // panose.bStrokeVariation\n  buf.writeUint8(font.panose.armStyle); // panose.bArmStyle\n  buf.writeUint8(font.panose.letterform); // panose.bLetterform\n  buf.writeUint8(font.panose.midline); // panose.bMidline\n  buf.writeUint8(font.panose.xHeight); // panose.bXHeight\n  // TODO: This field is used to specify the Unicode blocks or ranges based on the 'cmap' table.\n  buf.writeUint32(0); // ulUnicodeRange1\n  buf.writeUint32(0); // ulUnicodeRange2\n  buf.writeUint32(0); // ulUnicodeRange3\n  buf.writeUint32(0); // ulUnicodeRange4\n  buf.writeUint32(tableIdentifier('PfEd')); // achVendID, equal to PfEd\n  buf.writeUint16(font.fsSelection); // fsSelection\n  buf.writeUint16(getFirstCharIndex(font)); // usFirstCharIndex\n  buf.writeUint16(getLastCharIndex(font)); // usLastCharIndex\n  buf.writeInt16(font.ascent); // sTypoAscender\n  buf.writeInt16(font.descent); // sTypoDescender\n  buf.writeInt16(font.lineGap); // lineGap\n  // Enlarge win acscent/descent to avoid clipping\n  // WinAscent - WinDecent should at least be equal to TypoAscender - TypoDescender + TypoLineGap:\n  // https://www.high-logic.com/font-editor/fontcreator/tutorials/font-metrics-vertical-line-spacing\n  buf.writeInt16(Math.max(font.yMax, font.ascent + font.lineGap)); // usWinAscent\n  buf.writeInt16(-Math.min(font.yMin, font.descent)); // usWinDescent\n  buf.writeInt32(1); // ulCodePageRange1, Latin 1\n  buf.writeInt32(0); // ulCodePageRange2\n  buf.writeInt16(font.xHeight); // sxHeight\n  buf.writeInt16(font.capHeight); // sCapHeight\n  buf.writeUint16(0); // usDefaultChar, pointing to missing glyph (always id=0)\n  buf.writeUint16(0); // usBreakChar, code=32 isn't guaranteed to be a space in icon fonts\n  buf.writeUint16(maxContext); // usMaxContext, use at least 2 for ligatures and kerning\n\n  return buf;\n}\n\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\n\n/**\n * Find max points in glyph TTF contours.\n * @param font\n */\nfunction getMaxPoints(font: Font): number {\n  return Math.max(...font.glyphs.map(glyph => {\n    return glyph.contours.reduce((acc, ctr) => acc + ctr.points.length, 0);\n  })) || 0;\n}\n\nfunction getMaxContours(font: Font): number {\n  return Math.max(...font.glyphs.map(glyph => glyph.contours.length)) || 0;\n}\n\nexport function createMaxpTable(font: Font): BufferByte {\n  const buf = new BufferByte(32);\n\n  buf.writeInt32(0x10000); // version\n  buf.writeUint16(font.glyphs.length); // numGlyphs\n  buf.writeUint16(getMaxPoints(font)); // maxPoints\n  buf.writeUint16(getMaxContours(font)); // maxContours\n  buf.writeUint16(0); // maxCompositePoints\n  buf.writeUint16(0); // maxCompositeContours\n  buf.writeUint16(2); // maxZones\n  buf.writeUint16(0); // maxTwilightPoints\n  // It is unclear how to calculate maxStorage, maxFunctionDefs and maxInstructionDefs.\n  // These are magic constants now, with values exceeding values from FontForge\n  buf.writeUint16(10); // maxStorage\n  buf.writeUint16(10); // maxFunctionDefs\n  buf.writeUint16(0); // maxInstructionDefs\n  buf.writeUint16(255); // maxStackElements\n  buf.writeUint16(0); // maxSizeOfInstructions\n  buf.writeUint16(0); // maxComponentElements\n  buf.writeUint16(0); // maxComponentDepth\n\n  return buf;\n}\n\n\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\nimport { dateToUInt64 } from '../../../utils/string-to-bytes.ts';\n\nexport function createHeadTable(font: Font): BufferByte {\n  const buf = new BufferByte(54); // fixed table length\n\n  buf.writeInt32(0x10000); // version\n  buf.writeInt32(font.revision * 0x10000); // fontRevision\n  buf.writeUint32(0); // checkSumAdjustment\n  buf.writeUint32(0x5F0F3CF5); // magicNumber\n  // FLag meanings:\n  // Bit 0: Baseline for font at y=0;\n  // Bit 1: Left sidebearing point at x=0;\n  // Bit 3: Force ppem to integer values for all internal scaler math; may use fractional ppem sizes if this bit is clear;\n  buf.writeUint16(0x000B); // flags\n  buf.writeUint16(font.unitsPerEm); // unitsPerEm\n  buf.writeUint64(dateToUInt64(font.createdDate)); // created\n  buf.writeUint64(dateToUInt64(font.modifiedDate)); // modified\n  buf.writeInt16(font.xMin); // xMin\n  buf.writeInt16(font.yMin); // yMin\n  buf.writeInt16(font.xMax); // xMax\n  buf.writeInt16(font.yMax); // yMax\n  buf.writeUint16(font.macStyle); //macStyle\n  buf.writeUint16(font.lowestRecPPEM); // lowestRecPPEM\n  buf.writeInt16(2); // fontDirectionHint\n  buf.writeInt16(font.ttf_glyph_size < 0x20000 ? 0 : 1); // indexToLocFormat, 0 for short offsets, 1 for long offsets\n  buf.writeInt16(0); // glyphDataFormat\n\n  return buf;\n}\n\n","import { BufferByte } from '../../../entities/buffer-byte.ts';\nimport { Font } from '../../../entities/font.ts';\n\nexport function createHHeadTable(font: Font): BufferByte {\n  const buf = new BufferByte(36); // fixed table length\n\n  buf.writeInt32(0x10000); // version\n  buf.writeInt16(font.ascent); // ascent\n  buf.writeInt16(font.descent); // descend\n  // Non zero lineGap causes offset in IE, https://github.com/fontello/svg2ttf/issues/37\n  buf.writeInt16(0); // lineGap\n  buf.writeUint16(font.maxWidth); // advanceWidthMax\n  buf.writeInt16(font.minLsb); // minLeftSideBearing\n  buf.writeInt16(font.minRsb); // minRightSideBearing\n  buf.writeInt16(font.maxExtent); // xMaxExtent\n  buf.writeInt16(1); // caretSlopeRise\n  buf.writeInt16(0); // caretSlopeRun\n  buf.writeUint32(0); // reserved1\n  buf.writeUint32(0); // reserved2\n  buf.writeUint16(0); // reserved3\n  buf.writeInt16(0); // metricDataFormat\n  buf.writeUint16(font.glyphs.length); // numberOfHMetrics\n\n  return buf;\n}\n","import { BufferByte } from '../entities/buffer-byte.ts';\n\nexport function unsignedLong(t: number): number {\n  t &= 0xffffffff;\n  if (t < 0) {\n    t += 0x100000000;\n  }\n  return t;\n}\n\nexport function computeChecksum(buffer: BufferByte): number {\n  let sum = 0;\n  const longs = Math.floor(buffer.length / 4);\n\n  for (let i = 0; i < longs; ++i) {\n    const t = buffer.getUint32(i * 4);\n    sum = unsignedLong(sum + t);\n  }\n\n  const leftBytes = buffer.length - longs * 4;\n\n  if (leftBytes > 0) {\n    let leftRes = 0;\n\n    for (let i = 0; i < 4; i++) {\n      leftRes = (leftRes << 8) + ((i < leftBytes) ? buffer.getUint8(longs * 4 + i) : 0);\n    }\n    sum = unsignedLong(sum + leftRes);\n  }\n  return sum;\n}\n","import { Transform, TransformCallback } from 'node:stream';\nimport { Buffer } from 'node:buffer';\nimport { BufferWithMeta, SymbolMeta } from '../../types/types.ts';\nimport { Glyph } from '../../entities/glyph.ts';\nimport { Font } from '../../entities/font.ts';\nimport { createPostTable } from './tables/post.ts';\nimport { createNameTable } from './tables/name.ts';\nimport { createGlyfTable } from './tables/glyf.ts';\nimport { createLocaTable } from './tables/loca.ts';\nimport { createCMapTable } from './tables/cmap.ts';\nimport { createHtmxTable } from './tables/hmtx.ts';\nimport { createGSUBTable } from './tables/gsub.ts';\nimport { createOS2Table } from './tables/os2.ts';\nimport { createMaxpTable } from './tables/maxp.ts';\nimport { createHeadTable } from './tables/head.ts';\nimport { createHHeadTable } from './tables/hhea.ts';\nimport { slugify } from '../../utils/slugify.ts';\nimport { tableIdentifier } from '../../utils/string-to-bytes.ts';\nimport { TTFTable } from '../../types';\nimport { BufferByte } from '../../entities/buffer-byte.ts';\nimport { computeChecksum, unsignedLong } from '../../utils/compute-checksum.ts';\n\nexport class TransformToTTFFont extends Transform {\n\n  private readonly _fontName: string;\n\n  private readonly _metadata?: string;\n\n  private _size: number = 0;\n\n  private _isInitialized = false;\n\n  private _glyphs: Glyph[] = [];\n\n  private _glyphsByCode: { [codePoint: number]: Glyph } = {};\n\n  private static _TABLES: TTFTable[] = [\n    { innerName: 'GSUB', order: 4, create: createGSUBTable },\n    { innerName: 'OS/2', order: 4, create: createOS2Table },\n    { innerName: 'cmap', order: 6, create: createCMapTable },\n    { innerName: 'glyf', order: 8, create: createGlyfTable },\n    { innerName: 'head', order: 2, create: createHeadTable },\n    { innerName: 'hhea', order: 1, create: createHHeadTable },\n    { innerName: 'hmtx', order: 5, create: createHtmxTable },\n    { innerName: 'loca', order: 7, create: createLocaTable },\n    { innerName: 'maxp', order: 3, create: createMaxpTable },\n    { innerName: 'name', order: 9, create: createNameTable },\n    { innerName: 'post', order: 10, create: createPostTable }\n  ];\n\n  private static _VERSION = 0x10000;\n\n  private static _CHECKSUM_ADJUSTMENT = 0xB1B0AFBA;\n\n  constructor(fontName: string, metadata?: string) {\n    super({ objectMode: true });\n\n    this._fontName = fontName;\n    this._metadata = metadata;\n  }\n\n  _init(chunk: BufferWithMeta<SymbolMeta>) {\n    if (this._isInitialized) return;\n    this._isInitialized = true;\n\n    this._size = Math.max(chunk.metadata.width, chunk.metadata.height);\n\n    this._glyphs.push(new Glyph({\n      id: 0,\n      name: '',\n      path: '',\n      codepoint: 0,\n      width: 0,\n      height: this._size,\n    }));\n  }\n\n  _transform(chunk: BufferWithMeta<SymbolMeta>, _encoding: BufferEncoding, callback: TransformCallback) {\n    this._init(chunk);\n\n    const glyph = new Glyph({\n      id: this._glyphs.length,\n      name: chunk.metadata.name,\n      path: chunk.toString(),\n      codepoint: chunk.metadata.codepoint,\n      height: chunk.metadata.height,\n      width: chunk.metadata.width,\n    });\n\n\n    this._glyphs.push(glyph);\n    this._glyphsByCode[chunk.metadata.codepoint] = glyph;\n\n    callback(null, null);\n  }\n\n  _flush(callback: TransformCallback): void {\n    const creation = new Date();\n    const slug = slugify(this._fontName);\n\n    const font = new Font();\n    font.id = slug;\n    font.familyName = this._fontName;\n    font.copyright = this._metadata || '';\n    font.description = 'The best icon font in the world';\n    font.url = 'https://github.com/itsib/icon-font';\n    font.subfamilyName = 'Regular';\n    font.stretch = 'normal';\n    font.sfntNames = [\n      { id: 2, value: 'Regular' },\n      { id: 4, value: slug },\n      { id: 5, value: 'Version 1.0' },\n      { id: 6, value: slug }\n    ];\n    font.createdDate = creation;\n    font.modifiedDate = creation;\n    font.unitsPerEm = this._size;\n    font.horizOriginX = 0;\n    font.horizOriginY = 0;\n    font.vertOriginX = 0;\n    font.vertOriginY = 0;\n    font.width = this._size;\n    font.height = this._size;\n    font.ascent = -this._size;\n    font.weightClass = 400;\n    font.capHeight = 0;\n    font.xHeight = 0;\n    font.glyphs = this._glyphs;\n    font.codePoints = this._glyphsByCode;\n    font.ligatures = [];\n\n    const headerSize = 12 + (16 * TransformToTTFFont._TABLES.length);\n    let bufSize = headerSize;\n\n    TransformToTTFFont._TABLES.forEach(table => {\n      table.buffer = table.create(font);\n      table.length = table.buffer.length;\n      table.corLength = table.length + (4 - table.length % 4) % 4;\n      table.checkSum = computeChecksum(table.buffer);\n      bufSize += table.corLength;\n    });\n\n    let offset = headerSize;\n\n    TransformToTTFFont._TABLES.forEach(table => {\n      table.offset = offset;\n      offset += table.corLength!;\n    });\n\n    const buf = new BufferByte(bufSize);\n\n    const entrySelector = Math.floor(Math.log(TransformToTTFFont._TABLES.length) / Math.LN2);\n    const searchRange = Math.pow(2, entrySelector) * 16;\n    const rangeShift = TransformToTTFFont._TABLES.length * 16 - searchRange;\n\n    buf.writeUint32(TransformToTTFFont._VERSION);\n    buf.writeUint16(TransformToTTFFont._TABLES.length);\n    buf.writeUint16(searchRange);\n    buf.writeUint16(entrySelector);\n    buf.writeUint16(rangeShift);\n\n    TransformToTTFFont._TABLES.forEach((table, index) => {\n      buf.writeUint32(tableIdentifier(table.innerName));\n      buf.writeUint32(table.checkSum!);\n      buf.writeUint32(table.offset!);\n      buf.writeUint32(table.length!);\n    });\n\n    let headOffset = 0;\n\n    // const tables2 = TABLES.sort((a, b) => b.order - a.order);\n    TransformToTTFFont._TABLES.forEach(table => {\n      if (table.innerName === 'head') {\n        headOffset = buf.tell();\n      }\n      buf.writeBytes(table.buffer!.buffer);\n      for (let i = table.length!; i < table.corLength!; i++) {\n        buf.writeUint8(0);\n      }\n    });\n\n\n    buf.setUint32(headOffset + 8, unsignedLong(TransformToTTFFont._CHECKSUM_ADJUSTMENT - computeChecksum(buf)))\n\n    callback(null, Buffer.from(buf.buffer));\n  }\n}","import { Buffer } from 'node:buffer';\nimport { Writable } from 'node:stream';\nimport { AppConfig } from '../../types';\nimport { StreamRead } from '../../streams/stream-read/stream-read.ts';\nimport { TransformPrepareIcons } from '../../streams/transform-prepare-icons/transform-prepare-icons.ts';\nimport { TransformToTTFFont } from '../../streams/transform-to-ttf-font/transform-to-ttf-font.ts';\n\nexport async function generateFontTtf(config: Omit<AppConfig, 'output'>): Promise<Buffer> {\n  return new Promise<Buffer>((resolve, reject) => {\n    const filesReadStream = new StreamRead(config.input);\n    const prepareStream = new TransformPrepareIcons();\n    const ttfFontStream = new TransformToTTFFont(config.name);\n\n    let result: Buffer;\n    const writeStream = new Writable({\n      write(chunk: Buffer, _encoding: BufferEncoding, callback: (error?: (Error | null)) => void) {\n        result = chunk;\n        callback();\n      },\n      final(callback: (error?: (Error | null)) => void) {\n        resolve(result);\n        callback();\n      },\n      destroy(error: Error | null, callback: (error?: (Error | null)) => void) {\n        if (error) {\n          reject(error);\n        }\n        callback(error);\n      }\n    });\n\n    filesReadStream.pipe(prepareStream).pipe(ttfFontStream).pipe(writeStream);\n  });\n}\n","/*\n    Author: Viktor Semykin <thesame.ml@gmail.com>\n\n    Written for fontello.com project.\n*/\n\n'use strict'\n\n/**\n * Offsets in EOT file structure. Refer to EOTPrefix in OpenTypeUtilities.cpp\n */\nvar EOT_OFFSET = {\n  LENGTH: 0,\n  FONT_LENGTH: 4,\n  VERSION: 8,\n  CHARSET: 26,\n  MAGIC: 34,\n  FONT_PANOSE: 16,\n  ITALIC: 27,\n  WEIGHT: 28,\n  UNICODE_RANGE: 36,\n  CODEPAGE_RANGE: 52,\n  CHECKSUM_ADJUSTMENT: 60\n}\n\n/**\n * Offsets in different SFNT (TTF) structures. See OpenTypeUtilities.cpp\n */\nvar SFNT_OFFSET = {\n  // sfntHeader:\n  NUMTABLES: 4,\n\n  // TableDirectoryEntry\n  TABLE_TAG: 0,\n  TABLE_OFFSET: 8,\n  TABLE_LENGTH: 12,\n\n  // OS2Table\n  OS2_WEIGHT: 4,\n  OS2_FONT_PANOSE: 32,\n  OS2_UNICODE_RANGE: 42,\n  OS2_FS_SELECTION: 62,\n  OS2_CODEPAGE_RANGE: 78,\n\n  // headTable\n  HEAD_CHECKSUM_ADJUSTMENT: 8,\n\n  // nameTable\n  NAMETABLE_FORMAT: 0,\n  NAMETABLE_COUNT: 2,\n  NAMETABLE_STRING_OFFSET: 4,\n\n  // nameRecord\n  NAME_PLATFORM_ID: 0,\n  NAME_ENCODING_ID: 2,\n  NAME_LANGUAGE_ID: 4,\n  NAME_NAME_ID: 6,\n  NAME_LENGTH: 8,\n  NAME_OFFSET: 10\n}\n\n/**\n * Sizes of structures\n */\nvar SIZEOF = {\n  SFNT_TABLE_ENTRY: 16,\n  SFNT_HEADER: 12,\n  SFNT_NAMETABLE: 6,\n  SFNT_NAMETABLE_ENTRY: 12,\n  EOT_PREFIX: 82\n}\n\n/**\n * Magic numbers\n */\nvar MAGIC = {\n  EOT_VERSION: 0x00020001,\n  EOT_MAGIC: 0x504c,\n  EOT_CHARSET: 1,\n  LANGUAGE_ENGLISH: 0x0409\n}\n\n/**\n * Utility function to convert buffer of utf16be chars to buffer of utf16le\n * chars prefixed with length and suffixed with zero\n */\nfunction strbuf (str) {\n  var arr = Buffer.alloc(str.length + 4)\n\n  arr.writeUint16LE(str.length, 0)\n\n  for (var i = 0; i < str.length; i += 2) {\n    arr.writeUint16LE(str.readUint16BE(i), i + 2)\n  }\n\n  arr.writeUint16LE(0, arr.length - 2)\n\n  return arr\n}\n\n// Takes TTF font on input and returns Uint8Array with EOT font\n//\n// Params:\n//\n// - arr(Uint8Array)\n//\nfunction ttf2eot (arr) {\n  arr = Buffer.from(arr.buffer, arr.byteOffset, arr.length)\n\n  var out = Buffer.alloc(SIZEOF.EOT_PREFIX, 0)\n  var i, j\n\n  out.writeUint32LE(arr.length, EOT_OFFSET.FONT_LENGTH)\n  out.writeUint32LE(MAGIC.EOT_VERSION, EOT_OFFSET.VERSION)\n  out.writeUint8(MAGIC.EOT_CHARSET, EOT_OFFSET.CHARSET)\n  out.writeUint16LE(MAGIC.EOT_MAGIC, EOT_OFFSET.MAGIC)\n\n  var familyName = Buffer.of(0)\n  var subfamilyName = Buffer.of(0)\n  var fullName = Buffer.of(0)\n  var versionString = Buffer.of(0)\n\n  var haveOS2 = false\n  var haveName = false\n  var haveHead = false\n\n  var numTables = arr.readUint16BE(SFNT_OFFSET.NUMTABLES)\n\n  for (i = 0; i < numTables; ++i) {\n    var data = arr.subarray(SIZEOF.SFNT_HEADER + i * SIZEOF.SFNT_TABLE_ENTRY)\n    var tableEntry = {\n      tag: String.fromCharCode.apply(null, data.subarray(SFNT_OFFSET.TABLE_TAG, SFNT_OFFSET.TABLE_TAG + 4)),\n      offset: data.readUint32BE(SFNT_OFFSET.TABLE_OFFSET),\n      length: data.readUint32BE(SFNT_OFFSET.TABLE_LENGTH)\n    }\n\n    var table = arr.subarray(tableEntry.offset, tableEntry.offset + tableEntry.length)\n\n    if (tableEntry.tag === 'OS/2') {\n      haveOS2 = true\n      var OS2Version = table.readUint16BE()\n\n      for (j = 0; j < 10; ++j) {\n        out.writeUint8(table.readUint8(SFNT_OFFSET.OS2_FONT_PANOSE + j), EOT_OFFSET.FONT_PANOSE + j)\n      }\n\n      out.writeUint8(table.readUint16BE(SFNT_OFFSET.OS2_FS_SELECTION) & 0x01, EOT_OFFSET.ITALIC)\n      out.writeUint32LE(table.readUint16BE(SFNT_OFFSET.OS2_WEIGHT), EOT_OFFSET.WEIGHT)\n\n      for (j = 0; j < 4; ++j) {\n        out.writeUint32LE(table.readUint32BE(SFNT_OFFSET.OS2_UNICODE_RANGE + j * 4),\n          EOT_OFFSET.UNICODE_RANGE + j * 4)\n      }\n\n      if (OS2Version >= 1) {\n        for (j = 0; j < 2; ++j) {\n          out.writeUint32LE(table.readUint32BE(SFNT_OFFSET.OS2_CODEPAGE_RANGE + j * 4),\n            EOT_OFFSET.CODEPAGE_RANGE + j * 4)\n        }\n      }\n\n    } else if (tableEntry.tag === 'head') {\n\n      haveHead = true\n      out.writeUint32LE(table.readUint32BE(SFNT_OFFSET.HEAD_CHECKSUM_ADJUSTMENT), EOT_OFFSET.CHECKSUM_ADJUSTMENT)\n\n    } else if (tableEntry.tag === 'name') {\n\n      haveName = true\n\n      var nameTable = {\n        format: table.readUint16BE(SFNT_OFFSET.NAMETABLE_FORMAT),\n        count: table.readUint16BE(SFNT_OFFSET.NAMETABLE_COUNT),\n        stringOffset: table.readUint16BE(SFNT_OFFSET.NAMETABLE_STRING_OFFSET)\n      }\n\n      for (j = 0; j < nameTable.count; ++j) {\n        var nameRecord = table.subarray(SIZEOF.SFNT_NAMETABLE + j * SIZEOF.SFNT_NAMETABLE_ENTRY)\n        var name = {\n          platformID: nameRecord.readUint16BE(SFNT_OFFSET.NAME_PLATFORM_ID),\n          encodingID: nameRecord.readUint16BE(SFNT_OFFSET.NAME_ENCODING_ID),\n          languageID: nameRecord.readUint16BE(SFNT_OFFSET.NAME_LANGUAGE_ID),\n          nameID: nameRecord.readUint16BE(SFNT_OFFSET.NAME_NAME_ID),\n          length: nameRecord.readUint16BE(SFNT_OFFSET.NAME_LENGTH),\n          offset: nameRecord.readUint16BE(SFNT_OFFSET.NAME_OFFSET)\n        }\n\n        if (name.platformID === 3 && name.encodingID === 1 && name.languageID === MAGIC.LANGUAGE_ENGLISH) {\n          var s = strbuf(table.subarray(\n            nameTable.stringOffset + name.offset,\n            nameTable.stringOffset + name.offset + name.length))\n\n          switch (name.nameID) {\n            case 1:\n              familyName = s\n              break\n            case 2:\n              subfamilyName = s\n              break\n            case 4:\n              fullName = s\n              break\n            case 5:\n              versionString = s\n              break\n          }\n        }\n      }\n    }\n    if (haveOS2 && haveName && haveHead) { break }\n  }\n\n  if (!(haveOS2 && haveName && haveHead)) {\n    throw new Error('Required section not found')\n  }\n\n  // Create final buffer with the the same array type as input one.\n  var eot = Buffer.concat([\n    out,\n    familyName,\n    subfamilyName,\n    versionString,\n    fullName,\n    Buffer.from([0, 0]),\n    arr\n  ])\n\n  eot.writeUint32LE(eot.length, EOT_OFFSET.LENGTH) // Calculate overall length\n\n  return new Uint8Array(eot.buffer, eot.byteOffset, eot.length)\n}\n\nmodule.exports = ttf2eot\n","import ttf2eot from 'ttf2eot';\nimport { Buffer } from 'node:buffer';\nimport { generateFontTtf } from '../font-ttf/font-ttf.js';\nimport { AppConfig } from '../../types';\n\nexport async function generateFontEotByTtf(fontTtf: Buffer): Promise<Buffer> {\n  return ttf2eot(fontTtf);\n}\n\nexport async function generateFontEot(config: Omit<AppConfig, 'output'>): Promise<Buffer> {\n  const fontTtf = await generateFontTtf(config);\n\n  return await generateFontEotByTtf(fontTtf);\n}","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","/*\n    Author: Viktor Semykin <thesame.ml@gmail.com>\n\n    Written for fontello.com project.\n*/\n\n'use strict';\n\n\nvar deflate = require('pako/lib/deflate.js').deflate;\n\n\nfunction ulong(t) {\n  /* eslint-disable no-bitwise */\n  t &= 0xffffffff;\n  if (t < 0) {\n    t += 0x100000000;\n  }\n  return t;\n}\n\nfunction longAlign(n) {\n  /* eslint-disable no-bitwise */\n  return (n + 3) & ~3;\n}\n\nfunction calc_checksum(buf) {\n  var sum = 0;\n  var nlongs = buf.length / 4;\n\n  for (var i = 0; i < nlongs; ++i) {\n    var t = buf.readUint32BE(i * 4);\n\n    sum = ulong(sum + t);\n  }\n  return sum;\n}\n\nvar WOFF_OFFSET = {\n  MAGIC: 0,\n  FLAVOR: 4,\n  SIZE: 8,\n  NUM_TABLES: 12,\n  RESERVED: 14,\n  SFNT_SIZE: 16,\n  VERSION_MAJ: 20,\n  VERSION_MIN: 22,\n  META_OFFSET: 24,\n  META_LENGTH: 28,\n  META_ORIG_LENGTH: 32,\n  PRIV_OFFSET: 36,\n  PRIV_LENGTH: 40\n};\n\nvar WOFF_ENTRY_OFFSET = {\n  TAG: 0,\n  OFFSET: 4,\n  COMPR_LENGTH: 8,\n  LENGTH: 12,\n  CHECKSUM: 16\n};\n\nvar SFNT_OFFSET = {\n  TAG: 0,\n  CHECKSUM: 4,\n  OFFSET: 8,\n  LENGTH: 12\n};\n\nvar SFNT_ENTRY_OFFSET = {\n  FLAVOR: 0,\n  VERSION_MAJ: 4,\n  VERSION_MIN: 6,\n  CHECKSUM_ADJUSTMENT: 8\n};\n\nvar MAGIC = {\n  WOFF: 0x774F4646,\n  CHECKSUM_ADJUSTMENT: 0xB1B0AFBA\n};\n\nvar SIZEOF = {\n  WOFF_HEADER: 44,\n  WOFF_ENTRY: 20,\n  SFNT_HEADER: 12,\n  SFNT_TABLE_ENTRY: 16\n};\n\nfunction woffAppendMetadata(src, metadata) {\n\n  var zdata =  deflate(metadata);\n\n  src.writeUint32BE(src.length + zdata.length, WOFF_OFFSET.SIZE);\n  src.writeUint32BE(src.length, WOFF_OFFSET.META_OFFSET);\n  src.writeUint32BE(zdata.length, WOFF_OFFSET.META_LENGTH);\n  src.writeUint32BE(metadata.length, WOFF_OFFSET.META_ORIG_LENGTH);\n\n  return Buffer.concat([ src, zdata ]);\n}\n\nfunction ttf2woff(arr, options) {\n  arr = Buffer.from(arr.buffer, arr.byteOffset, arr.length);\n\n  options = options || {};\n\n  var version = {\n    maj: 0,\n    min: 1\n  };\n  var numTables = arr.readUint16BE(4);\n  //var sfntVersion = arr.readUint32BE(0);\n  var flavor = 0x10000;\n\n  var woffHeader = Buffer.alloc(SIZEOF.WOFF_HEADER);\n\n  woffHeader.writeUint32BE(MAGIC.WOFF, WOFF_OFFSET.MAGIC);\n  woffHeader.writeUint16BE(numTables, WOFF_OFFSET.NUM_TABLES);\n  woffHeader.writeUint16BE(0, WOFF_OFFSET.RESERVED);\n  woffHeader.writeUint32BE(0, WOFF_OFFSET.SFNT_SIZE);\n  woffHeader.writeUint32BE(0, WOFF_OFFSET.META_OFFSET);\n  woffHeader.writeUint32BE(0, WOFF_OFFSET.META_LENGTH);\n  woffHeader.writeUint32BE(0, WOFF_OFFSET.META_ORIG_LENGTH);\n  woffHeader.writeUint32BE(0, WOFF_OFFSET.PRIV_OFFSET);\n  woffHeader.writeUint32BE(0, WOFF_OFFSET.PRIV_LENGTH);\n\n  var entries = [];\n\n  var i, tableEntry;\n\n  for (i = 0; i < numTables; ++i) {\n    var data = arr.subarray(SIZEOF.SFNT_HEADER + i * SIZEOF.SFNT_TABLE_ENTRY);\n\n    tableEntry = {\n      Tag: data.subarray(SFNT_OFFSET.TAG, SFNT_OFFSET.TAG + 4),\n      checkSum: data.readUint32BE(SFNT_OFFSET.CHECKSUM),\n      Offset: data.readUint32BE(SFNT_OFFSET.OFFSET),\n      Length: data.readUint32BE(SFNT_OFFSET.LENGTH)\n    };\n    entries.push (tableEntry);\n  }\n  entries = entries.sort(function (a, b) {\n    var aStr = String.fromCharCode.apply(null, a.Tag);\n    var bStr = String.fromCharCode.apply(null, b.Tag);\n\n    return aStr === bStr ? 0 : aStr < bStr ? -1 : 1;\n  });\n\n  var offset = SIZEOF.WOFF_HEADER + numTables * SIZEOF.WOFF_ENTRY;\n  var woffSize = offset;\n  var sfntSize = SIZEOF.SFNT_HEADER + numTables * SIZEOF.SFNT_TABLE_ENTRY;\n\n  var tableBuf = Buffer.alloc(numTables * SIZEOF.WOFF_ENTRY);\n\n  for (i = 0; i < numTables; ++i) {\n    tableEntry = entries[i];\n\n    if (String.fromCharCode.apply(null, tableEntry.Tag) !== 'head') {\n      var algntable = arr.subarray(tableEntry.Offset, tableEntry.Offset + longAlign(tableEntry.Length));\n\n      if (calc_checksum(algntable) !== tableEntry.checkSum) {\n        throw 'Checksum error in ' + String.fromCharCode.apply(null, tableEntry.Tag);\n      }\n    }\n\n    tableBuf.writeUint32BE(tableEntry.Tag.readUint32BE(0), i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.TAG);\n    tableBuf.writeUint32BE(tableEntry.Length, i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.LENGTH);\n    tableBuf.writeUint32BE(tableEntry.checkSum, i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.CHECKSUM);\n    sfntSize += longAlign(tableEntry.Length);\n  }\n\n  var sfntOffset = SIZEOF.SFNT_HEADER + entries.length * SIZEOF.SFNT_TABLE_ENTRY;\n  var csum = calc_checksum(arr.subarray(0, SIZEOF.SFNT_HEADER));\n\n  for (i = 0; i < entries.length; ++i) {\n    tableEntry = entries[i];\n\n    var b = Buffer.alloc(SIZEOF.SFNT_TABLE_ENTRY);\n\n    b.writeUint32BE(tableEntry.Tag.readUint32BE(0), SFNT_OFFSET.TAG);\n    b.writeUint32BE(tableEntry.checkSum, SFNT_OFFSET.CHECKSUM);\n    b.writeUint32BE(sfntOffset, SFNT_OFFSET.OFFSET);\n    b.writeUint32BE(tableEntry.Length, SFNT_OFFSET.LENGTH);\n    sfntOffset += longAlign(tableEntry.Length);\n    csum += calc_checksum(b);\n    csum += tableEntry.checkSum;\n  }\n\n  var checksumAdjustment = ulong(MAGIC.CHECKSUM_ADJUSTMENT - csum);\n\n  var len, woffDataChains = [];\n\n  for (i = 0; i < entries.length; ++i) {\n    tableEntry = entries[i];\n\n    var sfntData = arr.subarray(tableEntry.Offset, tableEntry.Offset + tableEntry.Length);\n\n    if (String.fromCharCode.apply(null, tableEntry.Tag) === 'head') {\n      version.maj = sfntData.readUint16BE(SFNT_ENTRY_OFFSET.VERSION_MAJ);\n      version.min = sfntData.readUint16BE(SFNT_ENTRY_OFFSET.VERSION_MIN);\n      flavor = sfntData.readUint32BE(SFNT_ENTRY_OFFSET.FLAVOR);\n      sfntData.writeUint32BE(checksumAdjustment, SFNT_ENTRY_OFFSET.CHECKSUM_ADJUSTMENT);\n    }\n\n    var res = deflate(sfntData);\n\n    var compLength;\n\n    // We should use compression only if it really save space (standard requirement).\n    // Also, data should be aligned to long (with zeros?).\n    compLength = Math.min(res.length, sfntData.length);\n    len = longAlign(compLength);\n\n    var woffData = Buffer.alloc(len, 0);\n\n    if (res.length >= sfntData.length) {\n      woffData.set(sfntData);\n    } else {\n      woffData.set(res);\n    }\n\n    tableBuf.writeUint32BE(offset, i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.OFFSET);\n\n    offset += woffData.length;\n    woffSize += woffData.length;\n\n    tableBuf.writeUint32BE(compLength, i * SIZEOF.WOFF_ENTRY + WOFF_ENTRY_OFFSET.COMPR_LENGTH);\n\n    woffDataChains.push(woffData);\n  }\n\n  woffHeader.writeUint32BE(woffSize, WOFF_OFFSET.SIZE);\n  woffHeader.writeUint32BE(sfntSize, WOFF_OFFSET.SFNT_SIZE);\n  woffHeader.writeUint16BE(version.maj, WOFF_OFFSET.VERSION_MAJ);\n  woffHeader.writeUint16BE(version.min, WOFF_OFFSET.VERSION_MIN);\n  woffHeader.writeUint32BE(flavor, WOFF_OFFSET.FLAVOR);\n\n  var out = Buffer.alloc(woffSize);\n  var pos = 0;\n\n  out.set(woffHeader, pos);\n  pos += woffHeader.length;\n\n  out.set(tableBuf, pos);\n  pos += tableBuf.length;\n\n  for (i = 0; i < woffDataChains.length; i++) {\n    out.set(woffDataChains[i], pos);\n    pos += woffDataChains[i].length;\n  }\n\n  if (options.metadata) {\n    out = woffAppendMetadata(out, options.metadata);\n  }\n\n  return new Uint8Array(out.buffer, out.byteOffset, out.length);\n}\n\nmodule.exports = ttf2woff;\n","import ttf2woff from 'ttf2woff';\nimport { Buffer } from 'node:buffer';\nimport { generateFontTtf } from '../font-ttf/font-ttf.js';\nimport { AppConfig } from '../../types';\n\nexport async function generateFontWoffByTtf(fontTtf: Buffer): Promise<Buffer> {\n  return ttf2woff(fontTtf);\n}\n\nexport async function generateFontWoff(config: Omit<AppConfig, 'output'>): Promise<Buffer> {\n  const fontTtf = await generateFontTtf(config);\n\n  return await generateFontWoffByTtf(fontTtf);\n}","var Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=typeof window===\"object\";var ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";var ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;var toLog=e;err(\"exiting due to exception: \"+toLog)}var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};readAsync=function readAsync(filename,onload,onerror){var ret=tryParseAsDataURI(filename);if(ret){onload(ret)}if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);nodeFS[\"readFile\"](filename,function(err,data){if(err)onerror(err);else onload(data.buffer)})};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);if(typeof module!==\"undefined\"){module[\"exports\"]=Module}quit_=function(status,toThrow){if(keepRuntimeAlive()){process[\"exitCode\"]=status;throw toThrow}logExceptionOnExit(toThrow);process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){try{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){try{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr))}else{var str=\"\";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str=\"\";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;var runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0}function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){{if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}}what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith(\"file://\")}var wasmBinaryFile;wasmBinaryFile=\"data:application/octet-stream;base64,\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"t\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"v\"];addOnInit(Module[\"asm\"][\"u\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){getWasmTableEntry(func)()}else{getWasmTableEntry(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var wasmTableMirror=[];function getWasmTableEntry(funcPtr){var func=wasmTableMirror[funcPtr];if(!func){if(funcPtr>=wasmTableMirror.length)wasmTableMirror.length=funcPtr+1;wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)}return func}function ___cxa_allocate_exception(size){return _malloc(size+16)+16}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-16;this.set_type=function(type){HEAP32[this.ptr+4>>2]=type};this.get_type=function(){return HEAP32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return\"_unknown\"}name=name.replace(/[^a-zA-Z0-9_]/g,\"$\");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return\"_\"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function(\"body\",\"return function \"+name+\"() {\\n\"+'    \"use strict\";'+\"    return body.apply(this, arguments);\\n\"+\"};\\n\")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+\"\\n\"+stack.replace(/^Error(:[^\\n]*)?\\n/,\"\")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+\": \"+this.message}};return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError(\"Mismatched type converter count\")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function registerType(rawType,registeredInstance,options){options=options||{};if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\")}var name=registeredInstance.name;if(!rawType){throwBindingError('type \"'+name+'\" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(\"Cannot register type '\"+name+\"' twice\")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb()})}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(wt){return!!wt},\"toWireType\":function(destructors,o){return o?trueValue:falseValue},\"argPackAdvance\":8,\"readValueFromPointer\":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError(\"Unknown boolean type size: \"+name)}return this[\"fromWireType\"](heap[pointer>>shift])},destructorFunction:null})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module[\"count_emval_handles\"]=count_emval_handles;Module[\"get_first_emval\"]=get_first_emval}var Emval={toValue:function(handle){if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handle_array[handle].value},toHandle:function(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}};function simpleReadValueFromPointer(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2])}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(handle){var rv=Emval.toValue(handle);__emval_decref(handle);return rv},\"toWireType\":function(destructors,value){return Emval.toHandle(value)},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:null})}function _embind_repr(v){if(v===null){return\"null\"}var t=typeof v;if(t===\"object\"||t===\"array\"||t===\"function\"){return v.toString()}else{return\"\"+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3])};default:throw new TypeError(\"Unknown float type: \"+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(value){return value},\"toWireType\":function(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name)}return value},\"argPackAdvance\":8,\"readValueFromPointer\":floatReadValueFromPointer(name,shift),destructorFunction:null})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError(\"new_ called with constructor type \"+typeof constructor+\" which is not a function\")}var dummy=createNamedFunction(constructor.name||\"unknownFunctionName\",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!==\"void\";var argsList=\"\";var argsListWired=\"\";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?\", \":\"\")+\"arg\"+i;argsListWired+=(i!==0?\", \":\"\")+\"arg\"+i+\"Wired\"}var invokerFnBody=\"return function \"+makeLegalFunctionName(humanName)+\"(\"+argsList+\") {\\n\"+\"if (arguments.length !== \"+(argCount-2)+\") {\\n\"+\"throwBindingError('function \"+humanName+\" called with ' + arguments.length + ' arguments, expected \"+(argCount-2)+\" args!');\\n\"+\"}\\n\";if(needsDestructorStack){invokerFnBody+=\"var destructors = [];\\n\"}var dtorStack=needsDestructorStack?\"destructors\":\"null\";var args1=[\"throwBindingError\",\"invoker\",\"fn\",\"runDestructors\",\"retType\",\"classParam\"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+=\"var thisWired = classParam.toWireType(\"+dtorStack+\", this);\\n\"}for(var i=0;i<argCount-2;++i){invokerFnBody+=\"var arg\"+i+\"Wired = argType\"+i+\".toWireType(\"+dtorStack+\", arg\"+i+\"); // \"+argTypes[i+2].name+\"\\n\";args1.push(\"argType\"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired=\"thisWired\"+(argsListWired.length>0?\", \":\"\")+argsListWired}invokerFnBody+=(returns?\"var rv = \":\"\")+\"invoker(fn\"+(argsListWired.length>0?\", \":\"\")+argsListWired+\");\\n\";if(needsDestructorStack){invokerFnBody+=\"runDestructors(destructors);\\n\"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?\"thisWired\":\"arg\"+(i-2)+\"Wired\";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+\"_dtor(\"+paramName+\"); // \"+argTypes[i].name+\"\\n\";args1.push(paramName+\"_dtor\");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+=\"var ret = retType.fromWireType(rv);\\n\"+\"return ret;\\n\"}else{}invokerFnBody+=\"}\\n\";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError(\"Function '\"+humanName+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+proto[methodName].overloadTable+\")!\")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(\"Cannot register public name '\"+name+\"' twice\")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\"+numArguments+\")!\")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError(\"Replacing nonexistant public symbol\")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function dynCallLegacy(sig,ptr,args){var f=Module[\"dynCall_\"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}function dynCall(sig,ptr,args){if(sig.includes(\"j\")){return dynCallLegacy(sig,ptr,args)}return getWasmTableEntry(ptr).apply(null,args)}function getDynCaller(sig,ptr){var argCache=[];return function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++){argCache[i]=arguments[i]}return dynCall(sig,ptr,argCache)}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes(\"j\")){return getDynCaller(signature,rawFunction)}return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!==\"function\"){throwBindingError(\"unknown function pointer with signature \"+signature+\": \"+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+\": \"+unboundTypes.map(getTypeName).join([\", \"]))}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError(\"Cannot call \"+name+\" due to unbound types\",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError(\"Unknown integer type: \"+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=function(value){return value};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift}}var isUnsignedType=name.includes(\"unsigned\");registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":function(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number \"'+_embind_repr(value)+'\" from JS side to C/C++ side to an argument of type \"'+name+'\", which is outside the valid range ['+minRange+\", \"+maxRange+\"]!\")}return isUnsignedType?value>>>0:value|0},\"argPackAdvance\":8,\"readValueFromPointer\":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":8,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name:name,\"fromWireType\":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}str=a.join(\"\")}_free(value);return str},\"toWireType\":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var getLength;var valueIsOfTypeString=typeof value===\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\")}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value)}}else{getLength=function(){return value.length}}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}HEAPU8[ptr+4+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i]}}}if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=function(){return HEAPU16};shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=function(){return HEAPU32};shift=2}registerType(rawType,{name:name,\"fromWireType\":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},\"toWireType\":function(destructors,value){if(!(typeof value===\"string\")){throwBindingError(\"Cannot pass non-string to C++ string type \"+name)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":function(){return undefined},\"toWireType\":function(destructors,o){return undefined}})}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+\" has unknown type \"+getTypeName(rawType))}return impl}function __emval_take_value(type,argv){type=requireRegisteredType(type,\"_emval_take_value\");var v=type[\"readValueFromPointer\"](argv);return Emval.toHandle(v)}function _abort(){abort(\"\")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}function _exit(status){exit(status)}embind_init_charCodes();BindingError=Module[\"BindingError\"]=extendError(Error,\"BindingError\");InternalError=Module[\"InternalError\"]=extendError(Error,\"InternalError\");init_emval();UnboundTypeError=Module[\"UnboundTypeError\"]=extendError(Error,\"UnboundTypeError\");var ASSERTIONS=false;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,\"Character code \"+chr+\" (\"+String.fromCharCode(chr)+\")  at offset \"+i+\" not in 0x00-0xFF.\")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join(\"\")}var decodeBase64=typeof atob===\"function\"?atob:function(input){var keyStr=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";var output=\"\";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE===\"boolean\"&&ENVIRONMENT_IS_NODE){var buf=Buffer.from(s,\"base64\");return new Uint8Array(buf[\"buffer\"],buf[\"byteOffset\"],buf[\"byteLength\"])}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error(\"Converting base64 string to bytes failed.\")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={\"f\":___cxa_allocate_exception,\"e\":___cxa_throw,\"n\":__embind_register_bigint,\"i\":__embind_register_bool,\"r\":__embind_register_emval,\"g\":__embind_register_float,\"s\":__embind_register_function,\"b\":__embind_register_integer,\"a\":__embind_register_memory_view,\"d\":__embind_register_std_string,\"c\":__embind_register_std_wstring,\"j\":__embind_register_void,\"l\":__emval_decref,\"m\":__emval_incref,\"h\":__emval_take_value,\"q\":_abort,\"o\":_emscripten_memcpy_big,\"p\":_emscripten_resize_heap,\"k\":_exit};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"u\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"w\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"x\"]).apply(null,arguments)};var ___getTypeName=Module[\"___getTypeName\"]=function(){return(___getTypeName=Module[\"___getTypeName\"]=Module[\"asm\"][\"y\"]).apply(null,arguments)};var ___embind_register_native_and_builtin_types=Module[\"___embind_register_native_and_builtin_types\"]=function(){return(___embind_register_native_and_builtin_types=Module[\"___embind_register_native_and_builtin_types\"]=Module[\"asm\"][\"z\"]).apply(null,arguments)};var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;function exit(status,implicit){EXITSTATUS=status;if(keepRuntimeAlive()){}else{exitRuntime()}procExit(status)}function procExit(code){EXITSTATUS=code;if(!keepRuntimeAlive()){if(Module[\"onExit\"])Module[\"onExit\"](code);ABORT=true}quit_(code,new ExitStatus(code))}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n","'use strict'\n\nconst em_module = require('./build/compress_binding.js')\n\nconst runtimeInit = new Promise(resolve => {\n  em_module.onRuntimeInitialized = resolve\n})\n\nmodule.exports = async function compress (buffer) {\n  await runtimeInit\n  const result = em_module.compress(buffer)\n  if (result === false) throw new Error('ConvertTTFToWOFF2 failed')\n  return result\n}\n","var Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var arguments_=[];var thisProgram=\"./this.program\";var quit_=function(status,toThrow){throw toThrow};var ENVIRONMENT_IS_WEB=typeof window===\"object\";var ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";var ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof process.versions===\"object\"&&typeof process.versions.node===\"string\";var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;var toLog=e;err(\"exiting due to exception: \"+toLog)}var nodeFS;var nodePath;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=require(\"path\").dirname(scriptDirectory)+\"/\"}else{scriptDirectory=__dirname+\"/\"}read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);return nodeFS[\"readFileSync\"](filename,binary?null:\"utf8\")};readBinary=function readBinary(filename){var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};readAsync=function readAsync(filename,onload,onerror){var ret=tryParseAsDataURI(filename);if(ret){onload(ret)}if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);nodeFS[\"readFile\"](filename,function(err,data){if(err)onerror(err);else onload(data.buffer)})};if(process[\"argv\"].length>1){thisProgram=process[\"argv\"][1].replace(/\\\\/g,\"/\")}arguments_=process[\"argv\"].slice(2);if(typeof module!==\"undefined\"){module[\"exports\"]=Module}quit_=function(status,toThrow){if(keepRuntimeAlive()){process[\"exitCode\"]=status;throw toThrow}logExceptionOnExit(toThrow);process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!==\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=function(url){try{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}};if(ENVIRONMENT_IS_WORKER){readBinary=function(url){try{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}}}readAsync=function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}setWindowTitle=function(title){document.title=title}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.warn.bind(console);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];var noExitRuntime=Module[\"noExitRuntime\"]||true;if(typeof WebAssembly!==\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr))}else{var str=\"\";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str=\"\";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module[\"HEAP8\"]=HEAP8=new Int8Array(buf);Module[\"HEAP16\"]=HEAP16=new Int16Array(buf);Module[\"HEAP32\"]=HEAP32=new Int32Array(buf);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buf);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buf);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buf);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buf);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module[\"INITIAL_MEMORY\"]||16777216;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0}function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};function abort(what){{if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}}what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -s ASSERTIONS=1 for more info.\";var e=new WebAssembly.RuntimeError(what);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith(\"file://\")}var wasmBinaryFile;wasmBinaryFile=\"data:application/octet-stream;base64,\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch===\"function\"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={\"a\":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;wasmMemory=Module[\"asm\"][\"s\"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module[\"asm\"][\"u\"];addOnInit(Module[\"asm\"][\"t\"]);removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module[\"instantiateWasm\"]){try{var exports=Module[\"instantiateWasm\"](info,receiveInstance);return exports}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}instantiateAsync();return{}}function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback(Module);continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){getWasmTableEntry(func)()}else{getWasmTableEntry(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var wasmTableMirror=[];function getWasmTableEntry(funcPtr){var func=wasmTableMirror[funcPtr];if(!func){if(funcPtr>=wasmTableMirror.length)wasmTableMirror.length=funcPtr+1;wasmTableMirror[funcPtr]=func=wasmTable.get(funcPtr)}return func}function ___cxa_allocate_exception(size){return _malloc(size+16)+16}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-16;this.set_type=function(type){HEAP32[this.ptr+4>>2]=type};this.get_type=function(){return HEAP32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return\"_unknown\"}name=name.replace(/[^a-zA-Z0-9_]/g,\"$\");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return\"_\"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function(\"body\",\"return function \"+name+\"() {\\n\"+'    \"use strict\";'+\"    return body.apply(this, arguments);\\n\"+\"};\\n\")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+\"\\n\"+stack.replace(/^Error(:[^\\n]*)?\\n/,\"\")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+\": \"+this.message}};return errorClass}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError(\"Mismatched type converter count\")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function registerType(rawType,registeredInstance,options){options=options||{};if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\")}var name=registeredInstance.name;if(!rawType){throwBindingError('type \"'+name+'\" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(\"Cannot register type '\"+name+\"' twice\")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb()})}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(wt){return!!wt},\"toWireType\":function(destructors,o){return o?trueValue:falseValue},\"argPackAdvance\":8,\"readValueFromPointer\":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError(\"Unknown boolean type size: \"+name)}return this[\"fromWireType\"](heap[pointer>>shift])},destructorFunction:null})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module[\"count_emval_handles\"]=count_emval_handles;Module[\"get_first_emval\"]=get_first_emval}var Emval={toValue:function(handle){if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handle_array[handle].value},toHandle:function(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}};function simpleReadValueFromPointer(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2])}function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(handle){var rv=Emval.toValue(handle);__emval_decref(handle);return rv},\"toWireType\":function(destructors,value){return Emval.toHandle(value)},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:null})}function _embind_repr(v){if(v===null){return\"null\"}var t=typeof v;if(t===\"object\"||t===\"array\"||t===\"function\"){return v.toString()}else{return\"\"+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3])};default:throw new TypeError(\"Unknown float type: \"+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(value){return value},\"toWireType\":function(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name)}return value},\"argPackAdvance\":8,\"readValueFromPointer\":floatReadValueFromPointer(name,shift),destructorFunction:null})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError(\"new_ called with constructor type \"+typeof constructor+\" which is not a function\")}var dummy=createNamedFunction(constructor.name||\"unknownFunctionName\",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!==\"void\";var argsList=\"\";var argsListWired=\"\";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?\", \":\"\")+\"arg\"+i;argsListWired+=(i!==0?\", \":\"\")+\"arg\"+i+\"Wired\"}var invokerFnBody=\"return function \"+makeLegalFunctionName(humanName)+\"(\"+argsList+\") {\\n\"+\"if (arguments.length !== \"+(argCount-2)+\") {\\n\"+\"throwBindingError('function \"+humanName+\" called with ' + arguments.length + ' arguments, expected \"+(argCount-2)+\" args!');\\n\"+\"}\\n\";if(needsDestructorStack){invokerFnBody+=\"var destructors = [];\\n\"}var dtorStack=needsDestructorStack?\"destructors\":\"null\";var args1=[\"throwBindingError\",\"invoker\",\"fn\",\"runDestructors\",\"retType\",\"classParam\"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+=\"var thisWired = classParam.toWireType(\"+dtorStack+\", this);\\n\"}for(var i=0;i<argCount-2;++i){invokerFnBody+=\"var arg\"+i+\"Wired = argType\"+i+\".toWireType(\"+dtorStack+\", arg\"+i+\"); // \"+argTypes[i+2].name+\"\\n\";args1.push(\"argType\"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired=\"thisWired\"+(argsListWired.length>0?\", \":\"\")+argsListWired}invokerFnBody+=(returns?\"var rv = \":\"\")+\"invoker(fn\"+(argsListWired.length>0?\", \":\"\")+argsListWired+\");\\n\";if(needsDestructorStack){invokerFnBody+=\"runDestructors(destructors);\\n\"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?\"thisWired\":\"arg\"+(i-2)+\"Wired\";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+\"_dtor(\"+paramName+\"); // \"+argTypes[i].name+\"\\n\";args1.push(paramName+\"_dtor\");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+=\"var ret = retType.fromWireType(rv);\\n\"+\"return ret;\\n\"}else{}invokerFnBody+=\"}\\n\";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError(\"Function '\"+humanName+\"' called with an invalid number of arguments (\"+arguments.length+\") - expects one of (\"+proto[methodName].overloadTable+\")!\")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError(\"Cannot register public name '\"+name+\"' twice\")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\"+numArguments+\")!\")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError(\"Replacing nonexistant public symbol\")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function dynCallLegacy(sig,ptr,args){var f=Module[\"dynCall_\"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}function dynCall(sig,ptr,args){if(sig.includes(\"j\")){return dynCallLegacy(sig,ptr,args)}return getWasmTableEntry(ptr).apply(null,args)}function getDynCaller(sig,ptr){var argCache=[];return function(){argCache.length=arguments.length;for(var i=0;i<arguments.length;i++){argCache[i]=arguments[i]}return dynCall(sig,ptr,argCache)}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes(\"j\")){return getDynCaller(signature,rawFunction)}return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!==\"function\"){throwBindingError(\"unknown function pointer with signature \"+signature+\": \"+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+\": \"+unboundTypes.map(getTypeName).join([\", \"]))}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError(\"Cannot call \"+name+\" due to unbound types\",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError(\"Unknown integer type: \"+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=function(value){return value};if(minRange===0){var bitshift=32-8*size;fromWireType=function(value){return value<<bitshift>>>bitshift}}var isUnsignedType=name.includes(\"unsigned\");registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":function(destructors,value){if(typeof value!==\"number\"&&typeof value!==\"boolean\"){throw new TypeError('Cannot convert \"'+_embind_repr(value)+'\" to '+this.name)}if(value<minRange||value>maxRange){throw new TypeError('Passing a number \"'+_embind_repr(value)+'\" from JS side to C/C++ side to an argument of type \"'+name+'\", which is outside the valid range ['+minRange+\", \"+maxRange+\"]!\")}return isUnsignedType?value>>>0:value|0},\"argPackAdvance\":8,\"readValueFromPointer\":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":8,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name:name,\"fromWireType\":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}str=a.join(\"\")}_free(value);return str},\"toWireType\":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var getLength;var valueIsOfTypeString=typeof value===\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\")}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=function(){return lengthBytesUTF8(value)}}else{getLength=function(){return value.length}}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}HEAPU8[ptr+4+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i]}}}if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=function(){return HEAPU16};shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=function(){return HEAPU32};shift=2}registerType(rawType,{name:name,\"fromWireType\":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},\"toWireType\":function(destructors,value){if(!(typeof value===\"string\")){throwBindingError(\"Cannot pass non-string to C++ string type \"+name)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":8,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":function(){return undefined},\"toWireType\":function(destructors,o){return undefined}})}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+\" has unknown type \"+getTypeName(rawType))}return impl}function __emval_take_value(type,argv){type=requireRegisteredType(type,\"_emval_take_value\");var v=type[\"readValueFromPointer\"](argv);return Emval.toHandle(v)}function _abort(){abort(\"\")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.copyWithin(dest,src,src+num)}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=2147483648;if(requestedSize>maxHeapSize){return false}for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}embind_init_charCodes();BindingError=Module[\"BindingError\"]=extendError(Error,\"BindingError\");InternalError=Module[\"InternalError\"]=extendError(Error,\"InternalError\");init_emval();UnboundTypeError=Module[\"UnboundTypeError\"]=extendError(Error,\"UnboundTypeError\");var ASSERTIONS=false;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,\"Character code \"+chr+\" (\"+String.fromCharCode(chr)+\")  at offset \"+i+\" not in 0x00-0xFF.\")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join(\"\")}var decodeBase64=typeof atob===\"function\"?atob:function(input){var keyStr=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";var output=\"\";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE===\"boolean\"&&ENVIRONMENT_IS_NODE){var buf=Buffer.from(s,\"base64\");return new Uint8Array(buf[\"buffer\"],buf[\"byteOffset\"],buf[\"byteLength\"])}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error(\"Converting base64 string to bytes failed.\")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={\"k\":___cxa_allocate_exception,\"j\":___cxa_throw,\"n\":__embind_register_bigint,\"h\":__embind_register_bool,\"q\":__embind_register_emval,\"f\":__embind_register_float,\"r\":__embind_register_function,\"b\":__embind_register_integer,\"a\":__embind_register_memory_view,\"d\":__embind_register_std_string,\"c\":__embind_register_std_wstring,\"i\":__embind_register_void,\"l\":__emval_decref,\"m\":__emval_incref,\"g\":__emval_take_value,\"e\":_abort,\"o\":_emscripten_memcpy_big,\"p\":_emscripten_resize_heap};var asm=createWasm();var ___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=function(){return(___wasm_call_ctors=Module[\"___wasm_call_ctors\"]=Module[\"asm\"][\"t\"]).apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return(_malloc=Module[\"_malloc\"]=Module[\"asm\"][\"v\"]).apply(null,arguments)};var _free=Module[\"_free\"]=function(){return(_free=Module[\"_free\"]=Module[\"asm\"][\"w\"]).apply(null,arguments)};var ___getTypeName=Module[\"___getTypeName\"]=function(){return(___getTypeName=Module[\"___getTypeName\"]=Module[\"asm\"][\"x\"]).apply(null,arguments)};var ___embind_register_native_and_builtin_types=Module[\"___embind_register_native_and_builtin_types\"]=function(){return(___embind_register_native_and_builtin_types=Module[\"___embind_register_native_and_builtin_types\"]=Module[\"asm\"][\"y\"]).apply(null,arguments)};var calledRun;function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n","'use strict'\n\nconst em_module = require('./build/decompress_binding.js')\n\nconst runtimeInit = new Promise(resolve => {\n  em_module.onRuntimeInitialized = resolve\n})\n\nmodule.exports = async function decompress (buffer) {\n  await runtimeInit\n  const result = em_module.decompress(buffer)\n  if (result === false) throw new Error('ConvertWOFF2ToTTF failed')\n  return result\n}\n","'use strict'\n\nexports.compress = require('./compress')\nexports.decompress = require('./decompress')\n","import wawoff from 'wawoff2';\nimport { Buffer } from 'node:buffer';\nimport { generateFontTtf } from '../font-ttf/font-ttf.js';\nimport { AppConfig } from '../../types';\n\nexport async function generateFontWoff2ByTtf(fontTtf: Buffer): Promise<Uint8Array> {\n  return wawoff.compress(fontTtf);\n}\n\nexport async function generateFontWoff2(config: Omit<AppConfig, 'output'>): Promise<Uint8Array> {\n  const fontTtf = await generateFontTtf(config);\n\n  return await generateFontWoff2ByTtf(fontTtf);\n}","import { SymbolMetadata } from '../../types/types.ts';\nimport { slugify } from '../../utils/slugify.js';\nimport { join } from 'node:path';\n\nconst COMMON_STYLES = `\n.icon {\n  font-family: \"{{fontName}}\", sans-serif;\n  font-weight: 500;\n  font-size: 1rem;\n  font-style: normal;\n  font-variant: normal;\n  text-rendering: auto;\n  line-height: 1;\n  display: var(--icon-display, inline-block);\n  speak: none;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n}\n\n.icon-1x {\n  font-size: 1em\n}\n.icon-2x {\n  font-size: 2em\n}\n.icon-3x {\n  font-size: 3em\n}\n.icon-4x {\n  font-size: 4em\n}\n.icon-5x {\n  font-size: 5em\n}\n.icon-6x {\n  font-size: 6em\n}\n.icon-7x {\n  font-size: 7em\n}\n.icon-8x {\n  font-size: 8em\n}\n.icon-9x {\n  font-size: 9em\n}\n.icon-10x {\n  font-size: 10em\n}\n.icon-2xs {\n  font-size: .625em;\n  line-height: .1em;\n  vertical-align: .225em\n}\n.icon-xs {\n  font-size: .75em;\n  line-height: .08333em;\n  vertical-align: .125em\n}\n.icon-sm {\n  font-size: .875em;\n  line-height: .07143em;\n  vertical-align: .05357em\n}\n.icon-lg {\n  font-size: 1.25em;\n  line-height: .05em;\n  vertical-align: -.075em\n}\n.icon-xl {\n  font-size: 1.5em;\n  line-height: .04167em;\n  vertical-align: -.125em\n}\n.icon-2xl {\n  font-size: 2em;\n  line-height: .03125em;\n  vertical-align: -.1875em\n}\n.icon-fw {\n  text-align: center;\n  width: 1.25em\n}\n\n.icon-beat {\n  animation-name: icon-motion-beat;\n  animation-delay: var(--icon-animation-delay, 0s);\n  animation-direction: var(--icon-animation-direction, normal);\n  animation-duration: var(--icon-animation-duration, 1s);\n  animation-iteration-count: var(--icon-animation-iteration-count, infinite);\n  animation-timing-function: var(--icon-animation-timing, ease-in-out)\n}\n\n.icon-bounce {\n  animation-name: icon-motion-bounce;\n  animation-delay: var(--icon-animation-delay, 0s);\n  animation-direction: var(--icon-animation-direction, normal);\n  animation-duration: var(--icon-animation-duration, 1s);\n  animation-iteration-count: var(--icon-animation-iteration-count, infinite);\n  animation-timing-function: var(--icon-animation-timing, cubic-bezier(.28,.84,.42,1));\n}\n\n.icon-fade {\n  animation-name: icon-motion-fade;\n  animation-iteration-count: var(--icon-animation-iteration-count, infinite);\n  animation-timing-function: var(--icon-animation-timing, cubic-bezier(.4,0,.6,1));\n}\n\n.icon-beat-fade,\n.icon-fade {\n  animation-delay: var(--icon-animation-delay,0s);\n  animation-direction: var(--icon-animation-direction,normal);\n  animation-duration: var(--icon-animation-duration,1s);\n}\n\n.icon-beat-fade {\n  animation-name: icon-motion-beat-fade;\n  animation-iteration-count: var(--icon-animation-iteration-count,infinite);\n  animation-timing-function: var(--icon-animation-timing,cubic-bezier(.4,0,.6,1));\n}\n\n.icon-flip {\n  animation-name: icon-motion-flip;\n  animation-delay: var(--icon-animation-delay,0s);\n  animation-direction: var(--icon-animation-direction,normal);\n  animation-duration: var(--icon-animation-duration,1s);\n  animation-iteration-count: var(--icon-animation-iteration-count,infinite);\n  animation-timing-function: var(--icon-animation-timing,ease-in-out);\n}\n\n.icon-shake {\n  animation-name: icon-motion-shake;\n  animation-duration: var(--icon-animation-duration,1s);\n  animation-iteration-count: var(--icon-animation-iteration-count,infinite);\n  animation-timing-function: var(--icon-animation-timing,linear);\n}\n\n.icon-shake,\n.icon-spin {\n  animation-delay: var(--icon-animation-delay,0s);\n  animation-direction: var(--icon-animation-direction,normal);\n}\n\n.icon-spin {\n  animation-name: icon-motion-spin;\n  animation-duration: var(--icon-animation-duration,2s);\n  animation-iteration-count: var(--icon-animation-iteration-count,infinite);\n  animation-timing-function: var(--icon-animation-timing,linear);\n}\n\n.icon-spin-reverse {\n  --icon-animation-direction: reverse;\n}\n\n.icon-pulse,\n.icon-spin-pulse {\n  animation-name: icon-motion-spin;\n  animation-direction: var(--icon-animation-direction, normal);\n  animation-duration: var(--icon-animation-duration, 1s);\n  animation-iteration-count: var(--icon-animation-iteration-count, infinite);\n  animation-timing-function: var(--icon-animation-timing, steps(8));\n}\n\n@media (prefers-reduced-motion:reduce) {\n  .icon-beat, .icon-beat-fade, .icon-bounce, .icon-fade, .icon-flip, .icon-pulse, .icon-shake, .icon-spin, .icon-spin-pulse {\n    animation-delay: -1ms;\n    animation-duration: 1ms;\n    animation-iteration-count: 1;\n    transition-delay: 0s;\n    transition-duration: 0s\n  }\n}\n\n@keyframes icon-motion-beat {\n  0%,90% {\n    transform: scale(1)\n  }\n\n  45% {\n    transform: scale(var(--icon-beat-scale,1.25))\n  }\n}\n\n@keyframes icon-motion-bounce {\n  0% {\n    transform: scale(1) translateY(0)\n  }\n\n  10% {\n    transform: scale(var(--icon-bounce-start-scale-x,1.1),var(--icon-bounce-start-scale-y,.9)) translateY(0)\n  }\n\n  30% {\n    transform: scale(var(--icon-bounce-jump-scale-x,.9),var(--icon-bounce-jump-scale-y,1.1)) translateY(var(--icon-bounce-height,-.5em))\n  }\n\n  50% {\n    transform: scale(var(--icon-bounce-land-scale-x,1.05),var(--icon-bounce-land-scale-y,.95)) translateY(0)\n  }\n\n  57% {\n    transform: scale(1) translateY(var(--icon-bounce-rebound,-.125em))\n  }\n\n  64% {\n    transform: scale(1) translateY(0)\n  }\n\n  to {\n    transform: scale(1) translateY(0)\n  }\n}\n\n@keyframes icon-motion-fade {\n  50% {\n    opacity: var(--icon-fade-opacity,.4)\n  }\n}\n\n@keyframes icon-motion-beat-fade {\n  0%,to {\n    opacity: var(--icon-beat-fade-opacity,.4);\n    transform: scale(1)\n  }\n\n  50% {\n    opacity: 1;\n    transform: scale(var(--icon-beat-fade-scale,1.125))\n  }\n}\n\n@keyframes icon-motion-flip {\n  50% {\n    transform: rotate3d(var(--icon-flip-x,0),var(--icon-flip-y,1),var(--icon-flip-z,0),var(--icon-flip-angle,-180deg))\n  }\n}\n\n@keyframes icon-motion-shake {\n  0% {\n    transform: rotate(-15deg)\n  }\n\n  4% {\n    transform: rotate(15deg)\n  }\n\n  8%,24% {\n    transform: rotate(-18deg)\n  }\n\n  12%,28% {\n    transform: rotate(18deg)\n  }\n\n  16% {\n    transform: rotate(-22deg)\n  }\n\n  20% {\n    transform: rotate(22deg)\n  }\n\n  32% {\n    transform: rotate(-12deg)\n  }\n\n  36% {\n    transform: rotate(12deg)\n  }\n\n  40%,to {\n    transform: rotate(0deg)\n  }\n}\n\n@keyframes icon-motion-spin {\n  0% {\n    transform: rotate(0deg)\n  }\n\n  to {\n    transform: rotate(1turn)\n  }\n}\n`\n\nfunction getFontFace(type: string, _fontName: string, fontUrl: string): string {\n  switch (type) {\n    case 'eot':\n      return `url(\"${fontUrl}#iefix\") format(\"embedded-opentype\")`;\n    case 'woff2':\n      return `url(\"${fontUrl}\") format(\"woff2\")`;\n    case 'woff':\n      return `url(\"${fontUrl}\") format(\"woff\")`;\n    case 'ttf':\n      return `url(\"${fontUrl}\") format(\"truetype\")`;\n    case 'svg':\n      return `url(\"${fontUrl}\") format(\"svg\")`;\n    default:\n      throw new Error(`Unsupported type \"${type}\"`);\n  }\n}\n\nexport function generateStyleCss(fontName: string, prefix: string, types: string[], files: SymbolMetadata[], url = '/') {\n  const fontSlug = slugify(fontName);\n\n  let output = '@font-face {\\n'\n  output += `  font-family: \"${fontName}\";\\n`;\n  output += '  src: ';\n\n  for (let i = 0; i < types.length; i++) {\n    const type = types[i];\n    const fontUrl = getFontFace(type, fontName, join(url, `${fontSlug}.${type}`));\n    output += i === 0 ? fontUrl : `     ${fontUrl}`;\n    output += i === types.length - 1 ? ';\\n' : ',\\n'\n  }\n\n  output += '}\\n';\n\n  output += COMMON_STYLES.replace('{{fontName}}', fontName) + '\\n'\n\n  for (const file of files) {\n    output += `i.${prefix}-${file.name}:before {\\n`;\n    output += `  content: \"\\\\${file.code.toString(16)}\";\\n`;\n    output += '}\\n\\n'\n  }\n\n\n  return output;\n}","import { AppConfig } from './types/app-config.ts';\n\nexport const DEFAULT_CONFIG: Omit<AppConfig, 'input' | 'output'> = {\n  name: 'IconFont',\n  prefix: 'icon',\n  types: ['ttf'],\n  port: 9000,\n  fontUrl: './',\n}","import { Command } from 'commander';\nimport { loadConfig, mergeConfig, searchConfig } from '../utils/read-config.js';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport { generateFontSvg } from '../generators/font-svg/font-svg.js';\nimport { generateFontTtf } from '../generators/font-ttf/font-ttf.js';\nimport { slugify } from '../utils/slugify.js';\nimport { generateFontEotByTtf } from '../generators/font-eot/font-eot.js';\nimport { generateFontWoffByTtf } from '../generators/font-woff/font-woff.js';\nimport { generateFontWoff2ByTtf } from '../generators/font-woff2/font-woff2.js';\nimport { generateStyleCss } from '../generators/style-css/style-css.js';\nimport { Logger } from '../utils/logger.js';\nimport { DEFAULT_CONFIG } from '../default-config.ts';\nimport { readFiles } from '../utils/read-files.ts';\nimport { AppConfigKeys } from '../types';\n\nexport function createGenerateCommand(): Command {\n  const subprogram = new Command();\n\n  subprogram\n    .name('generate')\n    .alias('g')\n    .alias('gen')\n    .description('Generate icon font')\n    .action(async (args: any, command: Command) => {\n      const start = Date.now();\n\n      const { config: configFilePath, cwd, ...configArgs } = args;\n      const configFile = configFilePath ? await loadConfig(configFilePath) : await searchConfig(process.cwd());\n      const requiredFields: AppConfigKeys[] = ['input', 'output', 'name', 'prefix', 'types', 'port']\n      const config = mergeConfig(requiredFields, configArgs, configFile, DEFAULT_CONFIG);\n\n      await fs.rm(config.output, { recursive: true, force: true });\n      await fs.mkdir(config.output, { recursive: true });\n\n      const slug = slugify(config.name);\n      const files = await readFiles(config.input);\n      const fontSvg = await generateFontSvg(config);\n      const fontTtf = await generateFontTtf(config);\n\n      for (const type of config.types) {\n        const filename = path.join(config.output, `${slug}.${type}`);\n\n        switch (type) {\n          case 'svg':\n            await fs.writeFile(filename, fontSvg, 'utf8');\n            break;\n          case 'ttf':\n            await fs.writeFile(filename, fontTtf);\n            break;\n          case 'eot':\n            const fontEot = await generateFontEotByTtf(fontTtf);\n            await fs.writeFile(filename, fontEot);\n            break;\n          case 'woff':\n            const fontWoff = await generateFontWoffByTtf(fontTtf);\n            await fs.writeFile(filename, fontWoff);\n            break;\n          case 'woff2':\n            const fontWoff2 = await generateFontWoff2ByTtf(fontTtf);\n            await fs.writeFile(filename, fontWoff2);\n            break;\n        }\n        Logger.created(filename);\n      }\n\n      const styleCss = generateStyleCss(config.name, config.prefix, config.types, files, config.fontUrl);\n      const filenameCss = path.join(config.output, `${slug}.css`);\n      await fs.writeFile(filenameCss, styleCss, 'utf8');\n      Logger.created(filenameCss);\n\n      Logger.done(Date.now() - start, files.length);\n    });\n\n  return subprogram;\n}","import { SymbolMetadata } from '../../types/types.ts';\nimport { LOGO_ICON } from '../../utils/constants.ts';\n\nconst HEAD = `\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{{caption}}</title>\n  <link rel=\"shortcut icon\" type=\"image/svg+xml\" href=\"/favicon.svg\" />\n  <style>\n    html {\n      --border-radius: 8px;\n      --preview-bg: rgba(2, 6, 23, 0.7);\n      --label-bg: #0c4a6e;\n\n      color: #e2e8f0;\n      background: #0f172a;\n    }\n    body {\n      font-family: \"Ubuntu Sans\", Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n      font-weight: 300;\n      font-size: 16px;\n      margin: 0;\n      text-align: center;\n    }\n    .caption {\n      display: flex;\n      align-content: center;\n      justify-content: center;\n      gap: 16px;\n    }\n    .caption svg {\n      width: 36px;\n      height: auto;\n    }\n    .buttons-container {\n      width: auto;\n      max-width: 1280px;\n      margin: 0 auto;\n      padding: 10px 20px;\n    }\n    .preview {\n      width: 110px;\n      height: 130px;\n      margin: 10px;\n      display: inline-block;\n      border: none;\n      background-color: transparent;\n      color: inherit;\n      outline: none;\n      padding: 0;\n      border-radius: var(--border-radius);\n      position: relative;\n    }\n    .preview .inner {\n      display: inline-block;\n      width: 100%;\n      text-align: center;\n      background: var(--preview-bg);\n      border-radius: var(--border-radius) var(--border-radius) 0 0;\n    }\n    .preview .inner i {\n      line-height: 100px;\n      font-size: 36px;\n    }\n    .label {\n      display: inline-block;\n      width: 100%;\n      box-sizing: border-box;\n      padding: 5px;\n      font-size: 11px;\n      font-family: Monaco, monospace;\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      background: var(--label-bg);\n      border-radius: 0 0 var(--border-radius) var(--border-radius);\n    }\n    [aria-label] {\n      cursor: pointer;\n      position: relative;\n    }\n    [aria-label]::after {\n      width: 120px;\n      background-color: rgba(28, 28, 30, 0.9);\n      border-radius: 5px;\n      border: .5px solid rgba(28, 28, 30, 1);\n      margin-bottom: 16px;\n      box-shadow: 0 0 .1875rem rgba(0, 0, 0, .3);\n      color: #f0f0f0;\n      content: attr(aria-label);\n      font-size: 12px;\n      line-height: 1;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      font-style: normal;\n      font-weight: 500;\n      padding: 10px;\n      text-indent: 0;\n      text-shadow: none;\n      white-space: nowrap;\n      z-index: 50;\n    }\n    [aria-label]::before {\n      content: \"\";\n      z-index: 49;\n      border: 8px solid transparent;\n      border-top-color: rgba(28, 28, 30, 1);\n      height: 0;\n      width: 0;\n      display: block;\n    }\n    [aria-label]::after,\n    [aria-label]::before {\n      bottom: 100%;\n      box-sizing: border-box;\n      opacity: 0;\n      pointer-events: none;\n      position: absolute;\n      transition: all .2s ease-in-out 0s;\n      transition-delay: 0s;\n      left: 50%;\n      transform: translate(-50%, 10px);\n      transform-origin: top;\n    }\n    [aria-label]:hover::after,\n    [aria-label]:hover::before {\n      opacity: 1;\n      transform: translate(-50%, 4px);\n    }\n  </style>\n\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/style.css\"/>\n\n  <script type=\"application/javascript\">\n    function onClickCallback(button) {\n      navigator.clipboard.writeText(button.dataset.text).then(() => {\n        const label = button.getAttribute('aria-label');\n        button.setAttribute('aria-label', 'Copied ✔');\n\n        let timeout;\n        const back = () => {\n          clearTimeout(timeout);\n          button.removeEventListener('mouseout', back);\n          setTimeout(() => button.setAttribute('aria-label', label), 200);\n        };\n\n        timeout = setTimeout(() => button.setAttribute('aria-label', label), 5000);\n        button.addEventListener('mouseout', back);\n      });\n    }\n  </script>\n\n  <script type=\"application/javascript\">\n    let health = 'unknown';\n    async function checkHealth() {\n      try {\n        const res = await fetch('/healthcheck', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        if (!res.ok) {\n          health = 'failed';\n        }\n\n        const data = await res.json();\n        // Reload by server command\n        if (data.status === 'reload') {\n          return window.location.reload(true);\n        } \n        // If \"ok\" after failed then reload. \n        else if (data.status === 'ok') {\n          if (health === 'failed') {\n            return window.location.reload(true);\n          } else {\n            health = 'healthy';\n          }\n        }\n      } catch {\n        health = 'failed';\n      }\n    }\n\n    setInterval(checkHealth, 1000);\n  </script>\n</head>\n`;\n\nexport function generateIndexHtml(caption: string, prefix: string, files: SymbolMetadata[]): string {\n  let output = '<!DOCTYPE html>\\n';\n  output += '<html lang=\"en\">\\n';\n  output += HEAD.replace('{{caption}}', caption);\n  output += '<body>\\n';\n  output += `<h1 class=\"caption\">\\n`;\n  output += LOGO_ICON + '\\n';\n  output += `<span>${caption}</span>\\n`;\n  output += `</h1>\\n`;\n\n  output += '<div class=\"buttons-container\">\\n';\n\n  for (const file of files) {\n    output += `\n      <button type=\"button\" class=\"preview\" data-text=\"${prefix} ${prefix}-${file.name}\" aria-label=\"Copy to clipboard\" onclick=\"onClickCallback(this)\">\n        <span class=\"inner\">\n          <i class=\"${prefix} ${prefix}-${file.name}\"></i>\n        </span>\n        <br>\n        <span class=\"label\">${file.name}</span>\n      </button>\n    `;\n  }\n\n  output += '</div>\\n</body>\\n</html>';\n  return output;\n}","export function generateLogoSvg(): string {\n  return `\n<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n  <rect width=\"32\" height=\"32\" rx=\"4\" ry=\"4\" fill-rule=\"evenodd\" stroke-width=\"0\" style=\"paint-order:fill markers stroke\"/>\n  <g transform=\"matrix(1.00242 0 0 1.00242 .0471958 -.0616379)\" stroke-width=\"1.23732\">\n    <circle cx=\"15.9174\" cy=\"7.02139\" r=\"2.31378\" fill=\"#16d600\"/>\n    <circle cx=\"6.58493\" cy=\"16.0229\" r=\"2.31378\" fill=\"#fff\"/>\n    <circle cx=\"15.9174\" cy=\"25.0243\" r=\"2.31378\" fill=\"#0159ea\"/>\n    <path d=\"m4.26496 4.70142h4.63993v4.63993h-4.63993z\" fill=\"#0159ea\"/>\n    <path d=\"m22.9299 13.7029h4.63993v4.63993h-4.63993z\" fill=\"#16d600\"/>\n    <path d=\"m13.2757 18.3428 2.63548-4.63993 2.64786 4.63993z\" fill=\"#fff\"/>\n    <path d=\"m22.9299 22.7044h4.63993v4.63993h-4.63993z\" fill=\"#fff\"/>\n    <path d=\"m22.6143 9.34135 2.63548-4.63993 2.63548 4.63993z\" fill=\"#0159ea\"/>\n    <path d=\"m3.94326 27.3443 2.63548-4.63993 2.64785 4.63993z\" fill=\"#16d600\"/>\n  </g>\n</svg>\n  `;\n}","import http from 'node:http';\nimport { SymbolMetadata } from '../types/types.ts';\nimport { slugify } from '../utils/slugify.js';\nimport { generateIndexHtml, generateLogoSvg } from '../generators';\nimport { generateStyleCss } from '../generators/style-css/style-css.js';\nimport { generateFontSvg } from '../generators/font-svg/font-svg.js';\nimport { generateFontTtf } from '../generators/font-ttf/font-ttf.js';\nimport { generateFontWoff } from '../generators/font-woff/font-woff.js';\nimport { generateFontWoff2 } from '../generators/font-woff2/font-woff2.js';\nimport { generateFontEot } from '../generators/font-eot/font-eot.js';\nimport { Logger } from '../utils/logger.js';\nimport { LOGO_ICON } from '../utils/constants.ts';\nimport { AppConfig } from '../types';\n\nasync function indexHandler(_req: http.IncomingMessage, res: http.ServerResponse, fontName: string, prefix: string, files: SymbolMetadata[]) {\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.write(generateIndexHtml(fontName, prefix, files));\n  res.end();\n}\n\nasync function logoHandler(_req: http.IncomingMessage, res: http.ServerResponse) {\n  res.writeHead(200, { 'Content-Type': 'image/svg+xml' });\n  res.end(generateLogoSvg());\n}\n\nasync function stylesCssHandler(_req: http.IncomingMessage, res: http.ServerResponse, config: Omit<AppConfig, 'output'>, files: SymbolMetadata[]) {\n  res.writeHead(200, { 'Content-Type': 'text/css' });\n  res.write(generateStyleCss(config.name, config.prefix, config.types, files, '/'));\n  res.end();\n}\n\nasync function faviconHandler(_req: http.IncomingMessage, res: http.ServerResponse) {\n  res.writeHead(200, { 'Content-Type': 'image/svg+xml' });\n  res.write(LOGO_ICON);\n  res.end();\n}\n\nasync function svgFontHandler(_req: http.IncomingMessage, res: http.ServerResponse, config: Omit<AppConfig, 'output'>) {\n  res.writeHead(200, {\n    'Content-Type': 'font/svg+xml',\n    'Server': 'Dev Server',\n  });\n  res.write(await generateFontSvg(config));\n  res.end();\n}\n\nasync function ttfFontHandler(_req: http.IncomingMessage, res: http.ServerResponse, config: Omit<AppConfig, 'output'>) {\n  res.writeHead(200, {\n    'Content-Type': 'application/x-font-ttf',\n    'Server': 'Dev Server',\n  });\n  res.write(await generateFontTtf(config));\n  res.end();\n}\n\nasync function woffFontHandler(_req: http.IncomingMessage, res: http.ServerResponse, config: Omit<AppConfig, 'output'>) {\n  res.writeHead(200, {\n    'Content-Type': 'font/woff',\n    'Server': 'Dev Server',\n  });\n  res.write(await generateFontWoff(config));\n  res.end();\n}\n\nasync function woff2FontHandler(_req: http.IncomingMessage, res: http.ServerResponse, config: Omit<AppConfig, 'output'>) {\n  res.writeHead(200, {\n    'Content-Type': 'font/woff2',\n    'Server': 'Dev Server',\n  });\n  res.write(await generateFontWoff2(config));\n  res.end();\n}\n\nasync function eotFontHandler(_req: http.IncomingMessage, res: http.ServerResponse, config: Omit<AppConfig, 'output'>) {\n  res.writeHead(200, {\n    'Content-Type': 'application/vnd.ms-fontobject',\n    'Server': 'Dev Server',\n  });\n  res.write(await generateFontEot(config));\n  res.end();\n}\n\nasync function error404Handler(_req: http.IncomingMessage, res: http.ServerResponse) {\n  res.writeHead(404);\n  res.end('Not Found');\n}\n\nexport async function handleRoute(path: string, req: http.IncomingMessage, res: http.ServerResponse, config: Omit<AppConfig, 'output'>, files: SymbolMetadata[]) {\n  const slug = slugify(config.name);\n  Logger.route(req.method || 'GET', req.url || '/');\n\n  try {\n    switch (path) {\n      case '/':\n      case '/index.html':\n        return await indexHandler(req, res, config.name, config.prefix, files);\n      case '/logo.svg':\n        return await logoHandler(req, res);\n      case '/favicon.svg':\n        return await faviconHandler(req, res);\n      case '/style.css':\n        return await stylesCssHandler(req, res, config, files);\n      case `/${slug}.svg`:\n        return await svgFontHandler(req, res, config);\n      case `/${slug}.ttf`:\n        return await ttfFontHandler(req, res, config);\n      case `/${slug}.woff`:\n        return await woffFontHandler(req, res, config);\n      case `/${slug}.woff2`:\n        return await woff2FontHandler(req, res, config);\n      case `/${slug}.eot`:\n        return await eotFontHandler(req, res, config);\n      default:\n        return await error404Handler(req, res);\n    }\n  } catch (error: any) {\n    console.error(error);\n  }\n}","import EventEmitter from 'node:events';\nimport { watch } from 'node:fs';\nimport { Logger } from '../utils/logger.js';\n\nexport class Watcher extends EventEmitter {\n  private _timer: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(filePath: string) {\n    super();\n    watch(filePath, { persistent: true, recursive: false, encoding: 'utf8' }, this.change.bind(this));\n  }\n\n  private change(_: any, file: any) {\n    if (this._timer !== null) {\n      return;\n    }\n\n    this._timer = setTimeout(() => {\n      Logger.changes(file);\n      this.emit('change');\n      this._timer = null;\n    }, 100);\n  }\n}","import http from 'node:http';\nimport url from 'node:url';\nimport path from 'node:path';\nimport { handleRoute } from './router.js';\nimport { Watcher } from './watcher.js';\nimport { readFiles } from '../utils/read-files.ts';\nimport { AppConfig } from '../types';\n\nexport function createServer(config: Omit<AppConfig, 'output'>): http.Server {\n  let shouldReload = false;\n  const watcher = new Watcher(config.input);\n\n  watcher.on('change', () => {\n    shouldReload = true;\n  });\n\n  return http.createServer(async function server(this: http.Server, req, res) {\n    const files = await readFiles(config.input);\n    const parsedUrl = req.url && new url.URL(`http://localhost:${req.socket.localPort}${req.url}`) || null;\n    if (!parsedUrl) {\n      throw new Error(`URL not parsable`);\n    }\n\n    let routePath = path.normalize(parsedUrl.pathname).replace(/^(\\.\\.[\\/\\\\])+/, '');\n\n    if (routePath === '/healthcheck') {\n      res.writeHead(200, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({\n        status: shouldReload ? 'reload' : 'ok',\n      }));\n    } else {\n      if (routePath === '/' || routePath === '/index.html') {\n        shouldReload = false;\n      }\n\n      await handleRoute(routePath, req, res, config, files);\n    }\n  });\n}\n","import http from 'node:http';\n\nexport function scanAvailablePort(port: number, callback: (error: Error | null, port?: number) => void, attempt = 5): void {\n  if (attempt === 0) {\n    return callback(new Error('no free ports'));\n  }\n  const server = http.createServer();\n\n  let debounce: ReturnType<typeof setTimeout> | null = null;\n\n  server.once('listening', () => {\n    debounce = setTimeout(() => {\n      server.close();\n      callback(null, port);\n    }, 300);\n\n  });\n\n  server.once('error', (error: any) => {\n    if (debounce !== null) {\n      clearTimeout(debounce);\n    }\n\n    if (error.code !== 'EADDRINUSE') {\n      return callback(error);\n    }\n    server.close();\n    scanAvailablePort(port + 1, callback, attempt - 1);\n  });\n\n  server.listen(port);\n}","import { Command } from 'commander';\nimport { loadConfig, mergeConfig, searchConfig } from '../utils/read-config.ts';\nimport { DEFAULT_CONFIG } from '../default-config.ts';\nimport { createServer } from '../server/server.ts';\nimport { Logger } from '../utils/logger.ts';\nimport { scanAvailablePort } from '../server/scan-available-port.ts';\nimport { AppConfig, AppConfigKeys } from '../types/app-config.ts';\n\nexport function createDemoCommand(): Command {\n  const subprogram = new Command();\n  subprogram\n    .name('demo')\n    .alias('serve')\n    .alias('d')\n    .description('run web server with the icon font demo')\n    .action(async (args: Omit<AppConfig, 'output'> & { config?: string, cwd?: string }) => {\n      const { config: configFilePath, cwd, ...configArgs } = args;\n      const configFile = configFilePath ? await loadConfig(configFilePath) : await searchConfig(process.cwd());\n      const requiredFields: AppConfigKeys[] = ['input', 'name', 'prefix', 'types', 'fontUrl', 'port']\n      const config = mergeConfig(requiredFields, configArgs, configFile, DEFAULT_CONFIG);\n\n      const server = createServer(config);\n\n      scanAvailablePort(config.port, (error, port) => {\n        if (error || !port) {\n          console.error(error);\n          return process.exit(1);\n        }\n\n        server.listen(port);\n        Logger.serverListen(port)\n      });\n    });\n\n  return subprogram;\n}","import { Command } from 'commander';\nimport { cosmiconfig } from 'cosmiconfig';\nimport { createGenerateCommand } from './cli/generate.js';\nimport { createDemoCommand } from './cli/demo.js';\n\nconst Program = new Command();\n\nProgram.name(__APP_NAME__)\n  .version(__APP_VERSION__, '-v, --version', 'output the current version')\n  .description(__APP_DESCRIPTION__)\n  .allowUnknownOption()\n  .configureHelp({\n    showGlobalOptions: false,\n    sortSubcommands: false,\n    sortOptions: false,\n  })\n  .addCommand(createGenerateCommand())\n  .addCommand(createDemoCommand());\n\n(async () => {\n  Program.commands.forEach(cmd => {\n    const commandName = cmd.name();\n    const isDemo = commandName === 'demo';\n    const isGen = commandName === 'generate';\n\n    isDemo && cmd.option('-p, --port <number>', 'local port for demo server');\n    cmd.option('-c, --config <value>', 'use specified config file');\n    cmd.option('-i, --input <value>', 'the directory where the source files of the svg icons are located');\n    isGen && cmd.option('-o, --output <value>', 'the directory where the generated files will be sent');\n    cmd.option('-n, --name <value>', 'your font name, used for generated fonts and files');\n    cmd.option('-t, --types <values...>', 'fonts files extension to generate');\n    cmd.option('    --cwd <value>', 'pass specified current working directory ', process.cwd());\n    isGen && cmd.option('    --font-url <value>', 'this address is set in the @font-face CSS file');\n    cmd.option('    --prefix <value>', 'CSS classname prefix for icons');\n  });\n\n  await Program.parseAsync(process.argv);\n})();\n\n\n\n"],"names":["exitCode","code","message","CommanderError","error","InvalidArgumentError","require$$0","Argument$3","name","description","value","previous","fn","values","arg","humanReadableArgName","nameOutput","argument","Argument","Help$3","cmd","visibleCommands","helpCommand","a","b","getSortKey","option","visibleOptions","helpOption","removeShort","removeLong","globalOptions","ancestorCmd","args","helper","max","command","cmdName","ancestorCmdNames","extraInfo","choice","extraDescripton","termWidth","helpWidth","itemIndentWidth","itemSeparatorWidth","formatItem","term","fullText","formatList","textArray","output","commandDescription","argumentList","optionList","globalOptionList","commandList","str","width","indent","minColumnWidth","indents","manualIndent","columnWidth","leadingStr","columnText","indentString","breaks","regex","lines","line","i","help","Help","Option$3","flags","optionFlags","splitOptionFlags","names","impliedOptionValues","newImplied","mandatory","hide","camelcase","DualOptions$1","options","key","optionKey","preset","negativeValue","word","shortFlag","longFlag","flagParts","Option","DualOptions","maxDistance","editDistance","d","j","cost","suggestSimilar","candidates","searchingOptions","candidate","similar","bestDistance","minSimilarity","distance","length","suggestSimilar_1","EventEmitter","childProcess","require$$1","path","require$$2","fs","require$$3","process","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","Command","write","sourceCommand","result","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","configuration","displayHelp","displaySuggestion","defaultValue","detail","previousArgument","enableOrNameAndArgs","helpName","helpArgs","helpDescription","deprecatedDescription","event","listener","allowedValues","err","expectedArgsCount","actionArgs","target","invalidArgumentMessage","matchingOption","matchingFlag","knownBy","alreadyUsed","existingCmd","newCmd","oname","positiveLongFlag","handleOptionValue","val","invalidValueMessage","valueSource","oldValue","config","def","m","parseArg","combine","allowUnknown","allowExcess","positional","passThrough","storeAsProperties","source","argv","parseOptions","execArgv","userArgs","subcommand","launchWithNode","sourceExt","findFile","baseDir","baseName","localBin","foundExt","ext","executableFile","executableDir","resolvedScriptPath","localFile","legacyName","proc","incrementNodeInspectorPort","signal","exitCallback","executableDirMessage","executableMissing","wrappedError","commandName","operands","unknown","subCommand","promiseChain","subcommandName","_a","_b","myParseArg","parsedValue","processedArgs","declaredArg","index","processed","v","promise","hooks","hookedCommand","callback","hookDetail","hook","parsed","checkForUnknownOptions","commandEvent","anOption","definedNonDefaultOptions","conflictingAndDefined","defined","dest","maybeOption","activeVariadicOption","len","combinedOptions","errorOptions","dualHelper","hasCustomOptionValue","impliedKey","conflictingOption","findBestOptionFromValue","optionValue","negativeOption","positiveOption","getErrorMessage","bestOption","flag","suggestion","candidateFlags","moreFlags","receivedArgs","expected","s","unknownName","candidateNames","versionOption","argsDescription","alias","matchingCommand","aliases","filename","contextOptions","context","deprecatedCallback","helpInformation","position","text","helpEvent","helpStr","debugOption","debugHost","debugPort","match","commander","program","createCommand","createArgument","createOption","InvalidOptionArgumentError","Module","resolveFrom","fromDir","moduleId","silent","fromFile","resolveFileName","resolveFromModule","callsites","_prepareStackTrace","_","stack","callsitesModule","parentModule","filepath","stacks","seenVal","parentFilepath","parentPath","cwd","filePath","oldModule","parent","require","isArrayish","obj","util","errorEx","properties","errorExError","ErrorEXError","newMessage","modifier","overwrittenStack","stackDescriptor","stackGetter","stackValue","newstack","lineCount","errorEx_1","hexify","char","h","parseError","e","txt","badToken","errIdx","msg","start","end","slice","JSONParseError","er","caller","metadata","n","kIndent","kNewline","formatRE","emptyRE","parseJson","reviver","parseText","stripBOM","newline","isEmptyArray","jsonParseEvenBetterErrors","exports","LF","CR","LinesAndColumns","string","offsets","offset","column","location","nextOffset","x","create","picocolors_browserModule","jsTokens","token","identifier","isIdentifierChar","isIdentifierName","isIdentifierStart","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","set","pos","isFirst","cp","trail","keyword","isKeyword","isReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isStrictReservedWord","reservedWords","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","inModule","_identifier","_keyword","lib","picocolors","helperValidatorIdentifier","isColorSupported","compose","f","g","buildDefs","colors","defsOn","defsOff","getDefs","enabled","sometimesKeywords","NEWLINE$1","BRACKET","tokenize","JSX_TAG","getTokenType","highlight","defs","highlighted","type","deprecationWarningShown","NEWLINE","getMarkerLines","loc","startLoc","endLoc","linesAbove","linesBelow","startLine","startColumn","endLine","endColumn","lineDiff","markerLines","lineNumber","sourceLength","codeFrameColumns","rawLines","shouldHighlight","hasColumns","numberMaxWidth","frame","number","gutter","hasMarker","lastMarkerLine","markerLine","markerSpacing","numberOfMarkers","colNumber","deprecationError","fallback","JSONError","indexMatch","jsonError","codeFrame","parseJson_1","isNothing","subject","isObject","toArray","sequence","extend","sourceKeys","repeat","count","cycle","isNegativeZero","common","formatError","exception","compact","where","YAMLException","reason","mark","getLine","buffer","lineStart","lineEnd","maxLineLength","head","tail","maxHalfLength","padStart","makeSnippet","re","lineStarts","lineEnds","foundLineNo","lineNoLength","snippet","TYPE_CONSTRUCTOR_OPTIONS","YAML_NODE_KINDS","compileStyleAliases","map","style","Type","tag","data","compileList","schema","currentType","newIndex","previousType","previousIndex","compileMap","collectType","Schema","definition","implicit","explicit","seq","failsafe","resolveYamlNull","constructYamlNull","isNull","object","_null","resolveYamlBoolean","constructYamlBoolean","isBoolean","bool","isHexCode","c","isOctCode","isDecCode","resolveYamlInteger","hasDigits","ch","constructYamlInteger","sign","isInteger","int","YAML_FLOAT_PATTERN","resolveYamlFloat","constructYamlFloat","SCIENTIFIC_WITHOUT_DOT","representYamlFloat","res","isFloat","float","json","core","YAML_DATE_REGEXP","YAML_TIMESTAMP_REGEXP","resolveYamlTimestamp","constructYamlTimestamp","year","month","day","hour","minute","second","fraction","delta","tz_hour","tz_minute","date","representYamlTimestamp","timestamp","resolveYamlMerge","merge","BASE64_MAP","resolveYamlBinary","idx","bitlen","constructYamlBinary","tailbits","input","bits","representYamlBinary","isBinary","binary","_hasOwnProperty","_toString","resolveYamlOmap","objectKeys","pair","pairKey","pairHasKey","constructYamlOmap","omap","resolveYamlPairs","keys","constructYamlPairs","pairs","resolveYamlSet","constructYamlSet","_default","DEFAULT_SCHEMA","CONTEXT_FLOW_IN","CONTEXT_FLOW_OUT","CONTEXT_BLOCK_IN","CONTEXT_BLOCK_OUT","CHOMPING_CLIP","CHOMPING_STRIP","CHOMPING_KEEP","PATTERN_NON_PRINTABLE","PATTERN_NON_ASCII_LINE_BREAKS","PATTERN_FLOW_INDICATORS","PATTERN_TAG_HANDLE","PATTERN_TAG_URI","_class","is_EOL","is_WHITE_SPACE","is_WS_OR_EOL","is_FLOW_INDICATOR","fromHexCode","lc","escapedHexLen","fromDecimalCode","simpleEscapeSequence","charFromCodepoint","simpleEscapeCheck","simpleEscapeMap","State","generateError","state","throwError","throwWarning","directiveHandlers","major","minor","handle","prefix","captureSegment","checkJson","_position","_length","_character","_result","mergeMappings","destination","overridableKeys","quantity","storeMappingPair","keyTag","keyNode","valueNode","startLineStart","startPos","readLineBreak","skipSeparationSpace","allowComments","checkIndent","lineBreaks","testDocumentSeparator","writeFoldedLines","readPlainScalar","nodeIndent","withinFlowCollection","preceding","following","captureStart","captureEnd","hasPendingContent","_line","_lineStart","_lineIndent","_kind","readSingleQuotedScalar","readDoubleQuotedScalar","hexLength","hexResult","tmp","readFlowCollection","readNext","_pos","_tag","_anchor","terminator","isPair","isExplicitPair","isMapping","composeNode","readBlockScalar","folding","chomping","didReadContent","detectedIndent","textIndent","emptyLines","atMoreIndented","readBlockSequence","detected","readBlockMapping","flowIndent","allowCompact","_keyLine","_keyLineStart","_keyPos","atExplicitKey","readTagProperty","isVerbatim","isNamed","tagHandle","tagName","readAnchorProperty","readAlias","parentIndent","nodeContext","allowToSeek","allowBlockStyles","allowBlockScalars","allowBlockCollections","indentStatus","atNewLine","hasContent","typeIndex","typeQuantity","typeList","blockIndent","readDocument","documentStart","directiveName","directiveArgs","hasDirectives","loadDocuments","nullpos","loadAll","iterator","documents","load","loader","CHAR_BOM","CHAR_TAB","CHAR_LINE_FEED","CHAR_CARRIAGE_RETURN","CHAR_SPACE","CHAR_EXCLAMATION","CHAR_DOUBLE_QUOTE","CHAR_SHARP","CHAR_PERCENT","CHAR_AMPERSAND","CHAR_SINGLE_QUOTE","CHAR_ASTERISK","CHAR_COMMA","CHAR_MINUS","CHAR_COLON","CHAR_EQUALS","CHAR_GREATER_THAN","CHAR_QUESTION","CHAR_COMMERCIAL_AT","CHAR_LEFT_SQUARE_BRACKET","CHAR_RIGHT_SQUARE_BRACKET","CHAR_GRAVE_ACCENT","CHAR_LEFT_CURLY_BRACKET","CHAR_VERTICAL_LINE","CHAR_RIGHT_CURLY_BRACKET","ESCAPE_SEQUENCES","DEPRECATED_BOOLEANS_SYNTAX","DEPRECATED_BASE60_SYNTAX","compileStyleMap","encodeHex","character","QUOTING_TYPE_SINGLE","QUOTING_TYPE_DOUBLE","spaces","ind","next","generateNextLine","level","testImplicitResolving","isWhitespace","isPrintable","isNsCharOrWhitespace","isPlainSafe","prev","inblock","cIsNsCharOrWhitespace","cIsNsChar","isPlainSafeFirst","isPlainSafeLast","codePointAt","first","needIndentIndicator","leadingSpaceRe","STYLE_PLAIN","STYLE_SINGLE","STYLE_LITERAL","STYLE_FOLDED","STYLE_DOUBLE","chooseScalarStyle","singleLineOnly","indentPerLevel","lineWidth","testAmbiguousType","quotingType","forceQuotes","prevChar","hasLineBreak","hasFoldableLine","shouldTrackWidth","previousLineBreak","plain","writeScalar","iskey","testAmbiguity","blockHeader","dropEndingNewline","foldString","escapeString","indentIndicator","clip","keep","chomp","lineRe","nextLF","foldLine","prevMoreIndented","moreIndented","breakRe","curr","escapeSeq","writeFlowSequence","writeNode","writeBlockSequence","writeFlowMapping","objectKeyList","objectKey","objectValue","pairBuffer","writeBlockMapping","explicitPair","detectType","block","isblockseq","tagStr","objectOrArray","duplicateIndex","duplicate","getDuplicateReferences","objects","duplicatesIndexes","inspectNode","dump","dumper","renamed","from","to","jsYaml","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","__importDefault","this","mod","fs_1","promises_1","path_1","url_1","importFresh","loadJsSync","loadJs","href","requireError","loadJson","content","yaml","loadYaml","typescript","loadTsSync","compiledFilepath","resolveTsConfig","loadTs","transpiledContent","directory","fileName","defaults","loaders_1","getDefaultSearchPlaces","moduleName","getDefaultSearchPlacesSync","os","homedir","tmpdir","env","macos","library","windows","appData","localAppData","linux","username","envPaths","envPathsModule","__createBinding","o","k","k2","__setModuleDefault","__importStar","emplace","cached","getPropertyByPath","removeUndefinedValuesFromObject","isDirectory","isDirectorySync","ExplorerBase_1","env_paths_1","os_1","util_js_1","ExplorerBase","__privateAdd","_ExplorerBase_instances","_loadingMetaConfig","__publicField","__privateMethod","validateConfig_fn","__privateSet","__privateGet","packageProp","containingFilePath","imports","importStack","fileDirectory","importPath","fullPath","dir","globalConfigPlaces","place","startDir","stopDir","currentDir","parentDir","extension","getExtensionDescription","objToString","isPlainObject","newValue","mergeAll","Explorer_1","defaults_1","ExplorerBase_js_1","merge_1","Explorer","_Explorer_instances","readConfiguration_fn","dirs","getDirs_fn","firstDirIter","search","nextDirIter","contents","loadConfigFileWithImports_fn","loadedContent","loadConfiguration_fn","ownContent","importPaths","newImportStack","importedConfigs","loadedContents","fileExists_fn","packageFile","ExplorerSync_1","ExplorerSync","_ExplorerSync_instances","Explorer_js_1","ExplorerSync_js_1","util_1","identity","getUserDefinedOptionsFromMetaConfig","metaConfig","overrideOptions","getResolvedSearchPlaces","toolDefinedSearchPlaces","userConfiguredOptions","userConfiguredSearchPlaces","mergeOptionsBase","userDefinedConfig","validateOptions","mergeOptions","mergeOptionsSync","cosmiconfig","normalizedOptions","explorer","cosmiconfigSync","explorerSync","Logger","port","method","url","file","dirname","basename","extname","color","duration","Seeker","searchConfig","loadConfig","mergeConfig","required","_configs","configs","populateMetadata","SYMBOL_SIZE","SHAPE_SIZE","START_UNICODE","LOGO_ICON","testExpression","compareFiles","fileA","fileB","hasUnicodeA","hasUnicodeB","fileA_","fileB_","readFiles","files","readdir","acc","id","unicode","join","StreamRead","Readable","__viteBrowserExternal_stream","__viteBrowserExternal_string_decoder","sax","strict","opt","SAXParser","SAXStream","createStream","buffers","parser","clearBuffers","S","rootNS","emit","F","newf","checkBufferLength","maxAllowed","maxActual","l","closeText","emitNode","flushBuffers","Stream","streamWraps","ev","me","SD","chunk","handler","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","nameStart","nameBody","entityStart","entityBody","isQuote","isAttribEnd","isMatch","notMatch","nodeType","textopts","strictFail","newTag","qname","attribute","qualName","local","attrib","qn","openTag","selfClosing","p","nv","uri","closeTag","t","closeTo","close","parseEntity","entity","entityLC","num","numStr","beginWhiteSpace","charAt","starti","pad","returnState","parsedEntity","stringFromCharCode","floor","fromCodePoint","MAX_SIZE","codeUnits","highSurrogate","lowSurrogate","codePoint","WSP","encodeSVGPath","commands","SVGPathData","rotate","y","rad","assertNumbers","numbers","PI","annotateArcCommand","x1","y1","rX","rY","x1_","y1_","testValue","c_ScaleTemp","c_Scale","cx_","cy_","cRot","intersectionUnitCircleLine","termSqr","DEG","lerp","arcAt","x2","phiDeg","bezierRoot","x0","x3","x01","x12","x23","pqFormula","bezierAt","c0","c1","c2","c3","q","PRECISION","discriminantX4","root","a2c","arc","y0","phiMin","phiMax","deltaPhi","partCount","prevX","prevY","phiStart","phiEnd","y2","transform","xTemp","yTemp","ROUND","roundVal","rf","TO_ABS","INFO","TO_REL","NORMALIZE_HVZ","normalizeZ","normalizeH","normalizeV","pathStartX","pathStartY","NORMALIZE_ST","prevCurveC2X","prevCurveC2Y","prevQuadCX","prevQuadCY","QT_TO_C","prevQuadX1","prevQuadY1","prevXAbs","prevYAbs","pathStartXAbs","pathStartYAbs","SANITIZE","EPS","abs","skip","x1Rel","y1Rel","xRel","yRel","x2Rel","y2Rel","MATRIX","origX1","origX2","comRel","sqr","det","xRot","sinRot","cosRot","xCurve","yCurve","A","B","C","A1","B1","C1","newXRot","newSinRot","newCosRot","ROTATE","sin","cos","TRANSLATE","dX","dY","SCALE","SKEW_X","SKEW_Y","X_AXIS_SYMMETRY","xOffset","Y_AXIS_SYMMETRY","yOffset","A_TO_C","ANNOTATE_ARCS","CLONE","CALCULATE_BOUNDS","clone","toAbs","qtToC","normST","fixX","absX","fixY","absY","xDerivRoots","derivRoot","yDerivRoots","xRotRad","x90","y90","normalizeXiEta","xi","eta","phi","SVGPathDataTransformer","TransformableSVG","eps","isWhiteSpace","isDigit","SVGPathDataParser","finishCommand","isAArcFlag","isEndingDigit","COMMAND_ARG_COUNTS","parsedCommands","cT","_SVGPathData","boundsTransform","transformFunction","newCommands","transformedCommand","svgRectToPath","attributes","height","rx","ry","svgLineToPath","svgCircleToPath","cx","cy","r","TransformPrepareIcons","Transform","pathData","minX","maxX","minY","maxY","currentSize","transformations","transformation","matched","transformType","rest","viewBox","_encoding","parents","transforms","paths","pushTransform","_newTransformations","applyTransformAndPush","svgPathData","meta","Buffer","svg","slugify","encodeHtml","codePoints","TransformToSvgFont","fontName","symbolSize","slug","size","generateFontSvg","resolve","reject","filesReadStream","prepareStream","svgFontStream","writeStream","Writable","Point","p1","p2","accuracy","point","p1p2","dot","lenSq","param","diff","epsilon","quadSolve","D","DSqrt","processSegment","t1","t2","f1","f2","f1_","f2_","isSegmentApproximationClose","tmin","tmax","errorBound","dt","qa","qb","qc","distSq","errorBoundSq","cubicPoints","quadPoints","minDistSq","_isApproximationClose","quadCurves","toFlatArray","quadsList","subdivideCubic","y3","x4","y4","u","bx","sx","fx","ex","dx","by","sy","fy","ey","dy","solveInflections","_cubicToQuad","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","approximation","svgCubicToQuad","inflections","curve","prevPoint","quad","split","inflectionIdx","round","precision","svgPathToContour","lastX","lastY","contourStartX","contourStartY","contours","contour","simplify","interpolate","removeClosingReturnPoints","toRelative","pPrev","pNext","resContour","resContours","Glyph","prevFlag","firstRepeat","xMin","hasPoints","xMax","yMin","yMax","Font","advWidth","cur","minValue","minRsb","glyph","sumWidth","maxWidth","maxExtent","BufferByte","hi","lo","renderBytes","bytes","byte","addressLength","ascii","address","byteHex","tableSize","font","createPostTable","buf","tableIdentifier","littleEndian","toUTF8Bytes","byteArray","toUCS2Bytes","dateToUInt64","startDate","TTF_NAMES","getStrings","getNames","sfntName","orderFields","field","createNameTable","offsetPosition","nameOffset","actualStringDataOffset","createGlyfTable","endPtsOfContours","isShortFormat","createLocaTable","getIDByUnicode","getSegments","bounds","segment","unicodeNum","getCodePoints","bufferForTable","format","fieldWidth","LANGUAGE","writer","createFormat0Table","createFormat4Table","segments","glyphIndexArrays","glyphIndexArray","segCount","glyphIndexArrayLength","glyphIndex","maxExponent","searchRange","glyphId","createFormat12Table","createCMapTable","singleByteTable","twoByteTable","fourByteTable","tableHeaders","tables","tableOffset","table","header","createHtmxTable","createScript","createScriptList","scripts","tableLengths","script","createFeatureList","createLigatureCoverage","ligatureGroups","glyphCount","group","createLigatureTable","ligature","allCodePoints","createLigatureSet","ligatures","ligatureTables","createLigatureList","sets","setLengths","item","coverage","setOffset","coverageOffset","createLookupList","groupedLigatures","_codePoint","ligA","ligB","createGSUBTable","scriptList","featureList","lookupList","lists","list","getFirstCharIndex","getLastCharIndex","createOS2Table","maxContext","getMaxPoints","ctr","getMaxContours","createMaxpTable","createHeadTable","createHHeadTable","unsignedLong","computeChecksum","sum","longs","leftBytes","leftRes","_TransformToTTFFont","creation","headerSize","bufSize","entrySelector","rangeShift","headOffset","TransformToTTFFont","generateFontTtf","ttfFontStream","EOT_OFFSET","SFNT_OFFSET","SIZEOF","MAGIC","strbuf","arr","ttf2eot","out","familyName","subfamilyName","fullName","versionString","haveOS2","haveName","haveHead","numTables","tableEntry","OS2Version","nameTable","nameRecord","eot","ttf2eot_1","generateFontEotByTtf","fontTtf","generateFontEot","TYPED_OK","_has","sources","fnTyped","src","src_offs","dest_offs","chunks","fnUntyped","on","utils","Z_FIXED","Z_BINARY","Z_TEXT","Z_UNKNOWN","zero","STORED_BLOCK","STATIC_TREES","DYN_TREES","MIN_MATCH","MAX_MATCH","LENGTH_CODES","LITERALS","L_CODES","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","Buf_size","MAX_BL_BITS","END_BLOCK","REP_3_6","REPZ_3_10","REPZ_11_138","extra_lbits","extra_dbits","extra_blbits","bl_order","DIST_CODE_LEN","static_ltree","static_dtree","_dist_code","_length_code","base_length","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","static_l_desc","static_d_desc","static_bl_desc","TreeDesc","dyn_tree","stat_desc","d_code","dist","put_short","w","send_bits","send_code","tree","bi_reverse","bi_flush","gen_bitlen","max_code","stree","has_stree","extra","base","xbits","overflow","gen_codes","bl_count","next_code","tr_static_init","init_block","bi_windup","copy_block","smaller","depth","_n2","_m2","pqdownheap","compress_block","ltree","dtree","lx","build_tree","node","scan_tree","prevlen","curlen","nextlen","max_count","min_count","send_tree","build_bl_tree","max_blindex","send_all_trees","lcodes","dcodes","blcodes","rank","detect_data_type","black_mask","static_init_done","_tr_init","_tr_stored_block","stored_len","last","_tr_align","_tr_flush_block","opt_lenb","static_lenb","_tr_tally","trees","adler32","adler","s1","s2","adler32_1","makeTable","crcTable","crc32","crc","crc32_1","messages","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_OK","Z_STREAM_END","Z_STREAM_ERROR","Z_DATA_ERROR","Z_BUF_ERROR","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_DEFAULT_STRATEGY","Z_DEFLATED","MAX_MEM_LEVEL","MAX_WBITS","DEF_MEM_LEVEL","MIN_LOOKAHEAD","PRESET_DICT","INIT_STATE","EXTRA_STATE","NAME_STATE","COMMENT_STATE","HCRC_STATE","BUSY_STATE","FINISH_STATE","BS_NEED_MORE","BS_BLOCK_DONE","BS_FINISH_STARTED","BS_FINISH_DONE","OS_CODE","strm","errorCode","flush_pending","flush_block_only","put_byte","putShortMSB","read_buf","longest_match","cur_match","chain_length","scan","best_len","nice_match","limit","_win","wmask","strend","scan_end1","scan_end","fill_window","_w_size","more","deflate_stored","flush","max_block_size","max_start","deflate_fast","hash_head","bflush","deflate_slow","max_insert","deflate_rle","deflate_huff","Config","good_length","max_lazy","nice_length","max_chain","func","configuration_table","lm_init","DeflateState","deflateResetKeep","deflateReset","ret","deflateSetHeader","deflateInit2","windowBits","memLevel","strategy","wrap","deflateInit","deflate","old_flush","beg","level_flags","bstate","deflateEnd","status","deflateSetDictionary","dictionary","dictLength","avail","tmpDict","deflate_1","STR_APPLY_OK","STR_APPLY_UIA_OK","_utf8len","strings","m_pos","str_len","buf_len","buf2binstring","c_len","utf16buf","ZStream","zstream","zlib_deflate","toString","Z_SYNC_FLUSH","Deflate","dict","mode","chunkSize","_mode","deflator","deflateRaw","gzip","ulong","longAlign","calc_checksum","nlongs","WOFF_OFFSET","WOFF_ENTRY_OFFSET","SFNT_ENTRY_OFFSET","woffAppendMetadata","zdata","ttf2woff","version","flavor","woffHeader","entries","aStr","bStr","woffSize","sfntSize","tableBuf","algntable","sfntOffset","csum","checksumAdjustment","woffDataChains","sfntData","compLength","woffData","ttf2woff_1","generateFontWoffByTtf","generateFontWoff","moduleOverrides","quit_","toThrow","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","ENVIRONMENT_IS_NODE","scriptDirectory","locateFile","read_","readAsync","readBinary","logExceptionOnExit","ExitStatus","toLog","nodeFS","nodePath","tryParseAsDataURI","assert","onload","onerror","module","keepRuntimeAlive","xhr","intArrayToString","wasmBinary","noExitRuntime","abort","wasmMemory","ABORT","condition","UTF8Decoder","UTF8ArrayToString","heap","maxBytesToRead","endIdx","endPtr","u0","u1","u2","UTF8ToString","ptr","HEAPU8","stringToUTF8Array","outIdx","maxBytesToWrite","startIdx","stringToUTF8","outPtr","lengthBytesUTF8","UTF16Decoder","UTF16ToString","maxIdx","HEAPU16","codeUnit","HEAP16","stringToUTF16","startPtr","numCharsToWrite","lengthBytesUTF16","UTF32ToString","utf32","HEAP32","stringToUTF32","trailSurrogate","lengthBytesUTF32","alignUp","multiple","HEAP8","HEAPU32","HEAPF32","HEAPF64","updateGlobalBufferAndViews","wasmTable","__ATPRERUN__","__ATINIT__","__ATPOSTRUN__","runtimeKeepaliveCounter","preRun","addOnPreRun","callRuntimeCallbacks","initRuntime","postRun","addOnPostRun","cb","addOnInit","runDependencies","dependenciesFulfilled","addRunDependency","removeRunDependency","what","dataURIPrefix","isDataURI","isFileURI","wasmBinaryFile","getBinary","getBinaryPromise","response","createWasm","info","asmLibraryArg","receiveInstance","instance","receiveInstantiationResult","instantiateArrayBuffer","receiver","instantiateAsync","callbacks","getWasmTableEntry","wasmTableMirror","funcPtr","___cxa_allocate_exception","_malloc","ExceptionInfo","excPtr","destructor","refcount","caught","rethrown","___cxa_throw","__embind_register_bigint","primitiveType","minRange","maxRange","getShiftFromSize","embind_init_charCodes","codes","embind_charCodes","readLatin1String","awaitingDependencies","registeredTypes","typeDependencies","char_0","char_9","makeLegalFunctionName","createNamedFunction","body","extendError","baseErrorType","errorName","errorClass","BindingError","throwBindingError","InternalError","throwInternalError","whenDependentTypesAreResolved","myTypes","dependentTypes","getTypeConverters","onComplete","typeConverters","myTypeConverters","registerType","unregisteredTypes","registered","rawType","registeredInstance","__embind_register_bool","trueValue","falseValue","shift","wt","destructors","pointer","emval_free_list","emval_handle_array","__emval_decref","count_emval_handles","get_first_emval","init_emval","Emval","simpleReadValueFromPointer","__embind_register_emval","rv","_embind_repr","floatReadValueFromPointer","__embind_register_float","new_","constructor","dummy","runDestructors","del","craftInvokerFunction","humanName","argTypes","classType","cppInvokerFunc","cppTargetFunc","argCount","isClassMethodFunc","needsDestructorStack","returns","argsList","argsListWired","invokerFnBody","dtorStack","args1","args2","paramName","invokerFunction","ensureOverloadTable","proto","methodName","prevFunc","exposePublicSymbol","numArguments","heap32VectorToArray","firstElement","array","replacePublicSymbol","dynCallLegacy","sig","dynCall","getDynCaller","argCache","embind__requireFunction","signature","rawFunction","makeDynCaller","fp","UnboundTypeError","getTypeName","___getTypeName","_free","throwUnboundTypeError","types","unboundTypes","seen","visit","__embind_register_function","rawArgTypesAddr","rawInvoker","invokerArgsArray","integerReadValueFromPointer","signed","__embind_register_integer","fromWireType","bitshift","isUnsignedType","__embind_register_memory_view","dataTypeIndex","typeMapping","TA","decodeMemoryView","__embind_register_std_string","stdStringIsUTF8","decodeStartPtr","currentBytePtr","maxRead","stringSegment","getLength","valueIsOfTypeString","charCode","__embind_register_std_wstring","charSize","decodeString","encodeString","getHeap","lengthBytesUTF","HEAP","maxReadBytes","__embind_register_void","__emval_incref","requireRegisteredType","impl","__emval_take_value","_abort","_emscripten_memcpy_big","emscripten_realloc_buffer","_emscripten_resize_heap","requestedSize","oldSize","maxHeapSize","cutDown","overGrownHeapSize","newSize","replacement","_exit","exit","chr","decodeBase64","keyStr","chr1","chr2","chr3","enc1","enc2","enc3","enc4","intArrayFromBase64","decoded","calledRun","runCaller","run","doRun","procExit","em_module","runtimeInit","compress","decompress","wawoff2","generateFontWoff2ByTtf","wawoff","generateFontWoff2","COMMON_STYLES","getFontFace","_fontName","fontUrl","generateStyleCss","fontSlug","DEFAULT_CONFIG","createGenerateCommand","subprogram","configFilePath","configArgs","configFile","fontSvg","fontEot","fontWoff","fontWoff2","styleCss","filenameCss","HEAD","generateIndexHtml","caption","generateLogoSvg","indexHandler","_req","logoHandler","stylesCssHandler","faviconHandler","svgFontHandler","ttfFontHandler","woffFontHandler","woff2FontHandler","eotFontHandler","error404Handler","handleRoute","req","Watcher","watch","createServer","shouldReload","http","parsedUrl","routePath","scanAvailablePort","attempt","server","debounce","createDemoCommand","Program","isDemo","isGen"],"mappings":"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AAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,IAAK,GAAI,IAAK,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,IAAK,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,KAAM,GAAI,GAAI,KAAM,GAAI,EAAG,GAAI,KAAM,EAAG,IAAK,KAAM,GAAI,KAAM,IAAK,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,KAAM,EAAG,KAAM,GAAI,EAAG,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,IAAK,KAAM,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,KAAM,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,KAAM,GAAI,EAAG,EAAG,IAAK,GAAI,IAAK,GAAI,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,KAAM,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,KAAM,MAAO,GAAI,KAAM,EAAG,IAAK,EAAG,KAAM,GAAI,KAAM,GAAI,IAAK,KAAM,IAAK,KAAM,KAAM,EAAG,IAAI,EAC/oEC,EAAwB,CAAC,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,EAAG,KAAM,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,IAAK,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,KAAM,EAAG,EAAG,GAAI,MAAO,GAAI,KAAM,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,EA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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,65,66,67,68,69,70,71,102,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119]}