#!/usr/bin/env node
import { Buffer } from 'node:buffer';
import fs from 'node:fs';
import { access } from 'node:fs/promises';
import path from 'node:path';

const VERSION = '0.0.1';

const HELP = `
Usage: dump [file]

CLI tool to display any file dump in hex format.

Options:
  -v, --version         output the current version
  -h, --help            display this help
`;

/**
 *
 * @param {number[]} bytes
 * @returns {string}
 */
function renderBytes(bytes) {
  return bytes.reduce((acc, byte, index) => {
    if (byte <= 0x1F || (byte >= 0x7F && byte <= 0xA0) || byte === 0xFF || byte === 0xA8) {
      return acc + '.';
    }

    const char = String.fromCodePoint(byte);
    if (/^\s+$/.test(char)) {
      return acc + ' ';
    }
    return acc + char;
  }, '');
}

/**
 * Display byte in table
 * @param {number} gutterWidth
 * @param {Buffer<ArrayBufferLike>} data
 */
function renderBytesTable(gutterWidth, data) {
  const ascii = [];
  process.stdout.write(`\x1b[0;97;44m${' '.repeat(gutterWidth + 4)}`);
  for (let i = 0; i < 16; i++) {
    const coll = i.toString(16).toUpperCase().padStart(2, '0');
    if (i && i % 8 === 0) {
      process.stdout.write(`  `);
    }

    process.stdout.write(`${coll} `);
  }
  process.stdout.write(`\x1b[0m\n`)


  for (let offset = 0; offset < data.length; offset++) {
    /** @type {number} */
    const byte = data[offset];

    // Render address column
    if (offset % 16 === 0) {
      const address = offset.toString(16).toUpperCase().padStart(gutterWidth, '0');
      process.stdout.write(`\x1b[0;97;44m ${address} \x1b[0m  `);
    }

    if (byte === 0) {
      process.stdout.write('\x1b[2;37m00\x1b[0m ');
    } else if (byte === 255) {
      process.stdout.write('\x1b[0;33mFF\x1b[0m ');
    } else {
      const byteHex = byte.toString(16).padStart(2, '0').toUpperCase();
      process.stdout.write(byteHex + ' ');
    }
    ascii.push(byte);

    if (offset > 0 && (offset + 1) % 8 === 0) {
      process.stdout.write('  ');
    }

    if (offset > 0 && (offset + 1) % 16 === 0) {
      process.stdout.write(` \x1b[2;37m${renderBytes(ascii)}\x1b[0m\n`);
      ascii.length = 0;
    }
  }

}

/**
 * Render file as bytes table
 * @param {string} filePath
 */
function run(filePath) {
  const { size } = fs.statSync(filePath);
  const gutterWidth = size.toString(16).length;
  
  const basename = path.basename(filePath);
  const dirname = path.dirname(filePath);
  const stream = fs.createReadStream(filePath);

  stream.on('end', () => {
    const line = `─`.repeat(49 + gutterWidth + 4);
    process.stdout.write(`\n\x1b[2;37m${line}\x1b[0m\n`);
    process.stdout.write(`\x1b[0;93mFile:\x1b[0m \x1b[0;37m${path.relative(process.cwd(), dirname)}${path.sep}\x1b[0m\x1b[0;96m${basename}\x1b[0m\n`);
    process.stdout.write(`\x1b[0;93mSize:\x1b[0m \x1b[0;96m${size}\x1b[0m \x1b[0;37mbytes «0x${size.toString(16).toUpperCase()}»\x1b[0m\n`);
    process.stdout.write('\n');
  });

  stream.on('open', () => {
    process.stdout.write('\n');
  })

  stream.on('error', (err) => {
    console.error(err);
  });

  stream.on('data', (data) => {
    renderBytesTable(gutterWidth, data);
  });


  // console.log('\x1b[0;97mTotal:\x1b[0m \x1b[0;94m%i\x1b[0m \x1b[0;93m0x%s\x1b[0m Bytes', data.length, data.length.toString(16).toUpperCase());
}

(async () => {
  if (process.argv.some(arg => arg === '-h' || arg === '--help')) {
    console.info(HELP.replace(/^\s+/, ''));
    return;
  }
  if (process.argv.some(arg => arg === '-v' || arg === '--version')) {
    console.info(VERSION);
    return;
  }


  let filePath = process.argv[2];
  if (!filePath) {
    console.error('No [file] provided');
    console.info(HELP.replace(/^\s+/, ''));
    return;
  }
  filePath = path.isAbsolute(filePath) ? filePath : path.join(process.cwd(), filePath);

  try {
    await access(filePath);
    run(filePath);
  } catch (error) {
    console.error(error.message);
  }
})();